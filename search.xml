<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/08/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[响应式开发]]></title>
      <url>/2017/07/25/2017-7-25-responsive/</url>
      <content type="html"><![CDATA[<p>响应式设计：能够根据视口变化控制页面文档流，简单的来说就是针对任意设备对网页内容进行完美布局的一种显示机制。<br>媒体查询：在不改变页面内容的情况下，为特定的一些输出设备定制显示效果。</p>
<h3 id="视口与屏幕尺寸"><a href="#视口与屏幕尺寸" class="headerlink" title="视口与屏幕尺寸"></a>视口与屏幕尺寸</h3><p>视口：浏览器窗口内的内容区域，不包含工具栏、标签栏等。<br>屏幕尺寸：设备的物理显示区域。</p>
<h3 id="媒体查询的特性"><a href="#媒体查询的特性" class="headerlink" title="媒体查询的特性"></a>媒体查询的特性</h3><ol>
<li>width：视口宽度</li>
<li>height：视口高度</li>
<li>device-width：设备屏幕的宽度</li>
<li>device-height：设备屏幕的高度</li>
<li>orientation：检查设备处于横向还是纵向</li>
<li>aspect-ratio：基于视口宽度和高度的比</li>
<li>device-aspect-ratio：基于设备渲染平面宽度和高度的宽高比</li>
<li>color：每种颜色的位数</li>
<li>color-index：设备的颜色索引表中的颜色数，值为非负整数</li>
<li>monochrome：检测单色帧缓冲区中没像素所使用的位数，值为非负整数</li>
<li>resolution：用来检测屏幕或者打印机的分辨率</li>
<li>scan：电视机的扫描方式，值为：progressive(逐渐扫描)、interlace(隔行扫描)</li>
<li>grid：用来检测输出设备是网格设备还是位图设备</li>
</ol>
<p>媒体查询可使用min和max来创建一个查询范围，除了scan和grid之外。</p>
<h3 id="渐进增强与优雅降级"><a href="#渐进增强与优雅降级" class="headerlink" title="渐进增强与优雅降级"></a>渐进增强与优雅降级</h3><p>优雅降级：指的是为现代浏览器制作网站，然后保证为某些老版本浏览器提供基本可用的<br>体验。新特性在老版本浏览器中会降级，且一般会有一个分界点，声明不支持那些老掉<br>牙的浏览器。有些时候用户也仅会被警告他们所使用的浏览器有问题，建议其更换（如<br>“您的浏览器老得让人笑话——建议下载最新版浏览器！”）</p>
<p>渐进增强：与优雅降级恰好相反。渐进增强以恪守 Web标准的标签为基础，意味着它在所<br>有浏览器中均可用。然后通过 CSS 样式和必要的 JavaScript 来为更先进的浏览器提供渐<br>进式的增强体验</p>
<h3 id="px-em与rem"><a href="#px-em与rem" class="headerlink" title="px em与rem"></a>px em与rem</h3><p>px：像素，用px设置字体大小的时候，优点是精确，但是不支持浏览器缩放和移动端的兼容。因为有些手机屏幕太大啦，而像素却是固定的，所以有了em(相对值)<br>em：根据父元素来对应字体大小，麻烦的是每次都要找他父级元素的值，于是有了rem<br>rem：根据根元素html的font-size来设置字体大小。</p>
<p>但是IE8及以下都不支持em与rem属性，解决办法是px与rem一起使用，以达到兼容效果。例如：<br>p {font-size:14px; font-size:.875rem;}</p>
<p>在线转换工具：<a href="http://pxtoem.com/" target="_blank" rel="external">http://pxtoem.com/</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用js判断设备宽度以改变文字大小</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</div><div class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</div><div class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</div><div class="line">            docEl.style.fontSize = <span class="number">50</span> * (clientWidth / <span class="number">375</span>) + <span class="string">'px'</span>;</div><div class="line">        &#125;;</div><div class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    win.addEventListener(resizeEvt, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        clearTimeout(tid);</div><div class="line">        tid = setTimeout(recalc, <span class="number">300</span>);</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">    win.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (e.persisted) &#123;</div><div class="line">            clearTimeout(tid);</div><div class="line">            tid = setTimeout(recalc, <span class="number">300</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"></div><div class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        tid = setTimeout(recalc, <span class="number">0</span>);</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">    recalc();</div><div class="line"></div><div class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">如果有一天我说想你了，不是说这天我想你了，是说这天我忍不住了。</p><p></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6]]></title>
      <url>/2017/07/14/2017-7-18-es6_2/</url>
      <content type="html"><![CDATA[<h2 id="es6学习笔记-下"><a href="#es6学习笔记-下" class="headerlink" title="es6学习笔记(下)"></a>es6学习笔记(下)</h2><h3 id="Proxy（代理）和Reflect（反射）的概念"><a href="#Proxy（代理）和Reflect（反射）的概念" class="headerlink" title="Proxy（代理）和Reflect（反射）的概念"></a>Proxy（代理）和Reflect（反射）的概念</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> obj = &#123;</div><div class="line">        time:<span class="string">'2017-7-18'</span>,</div><div class="line">        name:<span class="string">'Crystal'</span>,</div><div class="line">        _r:<span class="number">123</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">let</span> monitor = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</div><div class="line">        <span class="comment">//拦截对象属性的读取</span></div><div class="line">        get(target,key)&#123;</div><div class="line">            <span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//拦截对象属性的设置</span></div><div class="line">        set(target,key,value)&#123;</div><div class="line">            <span class="comment">//只允许修改name属性</span></div><div class="line">            <span class="keyword">if</span>(key === <span class="string">"name"</span>)&#123;</div><div class="line">                <span class="keyword">return</span> target[key] = value;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> target[key];</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//判断当前对象中是否有某属性</span></div><div class="line">        has(target,key,value)&#123;</div><div class="line">            <span class="keyword">if</span>(key === <span class="string">'name'</span>)&#123;</div><div class="line">                <span class="keyword">return</span> target [key];</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//删除</span></div><div class="line">        deleteProperty(target,key)&#123;</div><div class="line">            <span class="keyword">if</span>(key.indexOf(<span class="string">"_"</span>)&gt;<span class="number">-1</span>)&#123;</div><div class="line">                <span class="keyword">delete</span> target[key];</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> target[key];</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//拦截object.keys、object.getOwnPropertySymbols、object.getOwnPropertyNames</span></div><div class="line">        ownKeys(target)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.target(target).filter(<span class="function"><span class="params">item</span> =&gt;</span> item != <span class="string">"time"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(monitor.time);<span class="comment">//2018-7-18</span></div><div class="line">    monitor.time = <span class="string">"2018"</span>;</div><div class="line">    <span class="built_in">console</span>.log( monitor.time);<span class="comment">//2018-7-18(无修改)</span></div><div class="line">    monitor.name = <span class="string">"Sinsle"</span>;</div><div class="line">    <span class="built_in">console</span>.log(monitor.name);<span class="comment">//Sinsle(已修改)</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> monitor,<span class="string">"time"</span> <span class="keyword">in</span> monitor);</div><div class="line"></div><div class="line">    <span class="keyword">delete</span> monitor.time;</div><div class="line">    <span class="built_in">console</span>.log(monitor);<span class="comment">//没有删除time</span></div><div class="line"></div><div class="line">    <span class="keyword">delete</span> monitor._r;</div><div class="line">    <span class="built_in">console</span>.log(monitor);<span class="comment">//删除_r属性</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ownkeys'</span>,<span class="built_in">Object</span>.keys(monitor));</div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;   <span class="comment">//Reflect的方法与属性和Proxy相同</span></div><div class="line">     <span class="keyword">let</span> obj = &#123;</div><div class="line">        time:<span class="string">'2017-7-18'</span>,</div><div class="line">        name:<span class="string">'Crystal'</span>,</div><div class="line">        _r:<span class="number">123</span></div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.get(obj,<span class="string">"time"</span>));<span class="comment">//2017-7-18</span></div><div class="line">    <span class="built_in">Reflect</span>.set(obj,<span class="string">"name"</span>,<span class="string">"sinsle"</span>);</div><div class="line">    <span class="built_in">console</span>.log(obj);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.has(obj,<span class="string">"name"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Proxy和Reflect的适用场景"><a href="#Proxy和Reflect的适用场景" class="headerlink" title="Proxy和Reflect的适用场景"></a>Proxy和Reflect的适用场景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</div><div class="line">            _validator:validator,</div><div class="line">            set(target,key,value,proxy)&#123;</div><div class="line">                <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</div><div class="line">                    <span class="keyword">let</span> val = <span class="keyword">this</span>._validator[key];</div><div class="line">                    <span class="keyword">if</span>(!!val(value))&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy)</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="built_in">Error</span> (<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span>到<span class="subst">$&#123;value&#125;</span>`</span>)</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> personValidator = &#123;</div><div class="line">        name(val)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">"string"</span>;</div><div class="line">        &#125;,</div><div class="line">        age(val) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">"number"</span> &amp;&amp; val &gt;=<span class="number">18</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name,age)&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">            <span class="keyword">return</span> validator(<span class="keyword">this</span>,personValidator);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">"Crystal"</span>,<span class="number">23</span>);</div><div class="line">    <span class="built_in">console</span>.log(person);<span class="comment">//Proxy &#123;name: "Crystal", age: 23&#125;</span></div><div class="line"></div><div class="line">    person.name = <span class="number">48</span>;<span class="comment">//报错：不能设置name到48</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>基本定义与生成实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent(<span class="string">'v'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>,v_parent);<span class="comment">//构造函数和实例 Parent &#123;name: "v"&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;       </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"继承"</span>,<span class="keyword">new</span> Child());<span class="comment">//继承 Child &#123;name: "crystal"&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">     <span class="comment">//子类传递给父类 super</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;       </div><div class="line">        <span class="keyword">constructor</span>(name = "zilan")&#123;</div><div class="line">            <span class="keyword">super</span>(name);<span class="comment">//super需在第一行</span></div><div class="line">            <span class="keyword">this</span>.type = <span class="string">"child"</span>;<span class="comment">//定义自己属性时需要有this关键字，在super之后</span></div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"传递属性"</span>,<span class="keyword">new</span> Child());<span class="comment">//传递属性 Child &#123;name: "zilan", type: "child"&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> tell()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"静态方法"</span>);<span class="comment">//通过类来调用，不通过类的实例调用</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Parent.tell();<span class="comment">//静态方法</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> tell()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"静态方法"</span>);<span class="comment">//static定义静态方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//定义静态属性</span></div><div class="line">    Parent.type = <span class="string">"静态属性"</span>;</div><div class="line">    <span class="built_in">console</span>.log(Parent.type);</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="getter与setter"><a href="#getter与setter" class="headerlink" title="getter与setter"></a>getter与setter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">   </div><div class="line">        get longName()&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'love '</span> + <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">        set longName(value)&#123;</div><div class="line">            <span class="keyword">this</span>.name = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> v = <span class="keyword">new</span> Parent();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"getter:"</span>,v.longName);<span class="comment">//getter: love crystal</span></div><div class="line">    v.longName = <span class="string">"sinsle"</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"setter:"</span>,v.longName);<span class="comment">//setter: love sinsle</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h4 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"执行"</span>);</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback &amp;&amp; callback.call()   </div><div class="line">        &#125;,<span class="number">1000</span>)</div><div class="line">    &#125;;</div><div class="line">    ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout1"</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"执行2"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">            setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve()</div><div class="line">            &#125;,<span class="number">1000</span>);</div><div class="line">        &#125;)</div><div class="line">    &#125;;</div><div class="line">    ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"promise"</span>,<span class="string">"setTimeout2"</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"执行3"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">            setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve()</div><div class="line">            &#125;,<span class="number">1000</span>);</div><div class="line">        &#125;)</div><div class="line">    &#125;;</div><div class="line">    ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve();</div><div class="line">            &#125;,<span class="number">2000</span>)</div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout3'</span>)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;   <span class="comment">//catch捕获错误</span></div><div class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"执行4"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</div><div class="line">                resolve();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ajax(<span class="string">"str"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">6</span>);</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"catch"</span>,err);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有图片加载完成再加载图片</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</div><div class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">            img.src = src;</div><div class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve(img);</div><div class="line">            &#125;</div><div class="line">            img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">                reject(err);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</div><div class="line">        imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">Promise</span>.all([</div><div class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB11rUOSXXXXXXVaXXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</div><div class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB1SpARSXXXXXaCapXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</div><div class="line">        loadImg(<span class="string">'https://img.alicdn.com/simba/img/TB1J.5xSXXXXXbJXFXXSutbFXXX.jpg'</span>)</div><div class="line">    ]).then(showImgs);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>谁先加载完成就先显示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</div><div class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">            img.src = src;</div><div class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve(img);</div><div class="line">            &#125;</div><div class="line">            img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">                reject(err);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">        p.appendChild(img);</div><div class="line">        <span class="built_in">document</span>.body.appendChild(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">Promise</span>.race([<span class="comment">//有一个状态改变 则改变  只显示一张图片 其他忽略</span></div><div class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB11rUOSXXXXXXVaXXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</div><div class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB1SpARSXXXXXaCapXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</div><div class="line">        loadImg(<span class="string">'https://img.alicdn.com/simba/img/TB1J.5xSXXXXXbJXFXXSutbFXXX.jpg'</span>)</div><div class="line">    ]).then(showImgs);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Iterator和for-of循环"><a href="#Iterator和for-of循环" class="headerlink" title="Iterator和for  of循环"></a>Iterator和for  of循环</h3><h4 id="什么是Iterator"><a href="#什么是Iterator" class="headerlink" title="什么是Iterator"></a>什么是Iterator</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>,<span class="string">'world'</span>];</div><div class="line">    <span class="keyword">let</span> map = arr[<span class="built_in">Symbol</span>.iterator]();</div><div class="line">    <span class="built_in">console</span>.log(map.next());</div><div class="line">    <span class="built_in">console</span>.log(map.next());</div><div class="line">    <span class="built_in">console</span>.log(map.next());</div><div class="line">    <span class="comment">// Object &#123;value: "hello", done: false&#125;</span></div><div class="line">    <span class="comment">// Object &#123;value: "world", done: false&#125;</span></div><div class="line">    <span class="comment">// Object &#123;value: undefined, done: true&#125; true代表循环结束</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Iterator的基本用法"><a href="#Iterator的基本用法" class="headerlink" title="Iterator的基本用法"></a>Iterator的基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;   <span class="comment">//先遍历start,再遍历end</span></div><div class="line">    <span class="keyword">let</span> obj = &#123;</div><div class="line">        start:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">        end:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</div><div class="line">        [<span class="built_in">Symbol</span>.iterator]()&#123;</div><div class="line">            <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">let</span> arr = self.start.concat(self.end);</div><div class="line">            <span class="keyword">let</span> len = arr.length;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                next()&#123;</div><div class="line">                    <span class="keyword">if</span>(index&lt;len)&#123;</div><div class="line">                        <span class="keyword">return</span> &#123;</div><div class="line">                            value:arr[index++],</div><div class="line">                            done:<span class="literal">false</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">return</span> &#123;</div><div class="line">                            value:arr[index++],</div><div class="line">                            done:<span class="literal">true</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</div><div class="line">        <span class="built_in">console</span>.log(key);<span class="comment">//1 2 3 4  7 8 9 </span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>,<span class="string">'world'</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</div><div class="line">        <span class="built_in">console</span>.log(value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> tell = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">        <span class="keyword">yield</span> <span class="string">'b'</span>;</div><div class="line">        <span class="keyword">return</span>  <span class="string">'c'</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> k = tell();</div><div class="line">    <span class="built_in">console</span>.log(k.next());</div><div class="line">    <span class="built_in">console</span>.log(k.next());</div><div class="line">    <span class="built_in">console</span>.log(k.next());</div><div class="line">    <span class="built_in">console</span>.log(k.next());</div><div class="line"></div><div class="line">    <span class="comment">//Object &#123;value: "a", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "b", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "c", done: true&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: undefined, done: true&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</div><div class="line">    obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">        <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> obj)&#123;</div><div class="line">        <span class="built_in">console</span>.log(value);<span class="comment">//1 2 3</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">//一个事务只有三个状态</span></div><div class="line">    <span class="keyword">let</span> state = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">yield</span> <span class="string">'A'</span>;</div><div class="line">            <span class="keyword">yield</span> <span class="string">'B'</span>;</div><div class="line">            <span class="keyword">yield</span> <span class="string">'C'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> states = state();</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">//另一种方法</span></div><div class="line">    <span class="keyword">let</span> state = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">await</span> <span class="string">'A'</span>;</div><div class="line">            <span class="keyword">await</span> <span class="string">'B'</span>;</div><div class="line">            <span class="keyword">await</span> <span class="string">'C'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> states = state();</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="built_in">console</span>.log(states.next());</div><div class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></div><div class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>抽奖次数的限制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">        <span class="comment">//具体抽奖次数</span></div><div class="line"></div><div class="line">        <span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次数`</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> residue = <span class="function"><span class="keyword">function</span>* (<span class="params">count</span>)</span>&#123;</div><div class="line">        <span class="keyword">while</span> (count&gt;<span class="number">0</span>)&#123;</div><div class="line">            count --;</div><div class="line">            <span class="keyword">yield</span> draw(count);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> star = residue(<span class="number">5</span>);</div><div class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</div><div class="line">    btn.id = <span class="string">'start'</span>;</div><div class="line">    btn.textContent = <span class="string">"抽奖"</span>;</div><div class="line">    documnent.body.appendChild(btn);</div><div class="line">    docunment.getELementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        star.next();</div><div class="line">    &#125;,<span class="literal">false</span>)</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="comment">//长轮询</span></div><div class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                resolve(&#123;code200&#125;);</div><div class="line">            &#125;,<span class="number">2000</span>)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> pull = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> genertaor = ajax();</div><div class="line">        <span class="keyword">let</span> step = genertaor.next();</div><div class="line">        step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(d.code != <span class="number">0</span>)&#123;</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">"wait"</span>);</div><div class="line">                    pull()</div><div class="line">                &#125;,<span class="number">1000</span>)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(d);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pull();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>npm install babel-plugin-transform-decorators-legacy –save-dev<br>修改babellrc文件<br>“plugins”:[“transform-decorators-legacy”]</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>修饰器是一个函数  类class<br>第三方修饰器库：core-decorators:npm install core-decorators<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> readonly = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</div><div class="line">        descriptor.weitable = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> descriptor</div><div class="line">    &#125;;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">        @readonly</div><div class="line">        time()&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"2017-07-19"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> test = <span class="keyword">new</span> Test();</div><div class="line">    <span class="comment">//修改</span></div><div class="line">    test.time = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"修改了时间"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(test.time());<span class="comment">//报错</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> typename = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</div><div class="line">        target.myname = <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">    @typename</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"类修饰符"</span>,Test.myname);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><h4 id="ES6的模块化语法"><a href="#ES6的模块化语法" class="headerlink" title="ES6的模块化语法"></a>ES6的模块化语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&#123;   <span class="comment">//A文件中导出</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">let</span> A = <span class="string">'123'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"test"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">        test()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"class"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//导出的建议写法  更方便命名</span></div><div class="line">    <span class="keyword">let</span> A = <span class="number">123</span>;</div><div class="line">    <span class="keyword">let</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"class"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">        test()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"class"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    esport <span class="keyword">default</span>&#123;</div><div class="line">        A,</div><div class="line">        test,</div><div class="line">        Hello</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//用import导入</span></div><div class="line">    <span class="comment">//B文件中</span></div><div class="line">    <span class="keyword">import</span> &#123;A,test,Hello&#125; <span class="keyword">from</span> A</div><div class="line"></div><div class="line">    <span class="comment">//当文件很多的时候  导入小技巧</span></div><div class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> lesson <span class="keyword">from</span> <span class="string">'A'</span>;</div><div class="line">    <span class="built_in">console</span>.log(lesson.A,lesson.test);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">真正的离开是不会有任何预警的。</p><p></p>
]]></content>
      
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6]]></title>
      <url>/2017/07/14/2017-7-14-es6_1/</url>
      <content type="html"><![CDATA[<h2 id="es6学习笔记-上"><a href="#es6学习笔记-上" class="headerlink" title="es6学习笔记(上)"></a>es6学习笔记(上)</h2><p>es8已经出来了，是时候开始学习es6了。</p>
<p>ES6从2010年开始到2015年正式通过，过了15年。</p>
<p>环境要求：node</p>
<p>检验运行环境对ES6的支持情况：<br>    npm install -g es-checker<br>    es-checker</p>
<p>Babel转码器：不需要担心环境是否支持，babel会将es6转换成es5语法。[<a href="http://babeljs.io/" target="_blank" rel="external">http://babeljs.io/</a>]<br>在配置.babelrc文件时，在根目录中新建.babelrc文件(使用sublime等编辑器新建)。</p>
<p>注意：babel默认只转换新的JavaScript句法，不转换新增的API，所以需要安装支持新增API的方法babel-polyfill.<br>    npm install –save babel-polyfill<br>    再文件中import或者require此库。</p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>ES5只有var与function可以声明变量，ES6中新增了let、const、class与import四种方法。</p>
<h3 id="let-const-作用域"><a href="#let-const-作用域" class="headerlink" title="let  const 作用域"></a>let  const 作用域</h3><p>es5：全局作用域  函数作用域<br>es6：新增块作用域 let const  只在用{  }包围内有效<br>es6强制使用严格模式：未定义使用 直接报错，而不是undefined，即不存在变量提升。<br>使用let不能重复定义相同变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(b);<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">//is not defined</span></div></pre></td></tr></table></figure></p>
<p> const定义的是常量不是变量，常量是不能修改的( read-only )，声明的时候必须赋值,但是const定义的对象（引用类型）则是可以改变的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">last</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line">        <span class="keyword">const</span> k = &#123;</div><div class="line">            a:<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        k.b = <span class="number">3</span>;</div><div class="line">        <span class="built_in">console</span>.log(PI,k);<span class="comment">//3.1415926 Object &#123;a: 1, b: 3&#125;</span></div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>是一种赋值方式，解构简单的说左右一一对应，允许使用默认值。<br>解构赋值的规则：只要等号右边的值不是对象就先将其转换成对象，由于undefined和null无法转换成对象，所以对他们进行解构赋值都会报错。<br>分为：数组解构赋值  对象解构赋值 字符串解构赋值   布尔值解构赋值   函数参数解构赋值   数值解构赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组类型结构赋值</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> a,b,reset;</div><div class="line">    [a,b]=[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">    <span class="built_in">console</span>.log(a,b);</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line"><span class="keyword">let</span> a,b,reset;</div><div class="line">[a,b,...reset]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(a,b,reset);</div><div class="line"><span class="comment">//reset 是一个数组[3,4,5,6]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="正则扩展"><a href="#正则扩展" class="headerlink" title="正则扩展"></a>正则扩展</h3><p>新增：构造函数的变化  正则方法的扩展  u修饰符  y修饰符 s修饰符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>,<span class="string">'i'</span>);</div><div class="line">    <span class="keyword">let</span> regex2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</div><div class="line">    <span class="built_in">console</span>.log(regex.test(<span class="string">'xyz123'</span>),regex2.test(<span class="string">'xyz123'</span>));<span class="comment">//true,true</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> regex3 = <span class="keyword">new</span> Regexp(<span class="regexp">/xyz/ig</span>,<span class="string">"i"</span>);<span class="comment">//第一个参数正则表达式 第二个参数是修饰符，则后面修饰符会覆盖前面正则表达式的修饰符</span></div><div class="line">    <span class="built_in">console</span>.log(regex3.flags);<span class="comment">//flags：用来获取正则表达式的修饰符</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> s = <span class="string">"bbb_bb_b"</span>;</div><div class="line">    <span class="keyword">let</span> a1 = <span class="regexp">/b+/g</span>;</div><div class="line">    <span class="keyword">let</span> a2 = <span class="regexp">/b+/y</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"one"</span>,a1.exec(s),a2.exec(s));</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"two"</span>,a1.exec(s),a2.exec(s));</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(a1.sticky,a2.sticky);<span class="comment">//sticky：验证是否开启y修饰符</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'u-1'</span>,/^\uD83D/.test(<span class="string">'\uD83D\uDC2A'</span>));<span class="comment">//u-1 true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'u-2'</span>,/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>));<span class="comment">//u-2 false</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">'a'</span>));<span class="comment">//false</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">'a'</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="字符串知识"><a href="#字符串知识" class="headerlink" title="字符串知识"></a>字符串知识</h3><p>新增：Unicode表示法  遍历接口  模板字符串  新增方法</p>
<p>库：npm install babel-polyfill –sava-dev</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>,<span class="string">'\u0061'</span>);<span class="comment">//a a</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'s'</span>,<span class="string">'\u20bb7'</span>);<span class="comment">//s ₻7</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'s2'</span>,<span class="string">`\u&#123;20bb7&#125;`</span>);<span class="comment">//s2 𠮷</span></div><div class="line"></div><div class="line">   <span class="comment">//es5中乱码问题</span></div><div class="line">    <span class="keyword">let</span> s = <span class="string">'𠮷'</span>;</div><div class="line">    <span class="built_in">console</span>.log(s.length);<span class="comment">//2</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'0'</span>,s.charAt(<span class="number">0</span>));<span class="comment">//0 �</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>,s.charAt(<span class="number">1</span>));<span class="comment">//1 �</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'at0'</span>,s.charCodeAt(<span class="number">0</span>));<span class="comment">//at0 55362</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'at1'</span>,s.charCodeAt(<span class="number">1</span>));<span class="comment">//at1 57271</span></div><div class="line"></div><div class="line">    <span class="comment">//es6中新增方法codePointAt()方法来获取码值</span></div><div class="line">    <span class="keyword">let</span> s1 = <span class="string">'𠮷a'</span>;</div><div class="line">    <span class="built_in">console</span>.log(s1.length);<span class="comment">//3</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>));<span class="comment">//code0 134071</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));<span class="comment">//code0 20bb7</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'code1'</span>,s1.codePointAt(<span class="number">1</span>));<span class="comment">//code1 57271</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'code2'</span>,s1.codePointAt(<span class="number">2</span>));<span class="comment">//code2 97</span></div><div class="line"></div><div class="line">   <span class="comment">//能不能处理Unicode字符大于0fffff</span></div><div class="line">    <span class="comment">//es5中</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">'0x20bb7'</span>));<span class="comment">//ஷ</span></div><div class="line">    <span class="comment">//es6中</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="string">'0x20bb7'</span>));<span class="comment">//𠮷</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">let</span> str = <span class="string">'\u&#123;20bb7&#125;abc'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'es5'</span>,str[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//es5 �   es5 �  es5 a  es5 b   es5 c</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">of</span> str)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'es6'</span>,code);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//es6 𠮷    es6 a   es6 b   es6 c</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="includes-startsWith-endWith"><a href="#includes-startsWith-endWith" class="headerlink" title="includes()  startsWith()  endWith()"></a>includes()  startsWith()  endWith()</h4><p>之前的js只有indexof方法来确定一个字符串是否包含在另一个字符串中，ES6又提供了这三种新的方法，返回的都是布尔值，第一个参数是要搜索的字符串，第二个参数表示起始位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">//判断字符串中是不是包含某些字符</span></div><div class="line">    <span class="keyword">let</span> str1 = <span class="string">'string'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'includes'</span>,str1.includes(<span class="string">"r"</span>));<span class="comment">//includes true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'includes'</span>,str1.includes(<span class="string">"c"</span>));<span class="comment">//includes false</span></div><div class="line"></div><div class="line">    <span class="comment">//判断某些字符串是否以某字符为起始</span></div><div class="line">    <span class="built_in">console</span>,log(<span class="string">"start"</span>,str1.startWith(<span class="string">"str"</span>));<span class="comment">// start true</span></div><div class="line">    <span class="built_in">console</span>,log(<span class="string">"end"</span>,str1.endWith(<span class="string">"ng"</span>));<span class="comment">// end true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>复制原字符串n次，参数为小数时会被取整，若为负数或者infinity，则报错；NaN等同于0。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> str = <span class="string">"abc"</span>;</div><div class="line">    <span class="comment">//字符串复制功能</span></div><div class="line">    <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>));<span class="comment">//abcabc</span></div><div class="line">    <span class="comment">//模板字符串</span></div><div class="line">    <span class="keyword">let</span> name = <span class="string">"list"</span>;</div><div class="line">    <span class="keyword">let</span> info = <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">let</span> m = <span class="string">`i am <span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;info&#125;</span>`</span>;</div><div class="line">    <span class="built_in">console</span>.log(m);<span class="comment">//i am list,hello world</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">//标签模板:防止xss攻击;处理多语言</span></div><div class="line">    <span class="keyword">let</span> user1 = &#123;</div><div class="line">        name:<span class="string">"list"</span>,</div><div class="line">        info:<span class="string">"hello world"</span></div><div class="line">    &#125;;</div><div class="line">    abc<span class="string">`i am <span class="subst">$&#123;user1.name&#125;</span>,<span class="subst">$&#123;user1.info&#125;</span>`</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s,v1,v2</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(s,v1,v2);</div><div class="line">        <span class="keyword">return</span> s+v1+v2;<span class="comment">//i am ,,,listhello world</span></div><div class="line">    &#125;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//raw 对所有的\符号都不转义</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);<span class="comment">//Hi\n3</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);<span class="comment">//Hi  换行 3</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><p>新增方法：<br>方法调整：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;   </div><div class="line">    <span class="comment">//二进制以0b开头</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">0b111110100</span>);<span class="comment">//500</span></div><div class="line"></div><div class="line">    <span class="comment">//八进制以0o开头</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">0o754</span>);<span class="comment">//492</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">&#123;   <span class="comment">//isFinite判断是不是数 isNaN</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'15'</span>,<span class="built_in">Number</span>.isFinite(<span class="number">15</span>));<span class="comment">//15 true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>));<span class="comment">//NaN false</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1/0'</span>,<span class="built_in">Number</span>.isFinite(<span class="number">1</span>/<span class="number">0</span>));<span class="comment">//1/0 false</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="comment">//判断是不是整数（保证参数是一个数字）</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'25'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25</span>));<span class="comment">//25 true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'25.0'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.0</span>));<span class="comment">//25.0 true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'25.1'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>));<span class="comment">//25.1 false</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'crystal'</span>,<span class="built_in">Number</span>.isInteger(<span class="string">"crystal"</span>));<span class="comment">//crystal false</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'crystal'</span>,<span class="built_in">Number</span>.isInteger(crystal));<span class="comment">//报错</span></div><div class="line">&#125;</div><div class="line">&#123;   <span class="comment">//MAX_SAFE_INTEGER 常量  表示最大上限  </span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER);<span class="comment">//9007199254740991</span></div><div class="line">    <span class="comment">//最小下限</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER);<span class="comment">//-9007199254740991</span></div><div class="line">    <span class="comment">//判断一个数是否是安全的（在上下限范围之内）（保证参数是一个数字）</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"10"</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="number">10</span>));<span class="comment">//10 true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">//取小数的整数部分</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"4.1"</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.1</span>));<span class="comment">//4</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"4.9"</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.9</span>));<span class="comment">//4</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="comment">//判断一个数是正数负数或者是0  返回值：-1 0  1  NaN</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-5'</span>,<span class="built_in">Math</span>.sign(<span class="number">-5</span>));</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'0'</span>,<span class="built_in">Math</span>.sign(<span class="number">0</span>));</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'5'</span>,<span class="built_in">Math</span>.sign(<span class="number">5</span>));    </div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="comment">//立方根</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"-1"</span>,<span class="built_in">Math</span>.cbrt(<span class="number">-1</span>));<span class="comment">//-1</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"8"</span>,<span class="built_in">Math</span>.cbrt(<span class="number">8</span>));<span class="comment">//2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数组扩展方法"><a href="#数组扩展方法" class="headerlink" title="数组扩展方法"></a>数组扩展方法</h3><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p>把一个集合转义成数组。也有map的用法，两个参数：第一个是数组，第二个是函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">//打印页面中所有p节点的内容</span></div><div class="line">    <span class="keyword">let</span> p = docunment.querySelectorAll(<span class="string">'p'</span>);</div><div class="line">    <span class="keyword">let</span> pArr = <span class="built_in">Array</span>.from(p);</div><div class="line">    pArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(item.textContent);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item*<span class="number">2</span>;<span class="comment">//[2, 6, 10, 14]</span></div><div class="line">    &#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h4><p>将一组值转换成数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</div><div class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">// [3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">    <span class="comment">//没有参数情况下 返回空数组</span></div><div class="line">    <span class="keyword">let</span> empty = <span class="built_in">Array</span>.of();</div><div class="line">    <span class="built_in">console</span>.log(empty);<span class="comment">//[]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h4><p>使用频率不高<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;   <span class="comment">//替换起始位置 读取起始位置 结束位置</span></div><div class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//[4, 2, 3, 4, 5]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find\findIndex"></a>find\findIndex</h4><p>find与findIndex只找到第一个符合条件的值与下标，参数可为函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item &gt; <span class="number">3</span>;<span class="comment">//只返回4</span></div><div class="line">    &#125;));</div><div class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item &gt; <span class="number">3</span>;<span class="comment">//返回4的下标 3</span></div><div class="line">    &#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>填充<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fill-7'</span>,[<span class="string">'a'</span>,<span class="number">1</span>,<span class="literal">undefined</span>].fill(<span class="number">7</span>));<span class="comment">//[7,7,7]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fill,pos'</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//第一个是替换的 第二个是起始位置（从1开始) 第二个是结束位置 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="entries-keys-values"><a href="#entries-keys-values" class="headerlink" title="entries\keys\values"></a>entries\keys\values</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].keys())&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"keys"</span>,index);<span class="comment">//key 0  key 1  key 2</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//需要兼容库</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].values())&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"values"</span>,index);<span class="comment">//取到的是值</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//既取值又取索引</span></div><div class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> [index,value] <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].entries())&#123;</div><div class="line">        <span class="built_in">console</span>.log(index,value);<span class="comment">//0 "1"   1 "c"    2 "ks"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p>判断数组中是否包含某个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));<span class="comment">//number true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>));<span class="comment">//number true  NaN==NaN  es5中则做不到</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><p>ES5中参数默认值使用||符号,es6中默认值参数须是最后一个参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y = <span class="string">"world"</span></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"默认值"</span>,x,y);</div><div class="line">    &#125;</div><div class="line">    test(<span class="number">1</span>);<span class="comment">//默认值 1 world</span></div><div class="line">    test(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//默认值 1 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="comment">//函数作用域</span></div><div class="line">    <span class="keyword">let</span> x = <span class="string">'test'</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">x,y=x</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'作用域'</span>,x,y);</div><div class="line">    &#125;</div><div class="line">    test2(<span class="string">'kill'</span>);<span class="comment">//作用域 kill kill</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">...arg</span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arg)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'rest'</span>,v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    test3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//rest 1  rest2....rest7</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>把数组转成离散的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);<span class="comment">//a,1,2,4</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> arrow = <span class="function"><span class="params">v</span> =&gt;</span> v*<span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(arrow(<span class="number">3</span>));<span class="comment">//6</span></div><div class="line">    <span class="comment">//如果没有参数，则用()代替</span></div><div class="line">    <span class="keyword">let</span> arrow2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">8</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h4><p>提高性能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'tail'</span>,x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> tail(x);</div><div class="line">    &#125;</div><div class="line">    f(<span class="number">12</span>);<span class="comment">//tail 12</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><h4 id="简洁表示法"><a href="#简洁表示法" class="headerlink" title="简洁表示法"></a>简洁表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> o = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> k = <span class="number">2</span>;</div><div class="line">    <span class="keyword">let</span> es5 = &#123;</div><div class="line">        o:o,</div><div class="line">        k:k</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">let</span> es6 = &#123;</div><div class="line">        o,</div><div class="line">        k</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(es5,es6);<span class="comment">//Object &#123;o: 1, k: 2&#125; Object &#123;o: 1, k: 2&#125;</span></div><div class="line"></div><div class="line">    <span class="comment">//如果对象中有方法</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> es5_method = &#123;</div><div class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">        &#125;  </div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">let</span> es6_method = &#123;</div><div class="line">        hello()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(es5_method.hello(),es6_method.hello());<span class="comment">//hello  hello</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="string">'b'</span>;</div><div class="line">    <span class="keyword">let</span> es5_obj = &#123;</div><div class="line">        a:<span class="string">'c'</span>,</div><div class="line">        b:<span class="string">'c'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> es6_obj = &#123;</div><div class="line">        [a]:<span class="string">'c'</span>   <span class="comment">//[a]是一个表达式，实现变量依赖</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(es5_obj,es6_obj);<span class="comment">//Object &#123;a: "c", b: "c"&#125; Object &#123;b: "c"&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="扩展运算符-1"><a href="#扩展运算符-1" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>要扩展库,babel支持性不好，实际无法运用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> &#123;a,b,...c&#125; = &#123;<span class="attr">a</span>:<span class="string">'test'</span>,<span class="attr">b</span>:<span class="string">'kill'</span>,<span class="attr">c</span>:<span class="string">'ddd'</span>,<span class="attr">d</span>:<span class="string">'ccc'</span>&#125;;</div><div class="line">    c = &#123;</div><div class="line">        c:<span class="string">'ddd'</span>,</div><div class="line">        d:<span class="string">'ccc'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Object新增方法"><a href="#Object新增方法" class="headerlink" title="Object新增方法"></a>Object新增方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">//is()判断两个参数是否相等===</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"字符串"</span>,<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>));<span class="comment">//true</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"数组"</span>,<span class="built_in">Object</span>.is([],[]));</div><div class="line"></div><div class="line">    <span class="comment">//assign()浅拷贝</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"拷贝"</span>,<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">'a'</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;));<span class="comment">//拷贝 Object &#123;a: "a", b: "b"&#125;</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> test = &#123;</div><div class="line">        k:<span class="number">123</span>,</div><div class="line">        o:<span class="number">456</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</div><div class="line">        <span class="built_in">console</span>.log([key,value]);<span class="comment">//["k", 123] ["o", 456]</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Symbol数据类型"><a href="#Symbol数据类型" class="headerlink" title="Symbol数据类型"></a>Symbol数据类型</h3><p>提供独一无二的值  声明的变量 不重复 不相等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;<span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a1 === a2);<span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</div><div class="line"><span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a3 === a4);<span class="comment">//true</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> a1 = Symblo.for(<span class="string">"abc"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> obj = &#123;</div><div class="line">        [a1]:<span class="string">'123'</span>,</div><div class="line">        <span class="string">'abc'</span>:<span class="number">234</span>,</div><div class="line">        <span class="string">'c'</span>:<span class="number">345</span></div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(obj);</div><div class="line"></div><div class="line">   <span class="comment">// 使用symbol定义的属性，通过for in是拿不到属性值的</span></div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"let of"</span>,key,value);</div><div class="line">   &#125;<span class="comment">//只拿到非symbol属性</span></div><div class="line"></div><div class="line">   <span class="comment">//使用Object.getOwnPropertySymbols(obj).forEach方法</span></div><div class="line">   <span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(obj[item]);</div><div class="line">   &#125;)<span class="comment">//只拿到symbol属性</span></div><div class="line"></div><div class="line">   <span class="comment">//取到所有的属性与属性值</span></div><div class="line">   <span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ownkeys"</span>,item,obj[item]);</div><div class="line">   &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Set  WeakSet  Map  WeakMap</p>
<p>set集合中的元素是不能重复的<br>set中的key必须是字符串<br>map的key可以是任意数据类型</p>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    <span class="comment">//set中增加元素时用add方法</span></div><div class="line">    list.add(<span class="number">5</span>);</div><div class="line">    list.add(<span class="number">7</span>);</div><div class="line">    <span class="comment">//size属性知道长度</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"size"</span>,list.size);<span class="comment">//size 2</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"size"</span>,list.size);<span class="comment">//size 5</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> size = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    list.add(<span class="number">1</span>);</div><div class="line">    list.add(<span class="number">2</span>);</div><div class="line">    list.add(<span class="number">1</span>);<span class="comment">//添加重复的元素时不显示,不报错</span></div><div class="line"></div><div class="line">    <span class="comment">//重要场景：数组去重</span></div><div class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>];</div><div class="line">    <span class="keyword">let</span> list1 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line">    <span class="built_in">console</span>.log(list1);<span class="comment">//[1,2,3,4,5,6]</span></div><div class="line"></div><div class="line">    <span class="comment">//list不转换数据类型，string与number类型是不一样的，不会去重</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</div><div class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"has"</span>,list.has(<span class="string">'add'</span>));<span class="comment">//true</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"delete"</span>,list.delete(<span class="string">'add'</span>),list);<span class="comment">//delete true ['delete','clear','has']</span></div><div class="line">    list.clear();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"list"</span>,list);<span class="comment">//[]</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;   <span class="comment">//遍历</span></div><div class="line">    <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</div><div class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.keys())&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"keys"</span>,key);<span class="comment">//keys add  keys delete  keys clear  keys has</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.values())&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"keys"</span>,key);<span class="comment">//keys add  keys delete  keys clear  keys has</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> list.entries())&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"entries"</span>,key,value);<span class="comment">//entries add add  entries delete delete  entries clear clear  entries has has</span></div><div class="line">    &#125;</div><div class="line">    list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(item);<span class="comment">//add delete clear has</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h4><p>必须是对象，弱引用（不检测是否在其他地方运用，与垃圾回收机制无缘）<br>与set区别：无clear()方法，无size属性，不能遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> weakList = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</div><div class="line">    <span class="keyword">let</span> arg = &#123;&#125;;</div><div class="line">    weakList.add(arg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'weakList'</span>,weakList);<span class="comment">//WeakSet &#123;Object &#123;&#125;&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">//第一种创建方式：无参数</span></div><div class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">    <span class="keyword">let</span> arr = [<span class="string">'123'</span>];</div><div class="line">    map.set(arr,<span class="number">456</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"map"</span>,map,map.get(arr));<span class="comment">//map &#123;["123"] =&gt; 456&#125; 456</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="comment">//第二种创建方式:数组</span></div><div class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]]);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"map arg"</span>,map);<span class="comment">//map arg  &#123;"a" =&gt; 123, "b" =&gt; 456&#125;</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"size"</span>,map.size);<span class="comment">//size 2</span></div><div class="line">    <span class="comment">//还有get()、delete()、clear()、遍历等方法与set一样</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> weakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line">    <span class="keyword">let</span> o = &#123;&#125;;</div><div class="line">    weakMap.set(o,<span class="number">123</span>);</div><div class="line">    <span class="built_in">console</span>.log(weakMap.get(o));<span class="comment">//123</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Map与Array的对比"><a href="#Map与Array的对比" class="headerlink" title="Map与Array的对比"></a>Map与Array的对比</h4><p>增删改查<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">    <span class="keyword">let</span> array = [];</div><div class="line">    <span class="comment">//增</span></div><div class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>);</div><div class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">    <span class="built_in">console</span>.info(map,array);<span class="comment">//&#123;"t" =&gt; 1&#125;  [&#123;t:1&#125;]</span></div><div class="line"></div><div class="line">    <span class="comment">//查</span></div><div class="line">    <span class="keyword">let</span> map_exist = map.has(<span class="string">'t'</span>);</div><div class="line">    <span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">    <span class="built_in">console</span>.info(map_exist,array_exist);<span class="comment">//true  &#123;t:1&#125;</span></div><div class="line"></div><div class="line">    <span class="comment">//改</span></div><div class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>);</div><div class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line">    <span class="built_in">console</span>.info(map,array);</div><div class="line"></div><div class="line">    <span class="comment">//删</span></div><div class="line">    map.delete(<span class="string">'t'</span>);</div><div class="line">    <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">    array.splice(index,<span class="number">1</span>);</div><div class="line">    <span class="built_in">console</span>.info(map,array);<span class="comment">//&#123;&#125; []</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Set与Array的对比"><a href="#Set与Array的对比" class="headerlink" title="Set与Array的对比"></a>Set与Array的对比</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    <span class="keyword">let</span> array = [];</div><div class="line"></div><div class="line">    <span class="comment">//增</span></div><div class="line">    set.add(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">    <span class="built_in">console</span>.info(set,array);<span class="comment">//&#123;t =&gt; 1&#125;  [&#123;t:1&#125;]</span></div><div class="line"></div><div class="line">    <span class="comment">//查</span></div><div class="line">    <span class="keyword">let</span> set_exist = set.has(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);<span class="comment">//需要被保存过才会true</span></div><div class="line">    <span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">    <span class="built_in">console</span>.info(set_exist,array_exist);<span class="comment">//false  &#123;t:1&#125;</span></div><div class="line"></div><div class="line">     <span class="comment">//改</span></div><div class="line">    set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?item.t = <span class="number">2</span>:<span class="string">''</span>);</div><div class="line">    <span class="built_in">console</span>.info(set,array);</div><div class="line"></div><div class="line">    <span class="comment">//删</span></div><div class="line">    set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?set.delete(item):<span class="string">''</span>);</div><div class="line">    <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">    array.splice(index,<span class="number">1</span>);</div><div class="line">    <span class="built_in">console</span>.info(set,array);<span class="comment">//&#123;&#125; []</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="map、set与Object的对比"><a href="#map、set与Object的对比" class="headerlink" title="map、set与Object的对比"></a>map、set与Object的对比</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> item = &#123;<span class="attr">t</span>:<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//增</span></div><div class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>);</div><div class="line">    set.add(item);</div><div class="line">    obj[<span class="string">'t'</span>] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">console</span>.log(obj,map,set);</div><div class="line"></div><div class="line">    <span class="comment">//查</span></div><div class="line">    <span class="built_in">console</span>.info(&#123;</div><div class="line">        map_exist:map.has(<span class="string">'t'</span>),</div><div class="line">        set_exist:set.has(item),</div><div class="line">        obj_exist:<span class="string">'t'</span> <span class="keyword">in</span> obj</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">//改</span></div><div class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>);</div><div class="line">    item.t = <span class="number">2</span>;</div><div class="line">    obj[<span class="string">'t'</span>] =<span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(obj,map,set);</div><div class="line"></div><div class="line">    <span class="comment">//删</span></div><div class="line">    map.delete(<span class="string">'t'</span>);</div><div class="line">    set.delete(item);</div><div class="line">    <span class="keyword">delete</span> obj[<span class="string">"t"</span>];</div><div class="line">    <span class="built_in">console</span>.log(obj,map,set);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">遇见你之后，我只想日子过得慢一点，再慢一点。</p><p></p>
]]></content>
      
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React]]></title>
      <url>/2017/07/10/2017-7-10-react2/</url>
      <content type="html"><![CDATA[<h1 id="React-Native之React速学教程-中"><a href="#React-Native之React速学教程-中" class="headerlink" title="React Native之React速学教程(中)"></a>React Native之React速学教程(中)</h1><p>本文出自《React Native学习笔记》系列文章。</p>
<p style="font-size:12px;color:red;">非我原创，原创作者也不知道是谁，放在页面上方便学习</p>

<p>React Native是基于React的，在开发React Native过程中少不了的需要用到React方面的知识。虽然官方也有相应的Document，但篇幅比较多，学起来比较枯燥。<br>通过《React Native之React速学教程》你可以对React有更系统和更深入的认识。为了方便大家学习，我将《React Native之React速学教程》分为上中、下三篇，大家可以根据需要进行阅读学习。  </p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇为《React Native之React速学教程》的第二篇。本篇将从组件(Component)的详细说明、组件的生命周期(Component Lifecycle)、isMounted是个反模式等方面进行讲解，让大家对组件(Component)有个更系统以及更深入的认识。  </p>
<h2 id="组件的详细说明"><a href="#组件的详细说明" class="headerlink" title="组件的详细说明"></a>组件的详细说明</h2><p>当通过调用 React.createClass() 来创建组件的时候，每个组件必须提供render方法，并且也可以包含其它的在这里描述的生命周期方法。  </p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>ReactComponent render()</code><br><code>render()</code> 方法是必须的。<br>当该方法被回调的时候，会检测 <code>this.props</code> 和 <code>this.state</code>，并返回一个单子级组件。该子级组件可以是虚拟的本地 DOM 组件（比如 \<div> 或者 <code>React.DOM.div()</code>），也可以是自定义的复合组件。<br>你也可以返回 <code>null</code> 或者 <code>false</code> 来表明不需要渲染任何东西。实际上，React 渲染一个<code>&lt;noscript&gt;</code>标签来处理当前的差异检查逻辑。当返回 <code>null</code> 或者 <code>false</code> 的时候，<code>this.getDOMNode()</code> 将返回 <code>null</code>。   </div></p>
<p><strong>注意：</strong>  </p>
<p><code>render()</code>函数应该是纯粹的，也就是说该函数不修改组件的 <code>state</code>，每次调用都返回相同的结果，不读写 DOM 信息，也不和浏览器交互（例如通过使用 <code>setTimeout</code>）。如果需要和浏览器交互，在 <code>componentDidMount()</code> 中或者其它生命周期方法中做这件事。保持 <code>render()</code> 纯粹，可以使服务器端渲染更加切实可行，也使组件更容易被理解。  </p>
<blockquote>
<p>心得：不要在<code>render()</code>函数中做复杂的操作，更不要进行网络请求，数据库读写，I/O等操作。</p>
</blockquote>
<h3 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h3><p><code>object getInitialState()</code><br>初始化组件状态，在组件挂载之前调用一次。返回值将会作为 <code>this.state</code>的初始值。  </p>
<blockquote>
<p>心得：通常在该方法中对组件的状态进行初始化。  </p>
</blockquote>
<h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><p><code>object getDefaultProps()</code><br>设置组件属性的默认值，在组件类创建的时候调用一次，然后返回值被缓存下来。如果父组件没有指定 <code>props</code> 中的某个键，则此处返回的对象中的相应属性将会合并到 <code>this.props</code> （使用 in 检测属性）。<br><strong>Usage:</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getDefaultProps() &#123;</div><div class="line">    return &#123;</div><div class="line">      title: &apos;&apos;,</div><div class="line">      popEnabled:true</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p><strong>注意</strong><br>该方法在任何实例创建之前调用，因此不能依赖于 <code>this.props</code>。另外，<code>getDefaultProps()</code> 返回的任何复杂对象将会在实例间共享，而不是每个实例拥有一份拷贝。  </p>
<blockquote>
<p>心得：该方法在你封装一个自定义组件的时候经常用到，通常用于为组件初始化默认属性。   </p>
</blockquote>
<h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a><a href="https://facebook.github.io/react/docs/top-level-api.html#react.proptypes" target="_blank" rel="external">PropTypes</a></h3><p><code>object propTypes</code><br><code>propTypes</code> 对象用于验证传入到组件的 <code>props</code>。  可参考<a href="https://facebook.github.io/react/docs/reusable-components.html" target="_blank" rel="external">可重用的组件</a>。</p>
<p><strong>Usage:</strong>   </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var NavigationBar=React.createClass(&#123;</div><div class="line">  propTypes: &#123;</div><div class="line">    navigator:React.PropTypes.object,</div><div class="line">    leftButtonTitle: React.PropTypes.string,</div><div class="line">    leftButtonIcon: Image.propTypes.source,</div><div class="line">    popEnabled:React.PropTypes.bool,</div><div class="line">    onLeftButtonClick: React.PropTypes.func,</div><div class="line">    title:React.PropTypes.string,</div><div class="line">    rightButtonTitle: React.PropTypes.string,</div><div class="line">    rightButtonIcon:Image.propTypes.source,</div><div class="line">    onRightButtonClick:React.PropTypes.func</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<blockquote>
<p>心得：在封装组件时，对组件的属性通常会有类型限制，如：组件的背景图片，需要<code>Image.propTypes.source</code>类型，propTypes便可以帮你完成你需要的属性类型的检查。</p>
</blockquote>
<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p><code>array mixins</code><br><code>mixin</code> 数组允许使用混合来在多个组件之间共享行为。更多关于混合的信息，可参考<a href="https://facebook.github.io/react/docs/reusable-components.html#mixins" target="_blank" rel="external">Reusable Components</a>。  </p>
<blockquote>
<p>心得：由于ES6不再支持mixins，所以不建议在使用mixins，我们可以用另外一种方式来替代mixins，</p>
<h3 id="statics"><a href="#statics" class="headerlink" title="statics"></a>statics</h3></blockquote>
<p><code>object statics</code><br><code>statics</code> 对象允许你定义静态的方法，这些静态的方法可以在组件类上调用。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var MyComponent = React.createClass(&#123;</div><div class="line">  statics: &#123;</div><div class="line">    customMethod: function(foo) &#123;</div><div class="line">      return foo === 'bar';</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">MyComponent.customMethod('bar');  // true</div></pre></td></tr></table></figure>
<p>在这个块儿里面定义的方法都是静态的，你可以通过<code>ClassName.funcationName</code>的形式调用它。<br><strong>注意</strong><br>这些方法不能获取组件的 <code>props</code> 和 <code>state</code>。如果你想在静态方法中检查 <code>props</code> 的值，在调用处把 <code>props</code> 作为参数传入到静态方法。</p>
<h3 id="displayName"><a href="#displayName" class="headerlink" title="displayName"></a>displayName</h3><p><code>string displayName</code><br><code>displayName</code> 字符串用于输出调试信息。JSX 自动设置该值；可参考<a href="https://facebook.github.io/react/docs/jsx-in-depth.html#the-transform" target="_blank" rel="external">JSX in Depth</a>。</p>
<h4 id="isMounted"><a href="#isMounted" class="headerlink" title="isMounted"></a>isMounted</h4><p><code>boolean isMounted()</code>，当组件被渲染到DOM，该方法返回true，否则返回false。该方法通常用于异步任务完成后修改state前的检查，以避免修改一个没有被渲染的组件的state。   </p>
<blockquote>
<p>心得：开发中不建议大家isMounted，大家可以使用另外一种更好的方式来避免修改没有被渲染的DOM，请下文的<a href="">isMounted 是个反模式</a>。</p>
</blockquote>
<h2 id="组件的生命周期-Component-Lifecycle"><a href="#组件的生命周期-Component-Lifecycle" class="headerlink" title="组件的生命周期(Component Lifecycle)"></a><a href="https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle" target="_blank" rel="external">组件的生命周期(Component Lifecycle)</a></h2><p>在iOS中<code>UIViewController</code>提供了<code>(void)viewWillAppear:(BOOL)animated</code>, <code>- (void)viewDidLoad</code>,<code>(void)viewWillDisappear:(BOOL)animated</code>等生命周期方法，在Android中<code>Activity</code>则提供了<code>onCreate()</code>,<code>onStart()</code>,<code>onResume()</code>,<code>onPause()</code>,<code>onStop()</code>,<code>onDestroy()</code>等生命周期方法，这些生命周期方法展示了一个界面从创建到销毁的一生。  </p>
<p>那么在React 中组件(Component)也是有自己的生命周期方法的。  </p>
<p><img src="https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/master/React%20Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B/images/component-lifecycle.jpg" alt="component-lifecycle"></p>
<h3 id="组件的生命周期分成三个状态："><a href="#组件的生命周期分成三个状态：" class="headerlink" title="组件的生命周期分成三个状态："></a>组件的生命周期分成三个状态：</h3><ul>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ul>
<blockquote>
<p>心得：你会发现这些React 中组件(Component)的生命周期方法从写法上和iOS中<code>UIViewController</code>的生命周期方法很像，React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用。  </p>
</blockquote>
<h3 id="Mounting-装载"><a href="#Mounting-装载" class="headerlink" title="Mounting(装载)"></a>Mounting(装载)</h3><ul>
<li><code>getInitialState()</code>: 在组件挂载之前调用一次。返回值将会作为 this.state 的初始值。</li>
<li><code>componentWillMount()</code>：服务器端和客户端都只调用一次，在初始化渲染执行之前立刻调用。</li>
<li><code>componentDidMount()</code>：在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。</li>
</ul>
<h3 id="Updating-更新"><a href="#Updating-更新" class="headerlink" title="Updating (更新)"></a>Updating (更新)</h3><ul>
<li>componentWillReceiveProps(object nextProps) 在组件接收到新的 props 的时候调用。在初始化渲染的时候，该方法不会调用。</li>
</ul>
<p>用此函数可以作为 react 在 prop 传入之后， render() 渲染之前更新 state 的机会。老的 props 可以通过 this.props 获取到。在该函数中调用 this.setState() 将不会引起第二次渲染。</p>
<ul>
<li>shouldComponentUpdate(object nextProps, object nextState): 在接收到新的 props 或者 state，将要渲染之前调用。</li>
</ul>
<p>该方法在初始化渲染的时候不会调用，在使用 forceUpdate 方法的时候也不会。如果确定新的 props 和 state 不会导致组件更新，则此处应该 返回 false。   </p>
<blockquote>
<p>心得：重写次方你可以根据实际情况，来灵活的控制组件当 props 和 state 发生变化时是否要重新渲染组件。   </p>
</blockquote>
<ul>
<li>componentWillUpdate(object nextProps, object nextState)：在接收到新的 props 或者 state 之前立刻调用。</li>
</ul>
<p>在初始化渲染的时候该方法不会被调用。使用该方法做一些更新之前的准备工作。   </p>
<blockquote>
<p>注意：你不能在该方法中使用 this.setState()。如果需要更新 state 来响应某个 prop 的改变，请使用 <code>componentWillReceiveProps</code>。</p>
</blockquote>
<ul>
<li>componentDidUpdate(object prevProps, object prevState): 在组件的更新已经同步到 DOM 中之后立刻被调用。</li>
</ul>
<p>该方法不会在初始化渲染的时候调用。使用该方法可以在组件更新之后操作 DOM 元素。</p>
<h3 id="Unmounting-移除"><a href="#Unmounting-移除" class="headerlink" title="Unmounting(移除)"></a>Unmounting(移除)</h3><ul>
<li>componentWillUnmount：在组件从 DOM 中移除的时候立刻被调用。</li>
</ul>
<p>在该方法中执行任何必要的清理，比如无效的定时器，或者清除在 componentDidMount 中创建的 DOM 元素。</p>
<h2 id="isMounted是个反模式"><a href="#isMounted是个反模式" class="headerlink" title="isMounted是个反模式"></a>isMounted是个反模式</h2><p>isMounted通常用于避免修改一个已经被卸载的组件的状态，因为调用一个没有被装载的组件的<code>setState()</code>方法，系统会抛出异常警告。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.isMounted()) &#123; <span class="comment">//不推荐</span></div><div class="line">  <span class="keyword">this</span>.setState(&#123;...&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面做法有点反模式，<code>isMounted()</code>起到作用的时候也就是组件被卸载之后还有异步操作在进行的时候，这就意味着一个被销毁的组件还持有着一些资源的引用，这会导致系统性能降低甚至内存溢出。      </p>
<p>React 在设计的时候通过<code>setState()</code>被调用时做了一些检查，来帮助开发者发现被卸载的组件还持有一些资源的引用的情况。如何你使用了<code>isMounted()</code>，也就是跳过的React的检查，也就无法发现被卸载的组件还持有资源的问题。       </p>
<p>既然isMounted()是反模式，那么有没有可替代方案呢？<br>我们可以通过在设置一个变量来表示组件的装载和卸载的状态，当<code>componentDidMount</code>被调用时该变量为true，当<br><code>componentWillUnmount</code>被调用时，该变量为false，这样该变量就可以当<code>isMounted()</code>来使用。但还不够，到目前为止，我们只是通过变量来替代<code>isMounted()</code>，还没有做任何的优化，接下来我们需要在<code>componentWillUnmount</code>被调用时取消所有的异步回调，主动释放所有资源，这样就能避免被卸载的组件还持有资源的引用的情况，从而减少了内存溢出等情况的发生。   </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    mydatastore.subscribe(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    mydatastore.unsubscribe(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用可取消的Promise做异步操作。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cancelablePromise = makeCancelable(</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> component.setState(&#123;...&#125;&#125;))</div><div class="line">);</div><div class="line">cancelablePromise</div><div class="line">  .promise</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'resolved'</span>))</div><div class="line">  .catch(<span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'isCanceled'</span>, reason.isCanceled));</div><div class="line">cancelablePromise.cancel(); <span class="comment">// Cancel the promise</span></div></pre></td></tr></table></figure>
<p>可取消的Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> makeCancelable = <span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> hasCanceled_ = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">const</span> wrappedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span></div><div class="line">      hasCanceled_ ? reject(&#123;<span class="attr">isCanceled</span>: <span class="literal">true</span>&#125;) : resolve(val)</div><div class="line">    );</div><div class="line">    promise.catch(<span class="function">(<span class="params">error</span>) =&gt;</span></div><div class="line">      hasCanceled_ ? reject(&#123;<span class="attr">isCanceled</span>: <span class="literal">true</span>&#125;) : reject(error)</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    promise: wrappedPromise,</div><div class="line">    cancel() &#123;</div><div class="line">      hasCanceled_ = <span class="literal">true</span>;</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="external">React’s official site</a><br><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="external">React on ES6+</a></p>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React]]></title>
      <url>/2017/07/10/2017-7-10-react1/</url>
      <content type="html"><![CDATA[<h1 id="React-Native之React速学教程-上"><a href="#React-Native之React速学教程-上" class="headerlink" title="React Native之React速学教程(上)"></a>React Native之React速学教程(上)</h1><p>本文出自《React Native学习笔记》系列文章。</p>
<p></p><p style="font-size:12px;color:red;">非我原创，原创作者也不知道是谁，放在页面上方便学习</p><br>React Native是基于React的，在开发React Native过程中少不了的需要用到React方面的知识。虽然官方也有相应的Document，但篇幅比较多，学起来比较枯燥。<br>通过《React Native之React速学教程》你可以对React有更系统和更深入的认识。为了方便大家学习，我将《React Native之React速学教程》分为上、中、下三篇，大家可以根据需要进行阅读学习。  <p></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇为《React Native之React速学教程》的第一篇。本篇将从React的特点、如何使用React、JSX语法、组件(Component）以及组件的属性，状态等方面进行讲解。  </p>
<h2 id="What’s-React"><a href="#What’s-React" class="headerlink" title="What’s React"></a>What’s React</h2><p>React是一个用于组建用户界面的JavaScript库，让你以更简单的方式来创建交互式用户界面。    </p>
<ol>
<li>当数据改变时，React将高效的更新和渲染需要更新的组件。声明性视图使你的代码更可预测，更容易调试。</li>
<li>构建封装管理自己的状态的组件，然后将它们组装成复杂的用户界面。由于组件逻辑是用JavaScript编写的，而不是模板，所以你可以轻松地通过您的应用程序传递丰富的数据，并保持DOM状态。</li>
<li>一次学习随处可写，学习React，你不仅可以将它用于Web开发，也可以用于React Native来开发Android和iOS应用。  </li>
</ol>
<p>不是模板却比模板更加灵活：  </p>
<p><img src="https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/master/React%20Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B/images/Component.jpg" alt="Component">  </p>
<blockquote>
<p>心得：上图是<a href="https://github.com/crazycodeboy/GitHubPopular" target="_blank" rel="external">GitHub Popular</a>的首页截图，这个页面是通过不同的组件组装而成的，组件化的开发模式，使得代码在更大程度上的到复用，而且组件之间对的组装很灵活。  </p>
</blockquote>
<h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>使用React之前需要在页面引入如下js库 。  </p>
<ul>
<li>react.js  </li>
<li>react-dom.js  </li>
<li>browser.min.js  </li>
</ul>
<p>上面一共列举了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能，browser.min.js 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。<br>你可以从<a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">React官网</a>下载这些库，也可以将其下载到本地去使用。 </p>
<blockquote>
<p>心得：在做React Native开发时，这些库作为React Native核心库已经被初始化在node_modules目录下，所以不需要单独下载。  </p>
</blockquote>
<h3 id="使用React"><a href="#使用React" class="headerlink" title="使用React"></a>使用React</h3><p>解压从上述地址下载的压缩包，在根目录中创建一个包含以下内容的 “helloworld.html” 。  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/babel-core@5.8.38/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      ReactDOM.render(</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span></div><div class="line"><span class="undefined">        document.getElementById('example')</span></div><div class="line"><span class="undefined">      );</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 JavaScript 代码里写着 XML 格式的代码称为 JSX，下文会介绍。为了把 JSX 转成标准的 JavaScript，我们用<code>&lt;script type=&quot;text/babel&quot;&gt;</code>标签，然后通过Babel转换成在浏览器中真正执行的内容。  </p>
<h3 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h3><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div><div class="line">```  </div><div class="line">上述代码的作用是将`<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`插入到元素id为example的容器中。   </div><div class="line"></div><div class="line"></div><div class="line">## JSX  </div><div class="line">JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。</div><div class="line">每一个XML标签都会被JSX转换工具转换成纯JavaScript代码，使用JSX，组件的结构和组件之间的关系看上去更加清晰。  </div><div class="line">JSX并不是React必须使用的，但React官方建议我们使用 JSX , 因为它能定义简洁且我们熟知的包含属性的树状结构语法。 </div><div class="line">    </div><div class="line"></div><div class="line">**Usage:**  </div><div class="line">  </div><div class="line">```html </div><div class="line">React.render(//使用JSX</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    document.getElementById('example')</div><div class="line">); </div><div class="line">React.render(//不使用JSX</div><div class="line">    React.createElement('div', null,</div><div class="line">        React.createElement('div', null,</div><div class="line">            React.createElement('div', null, 'content')</div><div class="line">        )</div><div class="line">    ),</div><div class="line">    document.getElementById('example')</div><div class="line">);</div><div class="line">```   </div><div class="line"></div><div class="line">### HTML标签 与 React组件 对比</div><div class="line"></div><div class="line">React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。   </div><div class="line">要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</div><div class="line"></div><div class="line">```html </div><div class="line">var myDivElement = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"foo"</span> /&gt;</span>;</div><div class="line">React.render(myDivElement, document.body);</div></pre></td></tr></table></figure></p>
<p>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var MyComponent = React.createClass(&#123;/*...*/&#125;);</div><div class="line">var myElement = <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">someProperty</span>=<span class="string">&#123;true&#125;</span> /&gt;</span>;</div><div class="line">React.render(myElement, document.body);</div></pre></td></tr></table></figure>
<blockquote>
<p>提示：    </p>
<ul>
<li>React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。    </li>
<li>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，  React DOM 使用 className 和 htmlFor 来做对应的属性。  </li>
</ul>
</blockquote>
<h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><h4 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h4><p>要使用 JavaScript 表达式作为属性值，只需把这个表达式用一对大括号 ({}) 包起来，不要用引号 (“”)。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 输入 (JSX):</div><div class="line">var person = <span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#123;window.isLoggedIn</span> ? <span class="attr">window.name</span> <span class="attr">:</span> ''&#125; /&gt;</span>;</div><div class="line">// 输出 (JS):</div><div class="line">var person = React.createElement(</div><div class="line">  Person,</div><div class="line">  &#123;name: window.isLoggedIn ? window.name : ''&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h4 id="子节点表达式"><a href="#子节点表达式" class="headerlink" title="子节点表达式"></a>子节点表达式</h4><p>同样地，JavaScript 表达式可用于描述子结点：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 输入 (JSX):</div><div class="line">var content = <span class="tag">&lt;<span class="name">Container</span>&gt;</span>&#123;window.isLoggedIn ? <span class="tag">&lt;<span class="name">Nav</span> /&gt;</span> : <span class="tag">&lt;<span class="name">Login</span> /&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Container</span>&gt;</span>;</div><div class="line">// 输出 (JS):</div><div class="line">var content = React.createElement(</div><div class="line">  Container,</div><div class="line">  null,</div><div class="line">  window.isLoggedIn ? React.createElement(Nav) : React.createElement(Login)</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>JSX 里添加注释很容易；它们只是 JS 表达式而已。你只需要在一个标签的子节点内(非最外层)用 {} 包围要注释的部分。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class ReactDemo extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (     </div><div class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">        &#123;/*标签子节点的注释*/&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span></span></div><div class="line"><span class="tag">          //<span class="attr">textAlign</span>=<span class="string">'right'</span></span></div><div class="line"><span class="tag">          <span class="attr">textShadowColor</span>=<span class="string">'yellow'</span></span></div><div class="line"><span class="tag">          /*<span class="attr">color</span>=<span class="string">'red'</span></span></div><div class="line"><span class="tag">          <span class="attr">textShadowRadius</span>=<span class="string">'1'</span>*/</span></div><div class="line"><span class="tag">          &gt;</span></div><div class="line">          React Native!</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>心得：在标签节点以外注释，和通常的注释是一样的，多行用“/**/” 单行用“//”；</p>
</blockquote>
<h3 id="JSX延展属性"><a href="#JSX延展属性" class="headerlink" title="JSX延展属性"></a>JSX延展属性</h3><h4 id="不要试图去修改组件的属性"><a href="#不要试图去修改组件的属性" class="headerlink" title="不要试图去修改组件的属性"></a>不要试图去修改组件的属性</h4><p>不推荐做法：   </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var component = <span class="tag">&lt;<span class="name">Component</span> /&gt;</span>;</div><div class="line">component.props.foo = x; // 不推荐</div><div class="line">component.props.bar = y; // 不推荐</div></pre></td></tr></table></figure>
<p>这样修改组件的属性，会导致React不会对组件的属性类型（propTypes）进行的检查。从而引发一些预料之外的问题。</p>
<p>推荐做法：  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var component = <span class="tag">&lt;<span class="name">Component</span> <span class="attr">foo</span>=<span class="string">&#123;x&#125;</span> <span class="attr">bar</span>=<span class="string">&#123;y&#125;</span> /&gt;</span>;</div></pre></td></tr></table></figure>
<h4 id="延展属性（Spread-Attributes）"><a href="#延展属性（Spread-Attributes）" class="headerlink" title="延展属性（Spread Attributes）"></a>延展属性（Spread Attributes）</h4><p>你可以使用 JSX 的新特性 - 延展属性：  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var props = &#123;&#125;;</div><div class="line">props.foo = x;</div><div class="line">props.bar = y;</div><div class="line">var component = <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</div></pre></td></tr></table></figure>
<p>传入对象的属性会被复制到组件内。</p>
<p>它能被多次使用，也可以和其它属性一起用。注意顺序很重要，后面的会覆盖掉前面的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var props = &#123; foo: 'default' &#125;;</div><div class="line">var component = <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">foo</span>=<span class="string">&#123;</span>'<span class="attr">override</span>'&#125; /&gt;</span>;</div><div class="line">console.log(component.props.foo); // 'override'</div></pre></td></tr></table></figure>
<p>上文出现的… 标记被叫做延展操作符（spread operator）已经被 ES6 数组 支持。</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var HelloMessage = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，变量 HelloMessage 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code>时，会自动生成 HelloMessage 的一个实例。所有组件类都必须有自己的 render 方法，用于输出组件。</p>
<blockquote>
<p>注意 </p>
</blockquote>
<ul>
<li>组件类的第一个字母必须大写。</li>
<li>组件类只能包含一个顶层标签。  </li>
</ul>
<h2 id="组件的属性-props"><a href="#组件的属性-props" class="headerlink" title="组件的属性(props)"></a>组件的属性(props)</h2><p>我们可以通过<code>this.props.xx</code>的形式获取组件对象的属性，对象的属性可以任意定义，但要避免与JavaScript关键字冲突。  </p>
<h3 id="遍历对象的属性："><a href="#遍历对象的属性：" class="headerlink" title="遍历对象的属性："></a>遍历对象的属性：</h3><p><code>this.props.children</code>会返回组件对象的所有属性。<br>React 提供一个工具方法 React.Children 来处理 this.props.children 。我们可以用 <code>React.Children.map</code>或<code>React.Children.forEach</code> 来遍历子节点。<br><strong>React.Children.map</strong>  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">array React.Children.map(object children, function fn [, object thisArg])</div><div class="line">```     </div><div class="line">该方法会返回一个array。  </div><div class="line">**React.Children.forEach**    </div><div class="line"></div><div class="line">```html</div><div class="line">React.Children.forEach(object children, function fn [, object thisArg])</div><div class="line">```  </div><div class="line">**Usage：**  </div><div class="line"></div><div class="line">```html</div><div class="line">var NotesList = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">      &#123;</div><div class="line">        React.Children.map(this.props.children, function (child) &#123;</div><div class="line">          return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a><a href="https://facebook.github.io/react/docs/top-level-api.html#react.proptypes" target="_blank" rel="external">PropTypes</a></h3><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。<br>组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var MyTitle = React.createClass(&#123;</div><div class="line">  propTypes: &#123;</div><div class="line">    title: React.PropTypes.string.isRequired,</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">     return <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的Mytitle组件有一个title属性。PropTypes 告诉 React，这个 title 属性是必须的，而且它的值必须是字符串。现在，我们设置 title 属性的值是一个数值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var data = 123;</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">MyTitle</span> <span class="attr">title</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>,</div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p>这样一来，title属性就通不过验证了。控制台会显示一行错误信息。</p>
<figure class="highlight plain"><figcaption><span>Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.```  </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">更多的PropTypes设置，可以查看[官方文档](https://facebook.github.io/react/docs/reusable-components.html)。  </div><div class="line">此外，getDefaultProps 方法可以用来设置组件属性的默认值。</div><div class="line"></div><div class="line">```html</div><div class="line">var MyTitle = React.createClass(&#123;</div><div class="line">  getDefaultProps : function () &#123;</div><div class="line">    return &#123;</div><div class="line">      title : &apos;Hello World&apos;</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyTitle /&gt;,</div><div class="line">  document.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码会输出<code>&quot;Hello World&quot;</code>。   </p>
<h2 id="ref-属性-获取真实的DOM节点"><a href="#ref-属性-获取真实的DOM节点" class="headerlink" title="ref 属性(获取真实的DOM节点)"></a>ref 属性(获取真实的DOM节点)</h2><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。</p>
<p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性。  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var MyComponent = React.createClass(&#123;</div><div class="line">  handleClick: function() &#123;</div><div class="line">    this.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"myTextInput"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Focus the text input"</span> 		  <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码中，组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点。<br>需要注意的是，由于 this.refs.[refName] 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会读取 this.refs.[refName] 属性。<br>React 组件支持很多事件，除了 Click 事件以外，还有 KeyDown 、Copy、Scroll 等，完整的事件清单请查看<a href="https://facebook.github.io/react/docs/events.html#supported-events" target="_blank" rel="external">官方文档</a>。</p>
<blockquote>
<p>心得：ref属性在开发中使用频率很高，使用它你可以获取到任何你想要获取的组件的对象，有个这个对象你就可以灵活地做很多事情，比如：读写对象的变量，甚至调用对象的函数。  </p>
</blockquote>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>上文讲到了props，因为每个组件只会根据props 渲染了自己一次，props 是不可变的。为了实现交互，可以使用组件的 state 。this.state 是组件私有的，可以通过<code>getInitialState()</code>方法初始化，通过调用 <code>this.setState()</code> 来改变它。当 state 更新之后，组件就会重新渲染自己。<br>render() 方法依赖于 this.props 和 this.state ，框架会确保渲染出来的 UI 界面总是与输入（ this.props 和 this.state ）保持一致。</p>
<h3 id="初始化state"><a href="#初始化state" class="headerlink" title="初始化state"></a>初始化state</h3><p>通过<code>getInitialState()</code>方法初始化state，在组件的生命周期中仅执行一次，用于设置组件的初始化 state 。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getInitialState:function()&#123;</div><div class="line">   return &#123;favorite:false&#125;;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="更新-state"><a href="#更新-state" class="headerlink" title="更新 state"></a>更新 state</h3><p>通过<code>this.setState()</code>方法来更新state，调用该方法后，React会重新渲染相关的UI。<br><code>this.setState({favorite:!this.state.favorite});</code></p>
<p><strong>Usage:</strong>  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var FavoriteButton=React.createClass(&#123;</div><div class="line">  getInitialState:function()&#123;</div><div class="line">    return &#123;favorite:false&#125;;</div><div class="line">  &#125;,</div><div class="line">  handleClick:function(event)&#123;</div><div class="line">    this.setState(&#123;favorite:!this.state.favorite&#125;);</div><div class="line">  &#125;,</div><div class="line">  render:function()&#123;</div><div class="line">    var text=this.state.favorite? 'favorite':'un favorite';</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></div><div class="line">        You &#123;text&#125; this. Click to toggle.</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码是一个 FavoriteButton 组件，它的 getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。  </p>
<blockquote>
<p>心得：由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="external">React’s official site</a><br><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="external">React on ES6+</a></p>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React]]></title>
      <url>/2017/07/10/2017-7-10-react3/</url>
      <content type="html"><![CDATA[<h1 id="React-Native之React速学教程-下"><a href="#React-Native之React速学教程-下" class="headerlink" title="React Native之React速学教程(下)"></a>React Native之React速学教程(下)</h1><p>本文出自《React Native学习笔记》系列文章。</p>
<p style="font-size:12px;color:red;">非我原创，原创作者也不知道是谁，放在页面上方便学习</p>

<p>React Native是基于React的，在开发React Native过程中少不了的需要用到React方面的知识。虽然官方也有相应的Document，但篇幅比较多，学起来比较枯燥。<br>通过《React Native之React速学教程》你可以对React有更系统和更深入的认识。为了方便大家学习，我将《React Native之React速学教程》分为上、中、下三篇，大家可以根据需要进行阅读学习。  </p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇为《React Native之React速学教程》的最后一篇。本篇将带着大家一起认识ES6，学习在开发中常用的一些ES6的新特性，以及ES6与ES5的区别，解决大家在学习React /React Native过程中对于ES6与ES5的一些困惑。  </p>
<h2 id="ES6的特性"><a href="#ES6的特性" class="headerlink" title="ES6的特性"></a>ES6的特性</h2><h3 id="何为ES6？"><a href="#何为ES6？" class="headerlink" title="何为ES6？"></a>何为ES6？</h3><p>ES6全称ECMAScript 6.0，ES6于2015年6月17日发布，ECMAScript是ECMA制定的标准化脚本语言。目前JavaScript使用的ECMAScript版本为ECMAScript-262。  </p>
<p>下面我为大家列举了ES6新特性中对我们开发影响比较大的六方面的特性。  </p>
<h3 id="1-类（class）"><a href="#1-类（class）" class="headerlink" title="1.类（class）"></a>1.类（class）</h3><p>对熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6 引入了class（类），让JavaScript的面向对象编程变得更加简单和易于理解。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">   <span class="comment">// 构造方法，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.</span></div><div class="line">   <span class="keyword">constructor</span>(name,color) &#123;</div><div class="line">     <span class="keyword">this</span>.name = name;</div><div class="line">     <span class="keyword">this</span>.color = color;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// toString 是原型对象上的属性</span></div><div class="line">   toString() &#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'name:'</span> + <span class="keyword">this</span>.name + <span class="string">',color:'</span> + <span class="keyword">this</span>.color);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">'dog'</span>,<span class="string">'white'</span>);<span class="comment">//实例化Animal</span></div><div class="line">animal.toString();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"> <span class="keyword">constructor</span>(action) &#123;</div><div class="line">   <span class="comment">// 子类必须要在constructor中指定super 方法，否则在新建实例的时候会报错.</span></div><div class="line">   <span class="comment">// 如果没有置顶consructor,默认带super方法的constructor将会被添加、</span></div><div class="line">   <span class="keyword">super</span>(<span class="string">'cat'</span>,<span class="string">'white'</span>);</div><div class="line">   <span class="keyword">this</span>.action = action;</div><div class="line"> &#125;</div><div class="line"> toString() &#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">super</span>.toString());</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'catch'</span>)</div><div class="line">cat.toString();</div><div class="line"></div><div class="line"><span class="comment">// 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。</span></div><div class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="2-模块-Module"><a href="#2-模块-Module" class="headerlink" title="2.模块(Module)"></a>2.模块(Module)</h3><p>ES5不支持原生的模块化，在ES6中，模块将作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。   </p>
<h4 id="导出-export"><a href="#导出-export" class="headerlink" title="导出(export)"></a>导出(export)</h4><p>ES6允许在一个模块中使用export来导出多个变量或方法。  </p>
<p><strong>导出变量</strong>   </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'Rainbow'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>心得：ES6不仅支持变量的导出，也支持常量的导出。 <code>export const sqrt = Math.sqrt;//导出常量</code> </p>
</blockquote>
<p>ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Rainbow'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="string">'24'</span>;</div><div class="line"><span class="keyword">export</span> &#123;name, age&#125;;</div></pre></td></tr></table></figure>
<p><strong>导出函数</strong> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// myModule.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params">someArg</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> someArg;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="导入-import"><a href="#导入-import" class="headerlink" title="导入(import)"></a>导入(import)</h4><p>定义好模块的输出以后就可以在另外一个模块通过import引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;myModule&#125; <span class="keyword">from</span> <span class="string">'myModule'</span>;<span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">'test'</span>;<span class="comment">// test.js</span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string">  </span></div><div class="line"><span class="string">&gt;心得:一条import 语句可以同时导入默认方法和其它变量。`</span><span class="keyword">import</span> defaultMethod, &#123; otherMethod &#125; <span class="keyword">from</span> <span class="string">'xxx.js'</span>;<span class="string">`</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">### 3.箭头（Arrow）函数</span></div><div class="line"><span class="string">这是ES6中最令人激动的特性之一。`</span>=&gt;<span class="string">`不只是关键字function的简写，它还带来了其它好处。箭头函数与包围它的代码共享同一个`</span><span class="keyword">this</span><span class="string">`,能帮你很好的解决this的指向问题。有经验的JavaScript开发者都熟悉诸如`</span><span class="keyword">var</span> self = <span class="keyword">this</span>;<span class="string">`或`</span><span class="keyword">var</span> that = <span class="keyword">this</span><span class="string">`这种引用外围this的模式。但借助`</span>=&gt;<span class="string">`，就不需要这种模式了。   </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">### 箭头函数的结构  </span></div><div class="line"><span class="string">箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>javascript</div><div class="line"><span class="comment">// 箭头函数的例子</span></div><div class="line">()=&gt;<span class="number">1</span></div><div class="line">v=&gt;v+<span class="number">1</span></div><div class="line">(a,b)=&gt;a+b</div><div class="line">()=&gt;&#123;</div><div class="line">    alert(<span class="string">"foo"</span>);</div><div class="line">&#125;</div><div class="line">e=&gt;&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1000</span>/e;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>心得：不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。  </p>
</blockquote>
<h4 id="卸载监听器时的陷阱"><a href="#卸载监听器时的陷阱" class="headerlink" title="卸载监听器时的陷阱"></a>卸载监听器时的陷阱</h4><blockquote>
<p><strong>错误的做法</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    onAppPaused(event)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>正确的做法</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>._onAppPaused = <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    onAppPaused(event)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除上述的做法外，我们还可以这样做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused);</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused);</div><div class="line">    &#125;</div><div class="line">    onAppPaused = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">//把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是：不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。</p>
</blockquote>
<h3 id="4-ES6不再支持Mixins"><a href="#4-ES6不再支持Mixins" class="headerlink" title="4.ES6不再支持Mixins"></a>4.ES6不再支持Mixins</h3><p>在ES5下，我们经常使用mixin来为组件添加一些新的方法，如： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SetIntervalMixin = &#123;</div><div class="line">  componentWillMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.intervals = [];</div><div class="line">  &#125;,</div><div class="line">  setInterval: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.intervals.push(setInterval.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>));</div><div class="line">  &#125;,</div><div class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.intervals.forEach(clearInterval);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> TickTock = React.createClass(&#123;</div><div class="line">  mixins: [SetIntervalMixin], <span class="comment">// Use the mixin</span></div><div class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">seconds</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>但，很不幸的是，ES6不支持使用Mixins了，不过我们可以使用，增强组件来替代Mixins。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Enhance.js</span></div><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">"React"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> Enhance = <span class="function"><span class="params">ComposedComponent</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">data</span>: <span class="literal">null</span> &#125;;</div><div class="line">    &#125;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">data</span>: <span class="string">'Hello'</span> &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ComposedComponent</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span> /&gt;</span>;</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">&#125;;</span></div><div class="line"><span class="xml">//HigherOrderComponent.js</span></div><div class="line"><span class="xml">import &#123; Enhance &#125; from "./Enhance";</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">class MyComponent &#123;</span></div><div class="line"><span class="xml">    render() &#123;</span></div><div class="line"><span class="xml">        if (!this.data) return <span class="tag">&lt;<span class="name">div</span>&gt;</span>Waiting...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></div><div class="line"><span class="xml">        return <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">export default Enhance(MyComponent); // Enhanced component</span></div></pre></td></tr></table></figure>
<p>用一个“增强组件”，来为某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。</p>
<p>另外，网上也有很多其他的方案，如<a href="https://github.com/brigand/react-mixin" target="_blank" rel="external">react-mixin</a>。</p>
<h3 id="5-ES6不再有自动绑定"><a href="#5-ES6不再有自动绑定" class="headerlink" title="5.ES6不再有自动绑定"></a>5.ES6不再有自动绑定</h3><p>在ES5中，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但在ES6中没有了自动绑定，也就是说，你需要通过bind或者箭头函数来手动绑定this引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过使用 bind() 来绑定`this`</span></div><div class="line">&lt;div onClick=&#123;<span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>)&#125;&gt;</div><div class="line"><span class="comment">// 也可通过使用箭头函数来实现</span></div><div class="line">&lt;div onClick=&#123;() =&gt; <span class="keyword">this</span>.tick()&#125;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>心得： 因为无论是箭头函数还是bind()每次被执行都返回的是一个新的函数引用，所以，推荐大家在组件的构造函数中来绑定<code>this</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: props.initialCount&#125;;</div><div class="line">  <span class="keyword">this</span>.tick = <span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>);<span class="comment">//在构造函数中绑定`this`</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line">&lt;div onClick=&#123;<span class="keyword">this</span>.tick&#125;&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="6-static关键字"><a href="#6-static关键字" class="headerlink" title="6.static关键字"></a>6.static关键字</h3><p>在ES6中我们可以通过static关键字来定义一个类函数。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123; <span class="comment">//构造函数</span></div><div class="line">          <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    sayName() &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> formatName(name) <span class="comment">//将formatName定义为类方法</span></div><div class="line">        <span class="keyword">return</span> name[<span class="number">0</span>].toUpperCase() + name.sustr(<span class="number">1</span>).toLowerCase();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(People.formatName(<span class="string">"tom"</span>)); <span class="comment">//使用类方法formatName</span></div></pre></td></tr></table></figure>
<h2 id="ES6-VS-ES5（ES6与ES5的区别）"><a href="#ES6-VS-ES5（ES6与ES5的区别）" class="headerlink" title="ES6 VS ES5（ES6与ES5的区别）"></a>ES6 VS ES5（ES6与ES5的区别）</h2><p>新版本的React /React Native使用了ES6标准，下面就让我们一起了解一下基于ES6的React/React Native相比ES5有哪些不同。  </p>
<blockquote>
<p>心得：很多React/React Native的初学者经常会被ES6问题迷惑：官方建议我们ES6，但是网上搜到的很多教程和例子都是基于ES5版本的，所以很多人感觉无法下手，下面就让我们一起认识ES6与ES5在React/React Native开发上有哪些不同和需要注意的地方。</p>
</blockquote>
<p>下面是我们需要知道的ES6与ES5在4大方面上的区别。</p>
<h3 id="1-在定义方面的不同"><a href="#1-在定义方面的不同" class="headerlink" title="1.在定义方面的不同"></a>1.在定义方面的不同</h3><p>在定义组件，方法，属性等方面，ES6与ES5是有所不同的，下面就让我们一起看一下有哪些不同。    </p>
<blockquote>
<p>心得：因为向下兼容的原因，你在开发过程中可使用ES6也可以使用ES5的规范，但为了代码的风格一致性，建议尽量减少混写。  </p>
</blockquote>
<h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><blockquote>
<p><strong>ES5</strong>  </p>
</blockquote>
<p>在ES5里，通常通过React.createClass来定义一个组件类，像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ES6</strong>  </p>
</blockquote>
<p>在ES6里，我们通过继承React.Component 来定义一个组件类，像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><p>相比ES5，ES6在方法定义上语法更加简洁，从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。</p>
<blockquote>
<p><strong>ES5</strong>  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</div><div class="line">    test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ES6</strong>  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    test() &#123;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="定义组件的属性类型和默认属性"><a href="#定义组件的属性类型和默认属性" class="headerlink" title="定义组件的属性类型和默认属性"></a>定义组件的属性类型和默认属性</h4><blockquote>
<p><strong>ES5</strong>  </p>
</blockquote>
<p>在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</div><div class="line">    getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            autoPlay: <span class="literal">false</span>,</div><div class="line">            maxLoops: <span class="number">10</span>,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    propTypes: &#123;</div><div class="line">        autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">        maxLoops: React.PropTypes.number.isRequired,</div><div class="line">        posterFrameSrc: React.PropTypes.string.isRequired,</div><div class="line">        videoSrc: React.PropTypes.string.isRequired,</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ES6</strong>  </p>
</blockquote>
<p>在ES6里，可以统一使用static成员来实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">        autoPlay: <span class="literal">false</span>,</div><div class="line">        maxLoops: <span class="number">10</span>,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    <span class="keyword">static</span> propTypes = &#123;</div><div class="line">        autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">        maxLoops: React.PropTypes.number.isRequired,</div><div class="line">        posterFrameSrc: React.PropTypes.string.isRequired,</div><div class="line">        videoSrc: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125; <span class="comment">// 注意这里既没有分号也没有逗号</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Video.defaultProps = &#123;</div><div class="line">    autoPlay: <span class="literal">false</span>,</div><div class="line">    maxLoops: <span class="number">10</span>,</div><div class="line">&#125;;</div><div class="line">Video.propTypes = &#123;</div><div class="line">    autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">    maxLoops: React.PropTypes.number.isRequired,</div><div class="line">    posterFrameSrc: React.PropTypes.string.isRequired,</div><div class="line">    videoSrc: React.PropTypes.string.isRequired,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>心得:对React开发者而言，static在一些老版本的浏览器上是不支持的。React Native开发者可以不用担心这个问题。</p>
</blockquote>
<h3 id="2-在导入-import-与导出-export-组件上的不同"><a href="#2-在导入-import-与导出-export-组件上的不同" class="headerlink" title="2.在导入(import)与导出(export)组件上的不同"></a>2.在导入(import)与导出(export)组件上的不同</h3><h4 id="导入组件"><a href="#导入组件" class="headerlink" title="导入组件"></a>导入组件</h4><blockquote>
<p><strong>ES5</strong>  </p>
</blockquote>
<p>在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">"react"</span>);</div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    Component,</div><div class="line">    PropTypes</div><div class="line">&#125; = React;  <span class="comment">//引用React抽象组件</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ReactNative = <span class="built_in">require</span>(<span class="string">"react-native"</span>);</div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    Image,</div><div class="line">    Text,</div><div class="line">&#125; = ReactNative;  <span class="comment">//引用具体的React Native组件</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AboutPage=<span class="built_in">require</span>(<span class="string">'./app/AboutPage'</span>) <span class="comment">//引入app目录下AboutPage组件，即AboutPag.js</span></div><div class="line"><span class="keyword">var</span> PopularPage=<span class="built_in">require</span>(<span class="string">'./app/PopularPage'</span>) <span class="comment">//引入app目录下PopularPage组件，即PopularPage.js</span></div><div class="line"><span class="keyword">var</span> FavoritePage=<span class="built_in">require</span>(<span class="string">'./app/FavoritePage'</span>) <span class="comment">//引入app目录下FavoritePage组件，即FavoritePage.js</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ES6</strong>  </p>
</blockquote>
<p>在ES6里，没有了require，而是使用import来导入组件，有点像Java的写法。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; </div><div class="line">    Component,</div><div class="line">    PropTypes,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span>;<span class="comment">//引用React抽象组件</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Image,</div><div class="line">    Text</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span> <span class="comment">//引用具体的React Native组件</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> AboutPage <span class="keyword">from</span> <span class="string">'./app/AboutPage'</span> <span class="comment">//引入app目录下AboutPage组件，即AboutPag.js</span></div><div class="line"><span class="keyword">import</span> PopularPage <span class="keyword">from</span> <span class="string">'./app/PopularPage'</span> <span class="comment">//引入app目录下PopularPage组件，即PopularPage.js</span></div><div class="line"><span class="keyword">import</span> FavoritePage  <span class="keyword">from</span> <span class="string">'./app/FavoritePage'</span> <span class="comment">//引入app目录下FavoritePage组件，即FavoritePage.js</span></div></pre></td></tr></table></figure>
<p>另外，ES6支持将组件导入作为一个对象，使用“ * as”修饰即可。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入app目录下AboutPage组件作为一个对象，接下来就可使用“AboutPage.”来调用AboutPage的方法及属性了。  </span></div><div class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> AboutPage <span class="keyword">from</span> <span class="string">'./app/AboutPage'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>心得：使用“ <em> as ”修饰后，导入的组件直接被实例化成一个对象，可以使用“.”语法来调用组件的方法和属性，和没有“ </em> as ”修饰是有本质区别的，使用的时候要特别注意。  </p>
</blockquote>
<h4 id="导出组件"><a href="#导出组件" class="headerlink" title="导出组件"></a>导出组件</h4><blockquote>
<p><strong>ES5</strong><br>在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">    ...</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = MyComponent;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ES6</strong><br>在ES6里，通常用export default来实现相同的功能：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-在初始化state上的不同"><a href="#3-在初始化state上的不同" class="headerlink" title="3.在初始化state上的不同"></a>3.在初始化state上的不同</h3><blockquote>
<p><strong>ES5</strong>  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</div><div class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ES6</strong><br>ES6下，有两种写法：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    state = &#123;</div><div class="line">        loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-在方法作为回调上的不同"><a href="#4-在方法作为回调上的不同" class="headerlink" title="4.在方法作为回调上的不同"></a>4.在方法作为回调上的不同</h3><p>在开发工作中，经常会使用到回调，如按钮的单击回调等，这也是在很多编程语言中都会经常出现的情况。ES6与ES5在使用回调方面是有区别的。   </p>
<blockquote>
<p><strong>ES5</strong>  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PostInfo = React.createClass(&#123;</div><div class="line">    handleOptionsButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="comment">// Here, 'this' refers to the component instance.</span></div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;TouchableHighlight onPress=&#123;<span class="keyword">this</span>.handleOptionsButtonClick&#125;&gt;</div><div class="line">                &lt;Text&gt;&#123;<span class="keyword">this</span>.props.label&#125;&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>TouchableHighlight&gt;</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在ES5中，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。</p>
<p>在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）：  </p>
<blockquote>
<p><strong>ES6</strong>  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    handleOptionsButtonClick(e)&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;TouchableHighlight </div><div class="line">                onPress=&#123;<span class="keyword">this</span>.handleOptionsButtonClick.bind(<span class="keyword">this</span>)&#125;</div><div class="line">                <span class="comment">//onPress=&#123;e=&gt;this.handleOptionsButtonClick(e)&#125;//这种方式和上面的效果是一样的</span></div><div class="line">                &gt;</div><div class="line">                &lt;Text&gt;&#123;<span class="keyword">this</span>.props.label&#125;&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>TouchableHighlight&gt;</div><div class="line">        )</div><div class="line">    &#125;,·</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="external">React’s official site</a><br><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="external">React on ES6+</a></p>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSON]]></title>
      <url>/2017/07/05/2017-7-05-JSON/</url>
      <content type="html"><![CDATA[<h2 id="JSON的两种方法小记"><a href="#JSON的两种方法小记" class="headerlink" title="JSON的两种方法小记"></a>JSON的两种方法小记</h2><h3 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h3><p>JSON的全称是：JavaScript Object Notation，意思是JavaScript对象表示法，是一种轻量级的数据交换格式。JSON的语法是JavaScript语法的子集，与js中对象和数组的语法十分相近。</p>
<p>JSON是一种数据序列化格式，基于JavaScript的直接量，可以表示null、Boolean、Number、String、array以及Object对象。</p>
<p>JSON里不可以表示undefined、NaN与Infinity、函数、日期以及正则。</p>
<p>在JSON中，有两种结构：数组与对象</p>
<blockquote>
<p>JSON中没有变量的概念，因为JSON不是JavaScript语句，所以末尾不需要加分号。且对象属性必须加双引号，不能是单引号。</p>
</blockquote>
<h2 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h2><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON.parse(s,func):解析json格式中的字符串，返回该字符串表示的JavaScript值。s:需要解析的字符串；func:用来转换解析值的可选函数。返回值：一个对象、数组或者原始值。</p>
<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p>JSON.stringify(o,func,indet):序列化对象、数组或者原始值。o:需要转换成JSON字符串的对象、数组或者原始值；func:对字符串化前对值做一些替换；indet：指定字符串缩进字符的空格个数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JSON对象</span></div><div class="line"><span class="keyword">var</span> JSON_obj = &#123;<span class="string">"name"</span>:<span class="string">"zlstory"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"sfydx"</span>:<span class="string">"yes"</span>&#125;; <span class="comment">//object</span></div><div class="line"></div><div class="line"><span class="comment">//JSON数组</span></div><div class="line"><span class="keyword">var</span> JSON_arr = [&#123;<span class="string">"name"</span>:<span class="string">"Crystal"</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"Sinsle"</span>&#125;]; <span class="comment">//array</span></div><div class="line"></div><div class="line"><span class="comment">//JSON字符串</span></div><div class="line"><span class="keyword">var</span> JSON_str = <span class="string">'&#123;"name":"zlstory","age":"23","sfydx":"yes"&#125;'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(JSON_str)); <span class="comment">//转换成JSON_obj</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(JSON_obj)); <span class="comment">//由object转换成string类型</span></div><div class="line"><span class="comment">//&#123;"name":"zlstory","age":"23","sfydx":"yes"&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(JSON_arr));  <span class="comment">//由array转换成string类型</span></div><div class="line"><span class="comment">//[&#123;"name":"Crystal"&#125;,&#123;"name":"Sinsle"&#125;]</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">o = &#123;<span class="string">"info"</span>:[&#123;</div><div class="line">        <span class="string">"t"</span>: <span class="string">"兰蔻根源补养气色水凝乳液15ml*2"</span>,</div><div class="line">        <span class="string">"pcp"</span>: <span class="string">"48"</span>,</div><div class="line">        <span class="string">"img"</span>: <span class="string">"img/pic0.jpg"</span>,</div><div class="line">        <span class="string">"sid"</span>: <span class="string">"1"</span></div><div class="line">    &#125;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="built_in">JSON</span>.stringify(o);  <span class="comment">//转换成字符串</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="comment">//&#123;"info":[&#123;"t":"兰蔻根源补养气色水凝乳液15ml*2","pcp":"48","img":"img/pic0.jpg","sid":"1"&#125;]&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">JSON</span>.parse(a);  <span class="comment">//还原成对象</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="comment">//&#123;"info":[&#123;</span></div><div class="line"><span class="comment">//       "t": "兰蔻根源补养气色水凝乳液15ml*2",</span></div><div class="line"><span class="comment">//        "pcp": "48",</span></div><div class="line"><span class="comment">//        "img": "img/pic0.jpg",</span></div><div class="line"><span class="comment">//        "sid": "1"</span></div><div class="line"><span class="comment">//    &#125;]</span></div><div class="line"><span class="comment">//&#125;;</span></div></pre></td></tr></table></figure>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">我很忙，但一直对你有空</p><p></p>
]]></content>
      
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用代码片段]]></title>
      <url>/2017/07/03/2017-7-03-javascript%20demo/</url>
      <content type="html"><![CDATA[<h2 id="常用js代码片段整理"><a href="#常用js代码片段整理" class="headerlink" title="常用js代码片段整理"></a>常用js代码片段整理</h2><p>收集了一些在项目中遇见的一些实用代码片段，以便加快开发速度，提高工作效率。将持续更新</p>
<h3 id="全选操作"><a href="#全选操作" class="headerlink" title="全选操作"></a>全选操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAll</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> selectall = documnent.getElementById(<span class="string">"selectall"</span>);</div><div class="line">    <span class="keyword">var</span> allbox = <span class="built_in">document</span>.getElementsByName(<span class="string">"allbox"</span>);</div><div class="line">    <span class="keyword">if</span>(selectall.checked)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++)&#123;</div><div class="line">            allbox[i].checked = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++)&#123;</div><div class="line">            allbox[i].checked = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="tab效果"><a href="#tab效果" class="headerlink" title="tab效果"></a>tab效果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Change</span>(<span class="params">btn, active, div</span>) </span>&#123;</div><div class="line">    $(btn).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).addClass(active).siblings(<span class="string">'li'</span>).removeClass(active);</div><div class="line">        $(div).eq($(<span class="keyword">this</span>).index()).css(<span class="string">'display'</span>, <span class="string">'block'</span>).siblings().css(<span class="string">'display'</span>, <span class="string">'none'</span>)</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="禁止页面右键菜单"><a href="#禁止页面右键菜单" class="headerlink" title="禁止页面右键菜单"></a>禁止页面右键菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(docunment).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="新窗口打开页面"><a href="#新窗口打开页面" class="headerlink" title="新窗口打开页面"></a>新窗口打开页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"a[href^='http://']"</span>).attr(<span class="string">"target"</span>,<span class="string">"_blank"</span>);</div><div class="line"></div><div class="line">    $(<span class="string">"a[rel $= 'extrenal']"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = <span class="string">"_blank"</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.scrollTo = <span class="function"><span class="keyword">function</span> (<span class="params">speed</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> targetOffset = $(<span class="keyword">this</span>).offset().top;</div><div class="line">    $(<span class="string">'html body'</span>).stop().animate(&#123;<span class="attr">scrollTop</span>:targetOffset&#125;,speed);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//use</span></div><div class="line">$(<span class="string">"goToHeader"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"body"</span>).scrollTo(<span class="number">500</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="获取鼠标位置"><a href="#获取鼠标位置" class="headerlink" title="获取鼠标位置"></a>获取鼠标位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(docunment).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">        $(<span class="string">"div"</span>).html(<span class="string">"X："</span>+e.pageX + <span class="string">"| Y"</span> + e.pageY);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="判断div在屏幕中央"><a href="#判断div在屏幕中央" class="headerlink" title="判断div在屏幕中央"></a>判断div在屏幕中央</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jQuery.fn.center = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.css(<span class="string">"position"</span>,<span class="string">"absolute"</span>);</div><div class="line">    <span class="keyword">this</span>.css(<span class="string">"top"</span>,($(<span class="built_in">window</span>).height() - <span class="keyword">this</span>.height()) / <span class="number">2</span>+$(<span class="built_in">window</span>).scrollTop()+<span class="string">"px"</span>);</div><div class="line">    <span class="keyword">this</span>.css(<span class="string">"left"</span>,($(<span class="built_in">window</span>).width() - <span class="keyword">this</span>.width()) / <span class="number">2</span>+$(<span class="built_in">window</span>).scrollLeft()+<span class="string">"px"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//use</span></div><div class="line">$(<span class="string">"div"</span>).center();</div></pre></td></tr></table></figure>
<h3 id="关闭所有动画"><a href="#关闭所有动画" class="headerlink" title="关闭所有动画"></a>关闭所有动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    jQuery.fx.off = <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="设置全局ajax参数"><a href="#设置全局ajax参数" class="headerlink" title="设置全局ajax参数"></a>设置全局ajax参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#load"</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    showLoading();  <span class="comment">// 显示loading</span></div><div class="line">    disableBUttons();   <span class="comment">// 禁用按钮</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">"#load"</span>).ajaxComplete(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    hideLoading();  </div><div class="line">    enableBUttons();   </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="获取选中的下拉框"><a href="#获取选中的下拉框" class="headerlink" title="获取选中的下拉框"></a>获取选中的下拉框</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#ele"</span>).find(<span class="string">"option:selected"</span>);</div><div class="line"></div><div class="line">$(<span class="string">"#ele option:selected"</span>);</div></pre></td></tr></table></figure>
<h3 id="综合动画"><a href="#综合动画" class="headerlink" title="综合动画"></a>综合动画</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">".myImg"</span>).css(<span class="string">"opacity"</span>,<span class="string">"0.5"</span>);</div><div class="line">    $(<span class="string">".myInmg"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"400px"</span>,<span class="attr">height</span>:<span class="string">"200px"</span>,<span class="attr">opacity</span>:<span class="string">"1"</span>&#125;,<span class="number">3000</span>)</div><div class="line">                .animate(&#123;<span class="attr">top</span>:<span class="string">"200px"</span>,<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>)</div><div class="line">                .fadeOut(<span class="string">"slow"</span>);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="给页面中的每个p标签加事件"><a href="#给页面中的每个p标签加事件" class="headerlink" title="给页面中的每个p标签加事件"></a>给页面中的每个p标签加事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</div><div class="line">    items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="判断复选框是否选中"><a href="#判断复选框是否选中" class="headerlink" title="判断复选框是否选中"></a>判断复选框是否选中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $checkbox = $(<span class="string">"#checkbox"</span>);</div><div class="line">    $checkbox.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>($checkbox.is(<span class="string">":checked"</span>))&#123;</div><div class="line">            alert(<span class="string">"已选中"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//添加cookie</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key, value, day</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">      date.setDate(date.getDate() + day);</div><div class="line">      <span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + <span class="built_in">encodeURI</span>(value) + <span class="string">';expires='</span> + date;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//获取cookie</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(<span class="built_in">document</span>.cookie);</div><div class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">'; '</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> arr1 = arr[i].split(<span class="string">'='</span>);</div><div class="line">          <span class="keyword">if</span> (key == arr1[<span class="number">0</span>]) &#123;</div><div class="line">              <span class="keyword">return</span> arr1[<span class="number">1</span>];</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"><span class="comment">//删除cookie</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">	addCookie(key, value, <span class="number">-1</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="返回顶部-1"><a href="#返回顶部-1" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">backToTop</span>(<span class="params">btnId</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</div><div class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</div><div class="line">    <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</div><div class="line">    <span class="built_in">window</span>.onscroll = set;</div><div class="line">    btn.style.display = <span class="string">"none"</span>;</div><div class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        btn.style.display = <span class="string">"none"</span>;</div><div class="line">        <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop+b.scrollTop)*<span class="number">0.1</span>);</div><div class="line">            b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop+b.scrollTop)*<span class="number">0.1</span>);</div><div class="line">            <span class="keyword">if</span>((d.scrollTop+b.scrollTop) == <span class="number">0</span>)&#123;</div><div class="line">                clearInterval(btn.timer,<span class="built_in">window</span>.onscroll = set);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">10</span>);</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        btn.style.display = (d.scrollTop+b.scrollTop&gt;<span class="number">100</span>)?<span class="string">"block"</span>:<span class="string">"none"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//use</span></div><div class="line">backToTop(<span class="string">'goTop'</span>);</div></pre></td></tr></table></figure>
<h3 id="获取复选框的值"><a href="#获取复选框的值" class="headerlink" title="获取复选框的值"></a>获取复选框的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_value</span>(<span class="params">field</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(field$$field.length)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(field[i].checked &amp;&amp; !field[i].disable)&#123;</div><div class="line">                <span class="keyword">return</span> field[i].value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="窗体改变事件"><a href="#窗体改变事件" class="headerlink" title="窗体改变事件"></a>窗体改变事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement ? <span class="built_in">document</span>.documentElement.clientWidth : documnent.body.clientWidth,</div><div class="line">            r = <span class="number">1255</span>,</div><div class="line">            b = Element.extend(<span class="built_in">document</span>.body),</div><div class="line">            classname = b.className;</div><div class="line">        <span class="keyword">if</span>(w &lt; r)&#123;</div><div class="line">            <span class="comment">//当窗体的宽度小于1255的时候执行相应操作</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//当窗体的宽度大于1255的时候执行相应操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            fn();</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'onresize'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            fn();</div><div class="line">        &#125;) </div><div class="line">    &#125;</div><div class="line">    fn();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">相遇的那一刻，就有了即将要分离的预感</p><p></p>
]]></content>
      
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> javaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[selector]]></title>
      <url>/2017/06/29/2017-6-29-selector/</url>
      <content type="html"><![CDATA[<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><p>在css中，选择器是一种模式，用来实现对html页面中的元素实现一对一，一对多或者多对一的控制。</p>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>1.通用选择器  *</p>
<p>2.class选择器</p>
<p>3.id选择器</p>
<p>4.标签选择器</p>
<h3 id="多元素组合选择器"><a href="#多元素组合选择器" class="headerlink" title="多元素组合选择器"></a>多元素组合选择器</h3><p>1.E,F 多元素选择器，同时选择两个元素 中间用逗号隔开</p>
<p>2.E F 后代元素选择器，用空格隔开</p>
<p>3.E&gt;F 子元素选择器</p>
<p>4.E+F 毗邻元素选择器</p>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>1.E[attr] 匹配所有具有attr属性的元素</p>
<p>2.E[att=val] 匹配所有具有attr属性等于val的元素</p>
<p>3.E[att~=val] 匹配所有具有attr属性中含有val的元素</p>
<p>4.E[att|=val] 匹配所有具有attr属性具有多个连字号分隔的值、其中有一个值以为val开头的元素，主要用于lang属性</p>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>1.E:first-child 父元素的第一个子元素</p>
<p>2.E:link 所有未被点击的连接</p>
<p>3.E:visited 所有已被点击的连接</p>
<p>4.E:lactive 正在点击的连接</p>
<p>5.E:hover 鼠标悬停的元素</p>
<p>6.E:focus 获得当前焦点的元素</p>
<p>7.E:enable 匹配表单中激活的元素</p>
<p>8.E:disabled 匹配表单中被禁用的元素</p>
<p>9.E:checked 匹配单选框复选框选中的元素</p>
<p>10.E:selection 匹配当前选中的元素</p>
<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>1.E:first-line  匹配元素的第一行</p>
<p>2.E:first-letter 匹配元素的第一个字母</p>
<p>3.E:before 在元素之前插入生成的内容</p>
<p>4.E:after 在元素插入之后生成的内容</p>
<h3 id="同级元素选择器"><a href="#同级元素选择器" class="headerlink" title="同级元素选择器"></a>同级元素选择器</h3><p>1.E~F 匹配任何在E元素之后的同级F元素</p>
<h3 id="属性选择器-1"><a href="#属性选择器-1" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>1.E[att^=”val”] 属性attr是以val开头的元素</p>
<p>2.E[att$=”val”] 属性attr是以val结尾的元素</p>
<p>3.E[att*=”val”] 属性attr是以包含val的元素</p>
<h3 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h3><p>1.E:nth-child(n) 匹配父元素的第n个元素 第一个是1</p>
<p>2.E:nth-last-child（n） 匹配父元素的倒数第n个元素 第一个是1</p>
<h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h3><ol>
<li><p>$(“*”)  所有元素</p>
</li>
<li><p>$(“#info”) id是info的元素</p>
</li>
<li><p>$(“.info”)  class是info的元素</p>
</li>
<li><p>$(“p”)  所有p标签</p>
</li>
<li><p>$(“.info1.info2”)  class是info1且info2的元素</p>
</li>
<li><p>$(“p:first”)   第一个p元素</p>
</li>
<li><p>$(“p:last”)   最后一个p元素</p>
</li>
<li><p>$(“tr:even”)   所有偶数</p>
</li>
<li><p>$(“tr:odd”)   所有奇数</p>
</li>
<li><p>$(“li:eq(3)”)   第四个li（index从0开始）</p>
</li>
<li><p>$(“li:gt(3)”)   index大于3的元素</p>
</li>
<li><p>$(“li:lt(3)”)   index小于3的元素</p>
</li>
<li><p>$(“input:not(:empty)”)  所有不为空的input元素</p>
</li>
<li><p>$(“:header”)  所有标题元素 即h1-h6</p>
</li>
<li><p>$(“:animated”)  所有动画元素</p>
</li>
<li><p>$(“:contains(‘W3School’)”)  包含指定字符串的所有元素</p>
</li>
<li><p>$(“:empty”)   无子元素或子节点的所有元素</p>
</li>
<li><p>$(“:hidden”)   所有隐藏的p元素</p>
</li>
<li><p>$(“table:visible”)   所有可见的表格</p>
</li>
<li><p>$(“[href]”)  所有带有href属性的元素</p>
</li>
<li><p>$(“[href=‘#’]”)  所有href属性等于#的元素</p>
</li>
<li><p>$(“[href!=‘#’]”)  所有href属性不等于#的元素</p>
</li>
<li><p>$(“[href$=‘.jpg’]”)  所有href属性以.jpg结尾的元素</p>
</li>
<li><p>$(“:input”)  所有input元素</p>
</li>
<li><p>$(“:text”)   所有type=text的input元素</p>
</li>
<li><p>$(“:password”)   所有type=password的input元素</p>
</li>
<li><p>$(“:radio”)   所有type=radio的input元素</p>
</li>
<li><p>$(“:checkbox”)   所有type=checkbox的input元素</p>
</li>
<li><p>$(“:submit”)   所有type=submit的input元素</p>
</li>
<li><p>$(“:reset”)   所有type=reset的input元素</p>
</li>
<li><p>$(“:button”)   所有type=button的input元素</p>
</li>
<li><p>$(“:image”)   所有type=image的input元素</p>
</li>
<li><p>$(“:file”)   所有type=file的input元素</p>
</li>
<li><p>$(“:enable”)  所有激活的input元素</p>
</li>
<li><p>$(“:disable”)  所有禁用的input元素</p>
</li>
<li><p>$(“:selected”)  所有被选取的input元素</p>
</li>
<li><p>$(“:checked”)  所有被选中的input元素</p>
</li>
<li><p>$(“p.intro”) 选取所有 class=”intro” 的 </p><p> 元素</p>
</li>
<li><p>$(“[href$=’.jpg’]”) 所有带有以 “.jpg” 结尾的属性值的 href 属性</p>
</li>
</ol>
<h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><ol>
<li><p>$(“A B”) 选取A元素的子孙元素中匹配到B的元素</p>
</li>
<li><p>$(“A &gt; B”) 选择A元素的子元素中匹配到B的元素</p>
</li>
<li><p>$(“A + B”) 选择A元素的下一个兄弟元素中匹配到B的元素</p>
</li>
<li><p>$(“A ~ B”) 选择A元素的后面的兄弟元素中匹配到B的元素</p>
</li>
</ol>
<h2 id="jquery选取方法"><a href="#jquery选取方法" class="headerlink" title="jquery选取方法"></a>jquery选取方法</h2><ol>
<li><p>first(): 返回对象仅包含选中元素中的第一个元素</p>
</li>
<li><p>last(): 返回对象仅包含选中元素中的最后一个元素</p>
</li>
<li><p>eq(): 返回的对象只包含指定序号的单个选中元素</p>
</li>
<li><p>slice(): 参数为开始和结束序号，返回对象包含从开始到结束序号（不包括结束位置）之间的元素集</p>
</li>
<li><p>not(): 返回除了显示排除的元素之外的所有选中元素</p>
</li>
<li><p>has(): 返回包含特定后代的元素</p>
</li>
<li><p>find(): 返回当前选中元素的子孙元素与选择器相匹配的元素</p>
</li>
<li><p>children(): 返回每一个选中元素的直接子元素</p>
</li>
<li><p>next(): 返回每一个选中元素的的下一个兄弟元素</p>
</li>
<li><p>prev(): 返回每一个选中元素的的上一个兄弟元素</p>
</li>
<li><p>silbings(): 返回每一个选中元素的所有兄弟元素</p>
</li>
<li><p>parent(): 返回每一个选中元素的父节点</p>
</li>
<li><p>parents(): 返回每一个选中元素的祖先节点</p>
</li>
</ol>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">想戴上最美的面具，又想卸下所有的伪装</p><br><p></p>
]]></content>
      
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> css </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Array]]></title>
      <url>/2017/06/22/array%20/</url>
      <content type="html"><![CDATA[<h3 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h3><p>1.调用构造函数Array()</p>
<p>(1)调用时没有参数,即创建一个空数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</div></pre></td></tr></table></figure></p>
<p>(2)调用时有一个参数且为数字，该数字表示数组长度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p>(3)调用时有一个或多个非数值元素、数组元素为参数，此时参数即是该数组的元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"crystal"</span>,<span class="string">"zilan"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<p>2.数组字面量</p>
<p>使用数组直接量是创建数组最简单的方法，在方括号中将数组元素用逗号隔开即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [];    </div><div class="line"></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="string">"crystal"</span>,<span class="string">"zilan"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">true</span>];</div></pre></td></tr></table></figure></p>
<h3 id="数组的特点"><a href="#数组的特点" class="headerlink" title="数组的特点"></a>数组的特点</h3><p>1.读写属性</p>
<p>使用[ ]操作符来读写数组元素,数组索引(下标)从0开始。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> value = arr[<span class="number">0</span>];</div><div class="line"></div><div class="line">arr[<span class="number">1</span>] = <span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>2.length属性</p>
<p>每个数组都有一个length属性，代表的是数组中元素的个数。通过此属性可以向数组的末尾移除项或者向数组中添加新项。lengfth值 = 索引值+1</p>
<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>1.push()与pop()</p>
<p>push()方法：在数组的尾部添加一个或者多个元素，返回值：新数组长度。</p>
<p>pop()方法：删除数组的最后一个元素，返回值：被删除的元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr1.push(<span class="string">"last"</span>));     <span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">// [1, 2, 3, 4, 5, "last"]</span></div><div class="line"><span class="built_in">console</span>.log(arr1.pop());    <span class="comment">// last</span></div><div class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">// [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<p>2.shift()与unshift()</p>
<p>unshift():在数组的头部添加一个或多个元素，返回值：新数组长度。</p>
<p>shift():删除数组的第一个元素，返回值：被删除的元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr2.unshift(<span class="string">"first"</span>));     <span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">// ["first",1, 2, 3, 4, 5]</span></div><div class="line"><span class="built_in">console</span>.log(arr2.pop());    <span class="comment">// first</span></div><div class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">// [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<p>3.join()</p>
<p>join():将数组中所有元素都转化为字符串并拼接在一起，返回值：最后生成的字符串。此方法不修改原数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">// 1,2,3,4,5</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">" "</span>)); <span class="comment">// 1 2 3 4 5</span></div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"-"</span>)); <span class="comment">// 1-2-3-4-5</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<p>4.reverse()</p>
<p>reverse():将数组中的元素颠倒顺序,返回值：逆序的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.reverse()); <span class="comment">// [5, 4, 3, 2, 1]</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>
<p>5.sort()</p>
<p>sort():将数组中的元素排序并返回排序后的数组，返回值：排序后的数组。</p>
<p>(1)没有参数时：按照字母表顺序排列</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"Travel"</span>,<span class="string">"on"</span>,<span class="string">"beyond"</span>,<span class="string">"the"</span>,<span class="string">"dawn"</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// [5, 4, 3, 2, 1]</span></div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>
<p>(2)为了按照其他方式排序，需要给sort()中传入一个比较函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span> (<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(a&gt;b)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.sort(compare)); <span class="comment">//  [1, 2, 3, 5, 6, 8, 9]</span></div><div class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 5, 6, 8, 9]</span></div></pre></td></tr></table></figure>
<p>6.concat()</p>
<p>concat():创建一个新的数组，返回值：新的数组，包括原始数组以及concat()中的参数,但是不会扁平化数组。注：此方法不会修改原数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(a.concat(<span class="number">5</span>,<span class="number">6</span>)); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></div><div class="line"><span class="built_in">console</span>.log(a.concat([<span class="number">7</span>,<span class="number">8</span>]));   <span class="comment">// [1, 2, 3, 4, 7, 8]</span></div><div class="line"><span class="built_in">console</span>.log(a.concat([<span class="number">9</span>,[<span class="number">10</span>,<span class="number">11</span>]])); <span class="comment">//  [1, 2, 3, 4, 9, [10,11]]</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[1,2,3,4]</span></div></pre></td></tr></table></figure>
<p>7.slice()</p>
<p>slice():返回指定数组的一个子数组,第一个参数表示开始的位置，第二个参数表示结束的位置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">// [1, 2, 3]</span></div><div class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">3</span>));   <span class="comment">// [4, 5]</span></div><div class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>,<span class="number">-1</span>)); <span class="comment">//  [2, 3, 4]</span></div><div class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">-3</span>,<span class="number">-2</span>)); <span class="comment">//[3]</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1,2,3,4,5]</span></div></pre></td></tr></table></figure>
<p>8.splice()</p>
<p>splice():在数组中插入或者删除元素，第一个参数表示操作起始位置，第二个参数表示删除元素的个数，其后的参数都是插入到原数组的元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">4</span>)); <span class="comment">// [5,6,7,8]</span></div><div class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">2</span>));   <span class="comment">// [2, 3]</span></div><div class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">//  [4]</span></div><div class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"a"</span>,<span class="string">"b"</span>)); <span class="comment">//[]</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, "a", "b"]</span></div></pre></td></tr></table></figure></p>
<h3 id="ECMAScript5中的数组方法"><a href="#ECMAScript5中的数组方法" class="headerlink" title="ECMAScript5中的数组方法"></a>ECMAScript5中的数组方法</h3><p>ECMAScript5中新定义了9个新的数组方法来遍历、映射、过滤、检测、简化和所搜数组，第一个参数为函数，且数组中的每个元素都调用该函数。</p>
<p>1.forEach()</p>
<p>forEach():从头至尾遍历数组，为每个元素调用指定的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    sum += value;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum);   <span class="comment">// 28</span></div></pre></td></tr></table></figure>
<p>函数中可有三个参数：数组元素value、索引i、数组本身arr。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,i,arr</span>)</span>&#123;</div><div class="line">    arr[i] = value + <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [2, 3, 4, 5, 6, 7, 8]</span></div></pre></td></tr></table></figure>
<p>2.map()</p>
<p>map()：将调用的数组的每个元素传递给指定的函数，返回值：一个包含该函数返回值的数组;不修改原数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x*x;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 4, 5, 6, 7]</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//  [1, 4, 9, 16, 25, 36, 49]</span></div></pre></td></tr></table></figure>
<p>3.filter()</p>
<p>filter():过滤，返回的数组元素是原数组的子集。传递的函数作为筛选的条件，返回true和false。注：不改变原数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"> <span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &gt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//  [1, 2]</span></div><div class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">//  [4, 5, 6, 7]</span></div><div class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 4, 5, 6, 7]</span></div></pre></td></tr></table></figure>
<p>4.every()和some()</p>
<p>every():当数组中所有元素调用判定函数返回值都为true时，才返回true；</p>
<p>some():当数组中存在元素调用判定函数返回值为true时，即返回true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"> <span class="keyword">var</span> arr2 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//  false</span></div><div class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 4, 5, 6, 7]</span></div></pre></td></tr></table></figure>
<p>5.reduce()和reduceRight()</p>
<p>reduce()和reduceRight()使用指定的函数将数组元素进行组合，第一个参数是执行简单操作的函数，第二个参数是初始值(可选)，传递的函数有四个参数：前一个参数prev、当前值cur、索引i、数组本身arr。reduceRight()表示执行顺序从右到左。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> prev + cur;</div><div class="line">&#125;,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> max = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> (x&gt;y)?x:y;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"> <span class="built_in">console</span>.log(sum);  <span class="comment">//  16</span></div><div class="line"> <span class="built_in">console</span>.log(max);  <span class="comment">//  5</span></div></pre></td></tr></table></figure>
<p>6.indexOf()和lastIndexOf()</p>
<p>indexOf()和lastIndexOf():找到返回第一个符合条件元素的索引，找不到返回-1，第一个参数表示需要搜索的值，第二个是索引，指定从哪开始搜索。lastIndexOf()是从后往前搜索。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> arr1 = arr.indexOf(<span class="number">5</span>);  <span class="comment">//  4</span></div><div class="line"><span class="keyword">var</span> arr2 = arr.indexOf(<span class="number">8</span>);   <span class="comment">// -1</span></div><div class="line"><span class="keyword">var</span> arr3 = arr.lastIndexOf(<span class="number">5</span>);  <span class="comment">//  4</span></div><div class="line"><span class="keyword">var</span> arr4 = arr.lastIndexOf(<span class="number">9</span>);  <span class="comment">//  -1</span></div></pre></td></tr></table></figure>
<p></p><p style="color: rgb(114, 171, 200);font-size:14px;margin:14px;font-family:Arial">独学而无友，则孤陋且寡闻</p><p></p>
]]></content>
      
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
