<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>在vue中使用iframe</title>
      <link href="/2019/10/21/iframeInVue/"/>
      <url>/2019/10/21/iframeInVue/</url>
      
        <content type="html"><![CDATA[<p>在vue-cli的项目中使用iframe引入html文件的方法：</p><ol><li>将需要引入的html文件及style文件放入在static文件夹中</li></ol><ol start="2"><li>在vue文件中<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:src</span>=<span class="string">"iframeUrl"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"440"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"position:absolute;top:100px;left: 0px;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        iframeUrl:<span class="string">"../../static/demo.html"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在vue-cli中使用websocket</title>
      <link href="/2019/10/03/websocket/"/>
      <url>/2019/10/03/websocket/</url>
      
        <content type="html"><![CDATA[<ol><li>什么是websocket</li></ol><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><ol start="2"><li>为什么要使用websocket</li></ol><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p><ol start="3"><li>在vue-cli项目中使用websocket</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      websock: <span class="literal">null</span>,</span><br><span class="line">      reconnectData: <span class="literal">null</span>,</span><br><span class="line">      lockReconnect: <span class="literal">false</span>, <span class="comment">//避免重复连接，因为onerror之后会立即触发 onclose</span></span><br><span class="line">      timeout: <span class="number">1000</span>, <span class="comment">//10s一次心跳检测</span></span><br><span class="line">      timeoutObj: <span class="literal">null</span>,</span><br><span class="line">      serverTimeoutObj: <span class="literal">null</span>,</span><br><span class="line">      socketData: &#123;</span><br><span class="line">        pageName: <span class="keyword">this</span>.GLOBAL.pageName,</span><br><span class="line">        futuresName: <span class="keyword">this</span>.GLOBAL.futuresName,</span><br><span class="line">        enterTime: <span class="keyword">this</span>.GLOBAL.enterTime,</span><br><span class="line">        leaveTime: <span class="keyword">this</span>.GLOBAL.leaveTime</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initWebSocket() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"启动中"</span>);</span><br><span class="line">      <span class="keyword">let</span> wsurl = <span class="string">`ws://47.56.99.230/api/websocket/<span class="subst">$&#123;<span class="keyword">this</span>.userId&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">this</span>.websock = <span class="keyword">new</span> WebSocket(wsurl);</span><br><span class="line">      <span class="keyword">this</span>.websock.onopen = <span class="keyword">this</span>.websocketonopen; <span class="comment">//连接成功</span></span><br><span class="line">      <span class="keyword">this</span>.websock.onmessage = <span class="keyword">this</span>.websocketonmessage; <span class="comment">//广播成功</span></span><br><span class="line">      <span class="keyword">this</span>.websock.onerror = <span class="keyword">this</span>.websocketonerror; <span class="comment">//连接断开，失败</span></span><br><span class="line">      <span class="keyword">this</span>.websock.onclose = <span class="keyword">this</span>.websocketclose; <span class="comment">//连接关闭</span></span><br><span class="line">    &#125;, <span class="comment">//初始化weosocket</span></span><br><span class="line">    websocketonopen() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接成功"</span>);</span><br><span class="line">      <span class="comment">// this.heatBeat();</span></span><br><span class="line">    &#125;, <span class="comment">//连接成功</span></span><br><span class="line">    websocketonerror() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接失败"</span>);</span><br><span class="line">      <span class="keyword">this</span>.reconnect();</span><br><span class="line">    &#125;, <span class="comment">//连接失败</span></span><br><span class="line">    websocketclose() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"断开连接"</span>);</span><br><span class="line">      <span class="keyword">this</span>.reconnect();</span><br><span class="line">    &#125;, <span class="comment">//各种问题导致的 连接关闭</span></span><br><span class="line">    websocketonmessage(data) &#123;</span><br><span class="line">      <span class="comment">// this.heatBeat(); //收到消息会刷新心跳检测，如果一直收到消息，就推迟心跳发送</span></span><br><span class="line">      <span class="keyword">const</span> messageType = <span class="built_in">JSON</span>.parse(data.data).type;</span><br><span class="line">      <span class="keyword">if</span> (messageType == <span class="string">"flush_user_message"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">"SET_USERMESSAGESTATUS"</span>, <span class="string">"true"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="comment">//数据接收</span></span><br><span class="line">    websocketsend(data) &#123;</span><br><span class="line">      <span class="keyword">this</span>.websock.send(</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          type: <span class="string">"add_browse_record"</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">            pageName: <span class="keyword">this</span>.GLOBAL.pageName,</span><br><span class="line">            futuresName: <span class="keyword">this</span>.GLOBAL.futuresName,</span><br><span class="line">            enterTime: <span class="keyword">this</span>.GLOBAL.enterTime,</span><br><span class="line">            leaveTime: <span class="keyword">this</span>.GLOBAL.leaveTime</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;,  <span class="comment">//数据发送</span></span><br><span class="line">   </span><br><span class="line">    reconnect() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.lockReconnect || !<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">        <span class="comment">//这里很关键，因为连接失败之后之后会相继触发 连接关闭，不然会连接上两个 WebSocket</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.lockReconnect = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.reconnectData &amp;&amp; clearTimeout(<span class="keyword">this</span>.reconnectData);</span><br><span class="line">      <span class="keyword">this</span>.reconnectData = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.initWebSocket();</span><br><span class="line">        <span class="keyword">this</span>.lockReconnect = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="comment">//socket重连</span></span><br><span class="line">    heatBeat() &#123;</span><br><span class="line">      <span class="keyword">this</span>.timeoutObj &amp;&amp; clearTimeout(<span class="keyword">this</span>.timeoutObj);</span><br><span class="line">      <span class="keyword">this</span>.serverTimeoutObj &amp;&amp; clearTimeout(<span class="keyword">this</span>.serverTimeoutObj);</span><br><span class="line">      <span class="keyword">this</span>.timeoutObj = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this.websocketsend(&#123;</span></span><br><span class="line">        <span class="comment">//   type: "add_browse_record",</span></span><br><span class="line">        <span class="comment">//   data: this.socketData</span></span><br><span class="line">        <span class="comment">// &#125;); //根据后台要求发送</span></span><br><span class="line">        <span class="keyword">this</span>.serverTimeoutObj = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.websock.close(); <span class="comment">//如果  5秒之后我们没有收到 后台返回的心跳检测数据 断开socket，断开后会启动重连机制</span></span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">      &#125;, <span class="keyword">this</span>.timeout);</span><br><span class="line">    &#125;,</span><br><span class="line">    fetchData() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log;</span><br><span class="line">        <span class="keyword">this</span>.websocketsend(&#123;</span><br><span class="line">          type: <span class="string">"add_browse_record"</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">            pageName: <span class="keyword">this</span>.GLOBAL.pageName,</span><br><span class="line">            futuresName: <span class="keyword">this</span>.GLOBAL.futuresName,</span><br><span class="line">            enterTime: <span class="keyword">this</span>.GLOBAL.enterTime,</span><br><span class="line">            leaveTime: <span class="keyword">this</span>.GLOBAL.leaveTime</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.userId) &#123; <span class="comment">//如果是登陆状态再触发websocket</span></span><br><span class="line">      <span class="keyword">this</span>.initWebSocket();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (to.path == <span class="string">"/"</span> &amp;&amp; <span class="keyword">from</span>.path == <span class="string">"/login"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.initWebSocket();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="keyword">this</span>.lockReconnect = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// this.websock.close(); //离开路由之后断开websocket连接</span></span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.reconnectData); <span class="comment">//离开清除 timeout</span></span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.timeoutObj); <span class="comment">//离开清除 timeout</span></span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.serverTimeoutObj); <span class="comment">//离开清除 timeout</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue，websocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> Vue组件中eventBus使用</title>
      <link href="/2019/09/17/eventBus/"/>
      <url>/2019/09/17/eventBus/</url>
      
        <content type="html"><![CDATA[<p>作用：在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p><p>实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建 bus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sender</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">"@/utils/bus.js"</span>;</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    Bus.$emit(<span class="string">"getChannleMsg"</span>, msg);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Receiver</span></span><br><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">"@/utils/bus.js"</span>;</span><br><span class="line">  created() &#123;</span><br><span class="line">    Bus.$off(<span class="string">"getChannleMsg"</span>);</span><br><span class="line">    Bus.$on(<span class="string">"getChannleMsg"</span>, <span class="keyword">this</span>.getMsg);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods:&#123;</span><br><span class="line">    getMsg(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data = val;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuex的学习总结</title>
      <link href="/2019/05/20/vuex/"/>
      <url>/2019/05/20/vuex/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是vuex"><a href="#什么是vuex" class="headerlink" title="什么是vuex"></a>什么是vuex</h2><p> vuex：专门为vue.js应用程序开发的状态管理模式</p><h2 id="为什么用vuex"><a href="#为什么用vuex" class="headerlink" title="为什么用vuex"></a>为什么用vuex</h2><p> 当我们构建一个中大型的单页面应用程序时，vuex可以更好的帮助我们在组建外部统一管理状态</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="state-必须"><a href="#state-必须" class="headerlink" title="state(必须)"></a>state(必须)</h3><ol><li><p>state是唯一的数据源</p></li><li><p>单一状态树，即没有层级</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p> 通过getters可以基于state派生出一些新的状态</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        todos:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">"111"</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">"222"</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        doneTodos: <span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mutations-必须"><a href="#mutations-必须" class="headerlink" title="mutations(必须)"></a>mutations(必须)</h3><p>更改vuex的store中状态唯一的方法就是提交mutation</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        count:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123; <span class="comment">//唯一的方法去改变</span></span><br><span class="line">        increment(state)&#123;</span><br><span class="line">            state.count ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用increment方法</span></span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">"increment"</span>)</span><br></pre></td></tr></table></figure><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>action提交的是mutation，而不是直接变更状态</p><p>action可以包含任意异步操作</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        count:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123; <span class="comment">//只能进行同步操作</span></span><br><span class="line">        increment(state)&#123;</span><br><span class="line">            state.count ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        increment(context)&#123; <span class="comment">//可以执行异步操作</span></span><br><span class="line">            context.commit(<span class="string">"increment"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>面对复杂的应用程序，当管理的状态比较多的时候，我们需要将vuex的store对象分割成模块（modules）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state : &#123; ... &#125;,</span><br><span class="line">    mutation : &#123; ... &#125;,</span><br><span class="line">    actions : &#123; ... &#125;,</span><br><span class="line">    getters : &#123; ... &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    state : &#123; ... &#125;,</span><br><span class="line">    mutation : &#123; ... &#125;,</span><br><span class="line">    actions : &#123; ... &#125;,</span><br><span class="line">    getters : &#123; ... &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        a:moduleA,</span><br><span class="line">        b:moduleB </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue，vuex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mintLogin</title>
      <link href="/2019/04/26/mint-ui-login/"/>
      <url>/2019/04/26/mint-ui-login/</url>
      
        <content type="html"><![CDATA[<p> 使用vue+axios+vuex+mint-ui从0开始实现一个用户登录功能</p><h3 id="安装所有环境"><a href="#安装所有环境" class="headerlink" title="安装所有环境"></a>安装所有环境</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">vue init webpack login</span><br><span class="line"></span><br><span class="line">cd login</span><br><span class="line"></span><br><span class="line">npm i mint-ui -S</span><br><span class="line"></span><br><span class="line">npm install axios</span><br><span class="line"></span><br><span class="line">npm install vuex --save</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>使用sass</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm install node-sass  sass-loader --save-dev</span><br></pre></td></tr></table></figure><p>使用vee-validate</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install vee-validate --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VeeValidate <span class="keyword">from</span> <span class="string">'vee-validate'</span>;</span><br><span class="line">Vue.use(VeeValidate);</span><br></pre></td></tr></table></figure><h3 id="使用mint-ui"><a href="#使用mint-ui" class="headerlink" title="使用mint-ui"></a>使用mint-ui</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> MintUI <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'mint-ui/lib/style.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(MintUI)</span><br></pre></td></tr></table></figure><h3 id="页面逻辑"><a href="#页面逻辑" class="headerlink" title="页面逻辑"></a>页面逻辑</h3><ol><li>components新建login.vue搭一个简单的登录、注册、忘记密码页面,并设置好路由</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">   &#123;</span><br><span class="line">     path: <span class="string">'/'</span>,</span><br><span class="line">     name: <span class="string">'Login'</span>,</span><br><span class="line">     component: Login</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><ol start="2"><li>封装axios</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Indicator &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span>;</span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service=axios.create(&#123;</span><br><span class="line">  <span class="comment">//baseURL:'',</span></span><br><span class="line">  timeout:<span class="number">100000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    Indicator.open();</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * status为非0是抛错 可结合自己业务进行修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Indicator.close();</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line">    <span class="keyword">if</span> (res.status !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 6:身份过期;</span></span><br><span class="line">      <span class="keyword">if</span> (res.status === <span class="number">6</span>) &#123;</span><br><span class="line">        MessageBox(&#123;</span><br><span class="line">          title: <span class="string">'提示'</span>,</span><br><span class="line">          message: <span class="string">'你已被登出,重新登录?'</span>,</span><br><span class="line">          showCancelButton: <span class="literal">true</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'LogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 为了重新实例化vue-router对象 避免bug</span></span><br><span class="line">            location.reload()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast(&#123;</span><br><span class="line">          message: res.msg,</span><br><span class="line">          iconClass: <span class="string">'icon icon-error'</span>,</span><br><span class="line">          duration: <span class="number">5</span>*<span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> response.data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    Toast(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      iconClass: <span class="string">'icon icon-success'</span>,</span><br><span class="line">      duration: <span class="number">5</span>*<span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>使用axios,新建login.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">  formData.append(<span class="string">'username'</span>, username);</span><br><span class="line">  formData.append(<span class="string">'password'</span>, password);</span><br><span class="line">  <span class="comment">//登录请求</span></span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/user/login'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    headers:&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;,</span><br><span class="line">    data: Qs.stringify(&#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sendVerifyCode</span>(<span class="params">type, phone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/smsVerify'</span>,</span><br><span class="line">    method: <span class="string">"post"</span>,</span><br><span class="line">    data: Qs.stringify(&#123;</span><br><span class="line">      smsType: type,</span><br><span class="line">      mobile: phone</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">username,password,vCode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">"/api/register"</span>,</span><br><span class="line">    method:<span class="string">"post"</span>,</span><br><span class="line">    data:Qs.stringify(&#123;</span><br><span class="line">      username:username,</span><br><span class="line">      password:password,</span><br><span class="line">      vCode:vCode</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的/api是在webpack的config/index.js中的proxyTable配置好的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">     <span class="string">'/api'</span>: &#123;</span><br><span class="line">       target: <span class="string">'http://xxx.xxx.xx'</span>,</span><br><span class="line">       changeOrigin: <span class="literal">true</span>,</span><br><span class="line">       pathRewrite: &#123;</span><br><span class="line">         <span class="string">'^/api'</span>: <span class="string">'/api'</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vuex</li></ol><p>新建store文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── service</span><br><span class="line">│   └── ...               # 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── getter.js        # 根级别的 action</span><br><span class="line">    └── modules</span><br><span class="line">        └── user.js      # 登录模块</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  login,</span><br><span class="line">  logout</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@/api/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_USERINFO_DATA(state, userInfo) &#123;</span><br><span class="line">      <span class="comment">//在登录时需要存储的信息</span></span><br><span class="line">      state.userInfo = userInfo</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    Login(&#123;</span><br><span class="line">      commit</span><br><span class="line">    &#125;, userInfo) &#123;</span><br><span class="line">      <span class="keyword">const</span> username = userInfo.username.trim()</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        login(username, userInfo.password).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> data = response.data</span><br><span class="line">          commit (<span class="string">"SET_USERINFO_DATA"</span>,data);</span><br><span class="line">          <span class="built_in">window</span>.localStorage.setItem(<span class="string">'user'</span>, <span class="built_in">JSON</span>.stringify(user.state));</span><br><span class="line">          resolve(response)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line"><span class="keyword">const</span> getters=&#123;</span><br><span class="line">  userInfo:<span class="function"><span class="params">state</span>=&gt;</span>state.user.userInfo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br><span class="line"><span class="comment">//index</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    user</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol start="4"><li>在页面中调用方法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  loginSubmit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$validator.validateAll(<span class="string">"login"</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.dispatch(<span class="string">'Login'</span>, <span class="keyword">this</span>.userLogin).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">                    path: <span class="keyword">this</span>.redirect || <span class="string">'/'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">          <span class="built_in">window</span>.localStorage.setItem(<span class="string">"userPhone"</span>,<span class="keyword">this</span>.userLogin.username)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>进行路由拦截</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//白名单路由</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>, <span class="string">'/forgetPsd'</span>, <span class="string">"/"</span>]</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//需要登录</span></span><br><span class="line">  <span class="keyword">let</span> userInfoId = store.getters.userInfo;</span><br><span class="line">  <span class="comment">// console.log(userInfoId)</span></span><br><span class="line">  <span class="comment">//需要登录</span></span><br><span class="line">  <span class="keyword">if</span> (userInfoId === <span class="literal">null</span> ||userInfoId===<span class="string">''</span>|| <span class="keyword">typeof</span> userInfoId === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(whiteList.indexOf(to.path)!==<span class="number">-1</span>)&#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue mint-ui </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue的知识点</title>
      <link href="/2019/04/12/vueTheory/"/>
      <url>/2019/04/12/vueTheory/</url>
      
        <content type="html"><![CDATA[<ol><li><p>nextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。</p></li><li><p>生命周期函数就是组件在初始化或者数据更新时会触发的钩子函数。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> 模块化</title>
      <link href="/2019/03/13/concepts/"/>
      <url>/2019/03/13/concepts/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么需要模块化："><a href="#为什么需要模块化：" class="headerlink" title="为什么需要模块化："></a>为什么需要模块化：</h4><p>首先前端复杂程度有限，没有模块也会死可以的。但是 2009 年出现 node.js，将 JavaScript 语言用于服务端编程，在服务端一定要有模块来与操作系统和其他应用程序互动，node 编程中的核心思想就是模块，由此模块化编程在 js 中流行。</p><h4 id="模块化分类"><a href="#模块化分类" class="headerlink" title="模块化分类"></a>模块化分类</h4><p>在 es6 以前，通用的 JavaScript 模块规范有两种：CommonJS 和 AMD</p><ol><li>CommonJS 规范（服务端模块）</li></ol><p>代表：requireJS、seaJS</p><p>加载模块：require()</p><p>暴露模块：module.exports 和 exports</p><p>如使用 math.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">"math"</span>);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">math.add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>commonJS 是用于服务端编程，所有的模块都放在本地硬盘中，可以同步加载完成，等待的时间就是硬盘读取的时间。</p><ol start="2"><li>AMD 规范（客户端模块）</li></ol><p>因为模块放在服务端，commonJS 不支持异步操作，所以并不适用于浏览器环境。所以出现了 AMD 规范：异步模块定义。</p><p>代表：require.js和curl.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公式</span></span><br><span class="line">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure><p>定义模块：define()</p><p>载入模块：dependencies(数组格式)</p><p>工厂方法：factory(返回模块函数)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不依赖其他模块：直接定义</span></span><br><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>（）</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add:add</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖其他模块：define()第一个参数为数组格式，指定所需模块</span></span><br><span class="line">define([<span class="string">'Lib'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">lib</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Lib.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo:foo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用require加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"math"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</span><br><span class="line">    math.add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>CMD规范（客户端模块）</li></ol><p>代表：seajs</p><p>特点：依赖就近</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公式</span></span><br><span class="line">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure><p>定义模块：define()</p><p>载入模块：dependencies(数组格式)</p><p>工厂方法：factory(返回模块函数)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>AMD与CMD的异同</p><p>异：对依赖模块的执行时机处理不同</p><p>AMD依赖前置，js可以知道模块是谁，立即加载；CMD就近依赖，需要把模块转换成字符串再解析一边才知道依赖哪些模块。</p><p>同：都是异步加载模块</p></li></ol><ol start="5"><li>module（ES6发布之后）</li></ol><p>引入模块：import</p><p>导出模块：export</p>]]></content>
      
      
      
        <tags>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用element-ui搭建后台管理系统问题汇总</title>
      <link href="/2019/02/20/vue-manage-tips/"/>
      <url>/2019/02/20/vue-manage-tips/</url>
      
        <content type="html"><![CDATA[<h4 id="时间插件"><a href="#时间插件" class="headerlink" title="时间插件"></a>时间插件</h4><ol><li>两个输入框，限制结束日期不能大于开始日期</li></ol><p>注意此时input框中不能使用value-format，这会使日期变成字符串从而不能比较大小<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-date-picker</span></span><br><span class="line"><span class="regexp">    type="date"</span></span><br><span class="line"><span class="regexp">    placeholder="结束日期"</span></span><br><span class="line"><span class="regexp">    v-model="dayEndTime"</span></span><br><span class="line"><span class="regexp">    :picker-options="pickerOptions1"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-date-picker&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        pickerOptions0: &#123;</span><br><span class="line">          disabledDate: <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.dayEndTime != <span class="string">""</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now() || time.getTime() &gt; <span class="keyword">this</span>.dayEndTime;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        pickerOptions1: &#123;</span><br><span class="line">          disabledDate: <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> time.getTime() &lt; <span class="keyword">this</span>.dayStartTime || time.getTime() &gt; <span class="built_in">Date</span>.now();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        dayStartTime: <span class="string">''</span>,</span><br><span class="line">        dayEndTime:<span class="string">''</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其他的时间限制：<a href="http://www.cnblogs.com/xjcjcsy/p/7977966.html" target="_blank" rel="noopener">更多限制</a></p><ol start="2"><li>获取到的日期与选中的日期相隔一天</li></ol><p>一般情况下使用value-format即可解决这个问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    value-format=<span class="string">"yyyy-MM-dd"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br></pre></td></tr></table></figure><p>但是在比较大小的时候不能使用value-format，所以使用change事件获取到值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    @change=<span class="string">"getStartTime"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">      getStartTime(time)&#123;</span></span><br><span class="line"><span class="regexp">        this.dayStartTime = time</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="通过id跳转到不同的详情页"><a href="#通过id跳转到不同的详情页" class="headerlink" title="通过id跳转到不同的详情页"></a>通过id跳转到不同的详情页</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">const</span> dataID=<span class="keyword">this</span>.$route.query.id</span><br><span class="line">    request(&#123;</span><br><span class="line">        method:<span class="string">'get'</span>,</span><br><span class="line">        url:<span class="string">`/web/admin/downstream/merchantList/<span class="subst">$&#123;dataID&#125;</span>`</span></span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = res.data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="背景图片打包后找不到路径问题"><a href="#背景图片打包后找不到路径问题" class="headerlink" title="背景图片打包后找不到路径问题"></a>背景图片打包后找不到路径问题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style lang=<span class="string">"stylus"</span> scoped&gt;</span><br><span class="line">.bg</span><br><span class="line">  background url(<span class="string">"~@/assets/psdBg.png"</span>) no-repeat</span><br><span class="line">  background-size <span class="number">100</span>% <span class="number">100</span>%</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 在build/u</span>tils.js</span><br><span class="line">   <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">      <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        publicPath:<span class="string">'../../'</span>,   <span class="comment">//添加此行</span></span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试题汇总</title>
      <link href="/2018/12/26/interviewQuestion/"/>
      <url>/2018/12/26/interviewQuestion/</url>
      
        <content type="html"><![CDATA[<h3 id="html-篇"><a href="#html-篇" class="headerlink" title="html 篇"></a>html 篇</h3><ol><li><p>HTML 标签的语义化：通过使用包含语义的标签（如 h1-h6）恰当地表示文档结构</p></li><li><p>css 命名的语义化是指：为 html 标签添加有意义的 class</p></li><li><p>Doctype 作用？标准模式与兼容模式各有什么区别?</p><p>a. &lt;!DOCTYPE&gt;声明位于位于 HTML 文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE 不存在或格式不正确会导致文档以兼容模式呈现</html></p><p>b.标准模式的排版 和 JS 运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作</p></li></ol><h3 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h3><ol><li>使以下代码正常运行<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.multiply()</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1,2,3,4,5,1,4,9,16,25</span></span><br></pre></td></tr></table></figure></li></ol><p>答案为<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.multiply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            arr1 = arr[i] * arr[i];</span><br><span class="line">        &#125;)()</span><br><span class="line">        arr.push(arr1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.multiply());<span class="comment">//1, 2, 3, 4, 5, 1, 4, 9, 16, 25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.multiply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.forEach( <span class="function">(<span class="params">item,index,arr</span>) =&gt;</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.push(arr[index] ** <span class="number">2</span>) </span><br><span class="line">        &#125;) </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] </span><br><span class="line">    a.multiply() </span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//[1, 2, 3, 4, 5, 1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>为什么在js中<code>0.2+0.1 == 0.3</code>返回false？</li></ol><p>回答：在js进行数字运算时，会有<strong>精度缺失</strong>的问题，简单的来说，由于0.1转换成二进制时是无限循环的，所以在计算机中只能存储一个近似值，0.1与0.2都是取得近似值，所以返回的是false。但是这并非绝对，有时两个近似值在进行计算的时候，得到的值在js的近似范围内，就可以返回true。</p><p>规避方法：为了避免小数计算的精度问题，最常用的方式是将浮点数转化成整数去进行计算。</p><ol start="3"><li>JavaScript 中有哪些不同的数据类型？</li></ol><p>回答： 有两种：主要数据类型和引用类型（也称原始类型和对象类型）</p><p>主要数据类型为：Number（数字）、String（字符串） 、Boolean（布尔值）、Null（空）和Undefined（未定义）<br>引用类型为： Object（对象）</p><ol start="4"><li>使用proxy实现数据绑定</li></ol><p>答：proxy可以理解为在目标对象之前设置一层”拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写</p><ol start="5"><li><p>new 关键字在 JavaScript 中有什么作用？</p><p>a.声明一个中间对象</p><p>b.将该中间对象的 proto 指向构造函数的原型</p><p>c.将构造函数的 this 通过 apply 指向中间对象</p><p>d.返回该中间对象,也就是返回了实例对象</p></li><li><p>解释单向数据流和双向数据绑定。</p><p>a. 单向数据绑定:指的是我们先把模板写好，然后把模板和数据（数据可能来自后台）整合到一起形成 HTML 代码，然后把这段 HTML 代码插入到文档流里面。 单向数据绑定缺点：HTML 代码一旦生成完以后，就没有办法再变了，如果有新的数据来了，那就必须把之前的 HTML 代码去掉，再重新把新的数据和模板一起整合后插入到文档流中。 简单的来说就是 DOM 操作直接改变</p><p>b.数据模型（Module）和视图（View）之间的双向绑定。 用户在视图上的修改会自动同步到数据模型中去，同样的，如果数据模型中的值发生了变化，也会立刻同步到视图中去。</p></li><li><p>解释 JavaScript 并发模型</p><p>JavaScript 是单线程的，这意味着在任何时候只能有一段代码执行。JavaScript 主线程在运行时，会建立一个执行同步代码的栈和执行异步代码的队列.JavaScript 主线程在执行时，如果遇到异步的代码，就会将这些代码加入到异步队列中，然后继续执行同步代码栈中的代码。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>重装系统之后的一系列操作</title>
      <link href="/2018/11/19/environment/"/>
      <url>/2018/11/19/environment/</url>
      
        <content type="html"><![CDATA[<h5 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node环境</a></h5><h5 id="安装git环境"><a href="#安装git环境" class="headerlink" title="安装git环境"></a>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git环境</a></h5><p> 下载安装之后，执行以下命令<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;zlstory&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global user.email &quot;13968106594@163.com&quot;</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;13968106594@163.com&quot;</span><br></pre></td></tr></table></figure></p><p> 创建ssh密钥之后，将github中setting中的SSH and GPG keys新增。title随便填，下面的把刚才生成的id_rsa.pub（目录：C:\Users\Crystal.ssh）用记事本打开把内容贴进去。</p><h5 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h5> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;13968106594@163.com&quot;</span><br></pre></td></tr></table></figure><p> 将之前保存的hexo压缩包解压之后，直接<code>npm install</code>即可本地预览。</p><h5 id="host文件地址"><a href="#host文件地址" class="headerlink" title="host文件地址"></a>host文件地址</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> environment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VUE去哪儿网学习笔记3</title>
      <link href="/2018/11/06/vue-note4/"/>
      <url>/2018/11/06/vue-note4/</url>
      
        <content type="html"><![CDATA[<p>进行项目实战环节</p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ol><li><p>安装node webpack github等环境</p></li><li><p>全局安装脚手架vue-cli</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure></li><li><p>使用vue-cli构建项目</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack travel</span><br></pre></td></tr></table></figure></li></ol><p>之后会出现一系列的问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Project name y</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author zlstory &lt;13968106594@163.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? No</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) npm</span><br></pre></td></tr></table></figure></p><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><ol><li><p>路由<br>路由就是根据网址不同，返回不同的内容给用户</p></li><li><p>@符号表示src目录下</p></li><li><p>路由的配置文件放在router文件夹下的index.js中</p></li><li><p>多页应用：页面之间的跳转，返回的是html，优点是首屏时间快，seo效果好。缺点是：页面之间切换慢。</p><p>单页应用：页面跳转并不是跳转到另一个html，而是通过js删除本页面的dom，加载新的dom。优点是页面切换快，缺点是首屏时间稍慢，seo差。</p></li></ol><h1 id="禁用eslint"><a href="#禁用eslint" class="headerlink" title="禁用eslint"></a>禁用eslint</h1><p>在webpack.base.conf.js注释代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createLintingRule = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">  loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">  enforce: <span class="string">'pre'</span>,</span><br><span class="line">  include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)],</span><br><span class="line">  options: &#123;</span><br><span class="line">    formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>),</span><br><span class="line">    emitWarning: !config.dev.showEslintErrorsInOverlay</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>或者在index.js中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEslint: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure></p><h1 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h1><ol><li><p>改变meta标签，使其适配于移动端</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用reset.css清除浏览器默认样式。在assets文件夹中放入静态资源。在main.js中import进去。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import './assets/styles/reset.css'</span><br></pre></td></tr></table></figure></li><li><p>为了解决1像素问题，引入文件：border.css</p></li><li><p>解决移动端点击延迟问题：引入fastclick.js<br>使用<code>npm install fastclick --save</code><br>在mian.js中引入并使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line">fastClick.attach(<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure></li><li><p>在index.js中配置页面路由</p><p>src目录下新建pages文件夹，在index.js中按需引入</p></li><li><p>在项目中使用stylus：<code>npm install stylus --save</code>、<code>npm install stylus-loader --save</code>。<br> 然后在style中定义<code>lang=stylus</code>即可</p></li></ol><ol start="7"><li><p>在pages/home的文件夹中新建components文件夹，放入Header.vue。是home顶部的组件，然后在Home.vue中使用Header.vue:先引入再注册后使用(注意大小写问题)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;home-header&gt;<span class="xml"><span class="tag">&lt;/<span class="name">home-header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> HomeHeader <span class="keyword">from</span> <span class="string">'./components/Header'</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      components:&#123;</span><br><span class="line">          HomeHeader</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>开发HomeHeader组件。<br> 使用rem布局：在reset.css中定义html为50px，所以header本来为43px的高度，则为0.86rem</p></li><li><p>使用iconfont，在main.js中import入iconfont.css(因为多个页面都需要引入iconfont)</p></li><li><p>为主题颜色写一个公用的css：varibles.styl 为css主题色定义变量，在所需页面中引入即可，方便以后改变主题颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在varibles.styl */</span></span><br><span class="line">$bgColor = #00bcd4</span><br><span class="line">$darkTextColor = #333</span><br><span class="line">$headerHeight = .86rem</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在所需页面中先引入再使用 */</span></span><br><span class="line">&lt;style lang="stylus" scoped&gt;</span><br><span class="line">    @<span class="keyword">import</span> <span class="string">'../../../assets/styles/varibles'</span></span><br><span class="line">    .header</span><br><span class="line">        display flex</span><br><span class="line">        height <span class="number">0.86rem</span></span><br><span class="line">        line-height <span class="number">0.86rem</span></span><br><span class="line">        color #fff</span><br><span class="line">        background $bgColor</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>由于上面的路径太长了，所以我们可以使用@符号(代表src目录)，需要注意的是在css中引入其他的css，想用@符号时，需在@符号或者别名前面加一个~<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'~@/assets/styles/varibles'</span></span><br></pre></td></tr></table></figure></p><p>也可以自定义一个别名来代表assets的styles目录,在webpack.base.conf.js中进行配置<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">   alias: &#123;</span><br><span class="line">     <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">     <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">     <span class="string">'styles'</span>: resolve(<span class="string">'src/assets/styles'</span>),</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ol start="11"><li>使用插件进行首页轮播图的开发：github上搜索：vue-awesome-swiper<br>先安装再看文档后使用(全局使用)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-awesome-swiper@2.6.7 --save</span><br></pre></td></tr></table></figure></li></ol><p>遇见的坑：在import中引入时出现找不到该模块的声明文件。</p><ol start="12"><li><p>新建swiper.vue进行开发</p><p>优化：当网速较慢，图片未加载完成的时候，页面会有抖动。解决办法：swiper外层加一个div.wrapper。再使用css：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper</span><br><span class="line">    overflow hidden</span><br><span class="line">    width 100%</span><br><span class="line">    height 0</span><br><span class="line">    padding-bottom 26.67%</span><br><span class="line">or</span><br><span class="line"> .wrapper</span><br><span class="line">    overflow hidden</span><br><span class="line">    height 26.67vw</span><br></pre></td></tr></table></figure><p>数值是轮播图片的高除以宽得到的</p></li><li><p>改变swiper的pagination默认样式：&gt;&gt;&gt; 样式穿透  为了不受scoped的限制</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt;&gt;&gt; <span class="selector-class">.swiper-pagination-bullet-active</span>&#123;</span><br><span class="line">    background #ffffff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为了使icons能够左右滑动，需要借用computed来计算icon是否需要第二页显示。直接在computed中计算就好。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    pages() &#123;</span><br><span class="line">        <span class="keyword">const</span> pages = []</span><br><span class="line">        <span class="keyword">this</span>.iconList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> page = <span class="built_in">Math</span>.floor(index / <span class="number">8</span>) <span class="comment">//看数据到底展示在哪一页,从0开始</span></span><br><span class="line">            <span class="keyword">if</span> (!pages[page]) &#123; <span class="comment">//如果不存在(一开始的情况)</span></span><br><span class="line">                pages[page] = []</span><br><span class="line">            &#125;</span><br><span class="line">            pages[page].push(item)<span class="comment">//将item放入pages中</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> pages</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这段代码是为了将data中的iconlists拆分成两个数组。使用vue.js devTools插件可以看得更加清楚<br>然后在template中循环pages相关内容就完成了。</p><ol start="15"><li>使用minxin封装一个 内容太多显示…的css<br>在mixins.styl中<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ellipsis</span>()</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span></span><br><span class="line">  <span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span></span><br><span class="line">  <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span></span><br></pre></td></tr></table></figure></li></ol><p>使用：先引入该文件 再在所需的样式表中<code>ellipsis()</code>即可</p><ol start="16"><li><p>在stylus中，通过@import引入的必须是.styl文件，.css文件在index.html中引入，否则报错</p></li><li><p>开发recommend模板以及weekend模板</p></li><li><p>由于很多子组件中都需要数据，需要发送ajax请求，而子组件都是显示在home.vue中，所以可以直接在home.vue中发送ajax请求。</p></li></ol><p>将json文件放在static文件夹中，因为在vue-cli生成的所有文件夹中只有static可以被外部(浏览器中输入路径)访问到。</p><ol start="19"><li>本地将所有模拟数据都是放在mock文件夹中的，所以axios的请求路径是’/static/mock/index.json’,但是线上版本应该是’/api/index.json’,当我们在本地模拟的时候与上线路径不一致，而在上线前改变代码也是一件非常危险的事情，所以我们需要使用vue代理将请求路径保持一致。</li></ol><p>打开config文件夹中的index.js(此功能由webpack-dev-server提供)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:8080'</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">'/static/mock'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更改配置文件之后，需要重新启动服务器。</p><ol start="20"><li><p>在home.vue中通过axios得到所有数据，现在需要通过父子组件传值来将数据传到各个子组件中</p></li><li><p>进行城市选择开发页面，需要配置index.js中的路由信息.</p><p>当我们在头部(home/header.vue)中点击城市选择的时候，会调到city组件，所以在header.vue的header-right部分使用router-link</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-right"</span>&gt;</span>&#123;&#123;this.city&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont arrow-icon"</span>&gt;</span>&amp;#xe64a;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="22"><li><p>开发city组件时，新建<code>page/city/city.vue</code>，然后开发<code>page/city/components/CityHeader.vue</code>。(较为简单无技巧)</p></li><li><p>开发city中的搜索框界面:当给input给左右内边距时，需要设置</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.search-input</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>控制页面上的1像素边框问题</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-topbottom</span></span><br><span class="line">   &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">       <span class="selector-tag">border-color</span> <span class="selector-id">#ccc</span></span><br><span class="line">   &amp;<span class="selector-pseudo">:after</span></span><br><span class="line">       <span class="selector-tag">border-color</span> <span class="selector-id">#ccc</span></span><br></pre></td></tr></table></figure></li><li><p>开始列表布局(复杂项)，新建list.vue<br>(1) 新建三个area，分别是当前城市，热门城市，以A开头的城市，完善布局之后，使用better-scroll</p></li></ol><p>(2) 安装better-scroll</p><pre><code>使用的时候首先要符合bs规定的dom结构(不一定是ul标签)</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- you can put some other DOMs here, it won't affect the scrolling --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>然后引入Bscroll,在页面挂载成功之后使用(wrapper是最外层dom的ref)</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的滚动完成</p><ol start="26"><li><p>开发左边字母表组件(alphabet.vue)</p></li><li><p>动态渲染city组件啦！<br>在city.vue组件中，使用axios.get获取城市列表，然后父子组件传值到city-list组件中。</p></li></ol><p>循环中再循环了解一下:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area"</span> <span class="attr">v-for</span>=<span class="string">"(item,key) of cities"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title border-topbottom"</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item border-bottom"</span> <span class="attr">v-for</span>=<span class="string">"innerItem of item"</span> <span class="attr">:key</span>=<span class="string">"innerItem.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;innerItem.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="28"><li><p>兄弟组件联动：点击右边字母表，左边滑动到对应的位置</p><p>思路：将alphabet.vue中的字母通过点击事件拿到对应的innerText，将其传值给兄弟组件list.vue(先将alphabet.vue中的值传递给父组件city.vue,再将数据从city.vue中传递给list.vue)</p><p>alphabet.vue:在字母表的item中绑定一个点击事件,向外触发事件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> handleLetterClick(e)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'change'</span>,e.target.innerText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>city.vue：监听子组件传递过来的change事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">city-alphabet</span> <span class="attr">:cities</span>=<span class="string">"cities"</span> @<span class="attr">change</span>=<span class="string">"handleLetterChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">city-alphabet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在methods中定义<code>handleLetterChange</code>事件,然后将letter传值给list.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleLetterChange(letter) &#123;</span><br><span class="line">       <span class="comment">//拿到alphabet.vue中的字母值。</span></span><br><span class="line">       <span class="built_in">console</span>.log(letter)</span><br><span class="line">       <span class="keyword">this</span>.letter = letter</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当list.vue拿到点击的letter值时，思路：当letter改变时，我们需要找到对应字母的列表。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    letter: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">watch: &#123;</span><br><span class="line">    letter() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.letter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过调用better-scroll提供的<code>scrollToElement()</code>方法控制左边列表滚动到对应的列表上面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area"</span> <span class="attr">v-for</span>=<span class="string">"(item,key) of cities"</span> <span class="attr">:key</span>=<span class="string">"key"</span> <span class="attr">:ref</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title border-topbottom"</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item border-bottom"</span> <span class="attr">v-for</span>=<span class="string">"innerItem of item"</span> <span class="attr">:key</span>=<span class="string">"innerItem.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;innerItem.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    letter() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.letter) &#123;</span><br><span class="line">            <span class="keyword">const</span> element = <span class="keyword">this</span>.$refs[<span class="keyword">this</span>.letter][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">this</span>.scroll.scrollToElement(element,<span class="number">400</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>右侧字母表监听滚动事件<br>思路:获得字母A到顶部的距离，当滑动的时候获取手指距离顶部的高度，得到差值之后除以字母之间的高度。这样就知道当前是第几个字母了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touchStatus) &#123;</span><br><span class="line">        <span class="keyword">const</span> startY = <span class="keyword">this</span>.$refs[<span class="string">'A'</span>][<span class="number">0</span>].offsetTop</span><br><span class="line">        <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY - <span class="number">79</span></span><br><span class="line">        <span class="keyword">const</span> index = Math.floor((touchY - startY) / <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.letters.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.letters[index])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述写法是比较耗性能的，因为offsetTop一直在改变。所以使用updated钩子函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">       <span class="keyword">this</span>.startY = <span class="keyword">this</span>.$refs[<span class="string">'A'</span>][<span class="number">0</span>].offsetTop</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>再进行函数节流：延迟16毫秒去执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touchStatus) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.timer) &#123;</span><br><span class="line">            clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY - <span class="number">79</span></span><br><span class="line">            <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor((touchY - <span class="keyword">this</span>.startY) / <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.letters.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.letters[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">16</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在城市选择的时候，点击搜索框，根据用户输入信息实时显示所匹配的信息。</p><p>首先通过父子组件之间传值获取到所有cities的数据，然后通过v-model的双向数据绑定去获取到用户的值，再与cities中的数据进行匹配</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>.cities) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cities[i].forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.spell.indexOf(<span class="keyword">this</span>.keyword) &gt; <span class="number">-1</span> || value.name.indexOf(<span class="keyword">this</span>.keyword) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            result.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.list = result</span><br></pre></td></tr></table></figure><ol start="31"><li><p>熟悉vuex</p><p>因为city.vue与home.vue之间是没有共同父组件的，如果要进行两个组件之间的通信的话，可以使用vue官方推荐的vuex(数据框架)</p><p>为什么需要vuex(设计理念)：</p><p>当我们的项目中有多个页面或者是多个组件之间进行复杂的数据传值很困难的时候，可以将公用的数据放在公共的存储空间去存储，当我们在某一个组件中改变数据的时候，其他组件就可以感知到数据的变化。</p><p>图解：<br>vuex由哪几部分组成：</p><p>state：存储公用数据，需要公用数据的时候，直接调用state就好了</p><pre><code>当我们需要改变数据的时候,我们不能用组件(Vue components)直接改变数据，需要走一个流程：    (1)如果有异步操作、复杂的同步操作、批量的同步操作，我们将异步操作放在actions中，    Vue components -&gt; Actions -&gt; Mutations -&gt; Satate    或者 Vue components -&gt; Mutations -&gt; Satate</code></pre></li><li><p>在项目中使用vuex<br>本应该在main.js中引入vuex的，但是为了更方便管理，我们将其放在新的位置<br>在src目录下新建store文件夹，在该文件夹下新建index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'北京'</span>  <span class="comment">//在city组件和home组件中关联起来的一个值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>然后在main.js中<code>import store from &#39;./store&#39;</code><br>并在根组件中注册store</p><ol start="33"><li>注册store之后，现在开始使用store中的数据</li></ol><p>home.vue中以前home-header组件中的city值是由外部传入进去的，现在我们并不需要后端传值给我们了，而是由前端存储的，所以删掉<code>:city = &quot;city&quot;</code>以及data中的city默认值</p><p>header.vue中之前关于接收city的props也可以删掉了，而使用<code></code>拿到我们刚刚在store中存储的值</p><ol start="34"><li><p>改变state：在城市选择的列表里，点击哪个城市，state值就为哪个城市。</p><p>在list.vue中给热门城市的item绑定一个handleCityClick事件，使用dispatch方法改变actions</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> methods: &#123;</span><br><span class="line">    handleCityClick(city) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p>又因为改变的actions，所以我们需要在刚刚的store/index中添加一个actions，并接收两个参数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeCity(ctx, city)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>actions又通过commit方法来调用mutations去改变公共数据，所以又需要新建一个mutations<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeCity(ctx, city)&#123;</span><br><span class="line">        ctx.commit(<span class="string">'changeCity'</span>,city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">        state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>正常流程是以上步骤，但是由于本项目开发是没有异步数据也没有批量处理同步数据，所以我们可以不走actions这一步，那么做出的改变就是<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list.vue</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    handleCityClick(city) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">        state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在所需点击地方加入对应的方法即可。</p><ol start="35"><li><p>在点击对应的城市完毕时，返回首页内容(vue-router)，使用router.push</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> handleCityClick(city) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vuex的高级使用以及localstorage</p></li></ol><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p><p>当我们选择城市时，在进行一次刷新操作，页面又变成了默认的城市，所以我们需要用localstorage去存储数据，这样子我们下一次进入该网站时也是上一次选择的城市。</p><p>需要改变index.js中的内容(比较简单),直接使用localstorage就可以了<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: localStorage.city || <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      localStorage.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当某一些用户使用隐身模式或者禁用了本地存储功能，为了使代码正常运行，我们需要在所有localstorage外层包裹一层try catch<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">'上海'</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.city) &#123;</span><br><span class="line">    defaultCity = localStorage.city</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        localStorage.city = city</span><br><span class="line">      &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在实际项目中，为了使代码更加规范易懂以及更方便维护，所以我们会再建立state.js与mutations.js,然后将index.js代码拆分出来<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//state.js</span></span><br><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">'上海'</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.city) &#123;</span><br><span class="line">    defaultCity = localStorage.city</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mutations.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  changeCity(state, city) &#123;</span><br><span class="line">    state.city = city</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      localStorage.city = city</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol start="37"><li>mapState<br>由于页面中的<code>this.$store.state.city</code>太长了，所以我们可以使用vuex提供的api<code>mapState</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'HomeHeader'</span>,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState([<span class="string">'city'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样在页面中使用<code></code>即可</p><p>同理{mapMutations}也是先引入再使用，使代码看起来更加简洁。</p><ol start="38"><li>使用keep-alive优化性能<br>由于切换路由的时候，组件都会被重新渲染，导致mouted()钩子会重新执行，所以每一次都会发送请求。</li></ol><p>但是项目中的json数据并无改变，所以我们可以在app.vue中使用keep-alive</p><p>使用keep-alive之后，monted()不会执行，但是actived()会执行，所以需要处理什么，可以放在actived钩子函数之中</p><p>actived():当页面重新被显示的时候执行</p><ol start="39"><li>开发详情页</li></ol><p>在recommend.vue中使用router-link标签来进行页面跳转并进行参数的传递<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/detail' + item.id"</span> <span class="attr">tag</span>=<span class="string">'li'</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="40"><li><p>在src目录下新建common文件夹，放入的是公用的组件,并在webpack.base.config.js中为此目录创建一个别名</p></li><li><p>在vue开发时，需要注意的是解绑全局事件。如果是对某个标签的事件进行绑定，那么将不会造成影响。但是如果事件是window事件的话将会对其他页面造成一定的影响，所以我们需要进行全局事件的解绑<br>当在组件中使用keep-alive时，此组件会多出一个actived()钩子函数，在每次页面展示的时候会执行。与之对应的会有另一个生命钩子函数叫做deactivated(),在页面即将被隐藏的时候执行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> activated() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</span><br><span class="line">&#125;,</span><br><span class="line">deactivated() &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用递归组件：在组件自身调用组件自身<br>数据格式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list: [&#123;</span><br><span class="line">        title: <span class="string">"成人票"</span>,</span><br><span class="line">        children:[&#123;</span><br><span class="line">            title:<span class="string">"成人三馆联票"</span>,</span><br><span class="line">            children:[&#123;</span><br><span class="line">                title:<span class="string">"成人三馆联票-某连锁销售"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            title:<span class="string">"成人五馆联票"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"学生票"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"特惠票"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"儿童票"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) of list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-title border-bottom"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-title-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"item.children"</span> <span class="attr">class</span>=<span class="string">"item-children"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">detail-list</span> <span class="attr">:list</span>=<span class="string">"item.children"</span>&gt;</span><span class="tag">&lt;/<span class="name">detail-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="43"><li>通过不同id值传参给后端</li></ol><p>在index.js中设置动态路由的时候，会将动态的id以参数的形式设置好<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/city'</span>,</span><br><span class="line">      name: <span class="string">'City'</span>,</span><br><span class="line">      component: City</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/detail/:id'</span>,</span><br><span class="line">      name: <span class="string">'Detail'</span>,</span><br><span class="line">      component: Detail</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在发送请求的时候</p><p>传统方式是通过字符串拼接：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  getDetailInfo()&#123;</span><br><span class="line">    axios.get(<span class="string">'/api/detail.json?id='</span>+<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更为直观的传参方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getDetailInfo() &#123;</span><br><span class="line">   axios.get(<span class="string">'/api/detail.json'</span>, &#123;</span><br><span class="line">           params: &#123;</span><br><span class="line">               id: <span class="keyword">this</span>.$route.params.id</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VUE去哪儿网学习笔记2</title>
      <link href="/2018/10/18/vue-note3/"/>
      <url>/2018/10/18/vue-note3/</url>
      
        <content type="html"><![CDATA[<h3 id="vue组件中的细节"><a href="#vue组件中的细节" class="headerlink" title="vue组件中的细节"></a>vue组件中的细节</h3><p>在table中使用tr作为全局组件注入到table时，会发生问题：tr并没有按照预期所想放在tbody中，而是与table同级。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;row&gt;<span class="xml"><span class="tag">&lt;/<span class="name">row</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    Vue.component("</span>row<span class="string">",&#123;</span></span><br><span class="line"><span class="string">        template:"</span>&lt;tr&gt;<span class="keyword">this</span> is tr&lt;<span class="regexp">/tr&gt;"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#root"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;div id="root"&gt;</span></span><br><span class="line"><span class="comment">//     &lt;tr&gt;this is tr&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//     &lt;table&gt;</span></span><br><span class="line"><span class="comment">//         &lt;tbody&gt;&lt;/tbody&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/table&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，可以使用在tr标签中使用vue中的is，这样写既能保证组件的数据时正确的，又能保证符合h5的规范。同ul li</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr is=<span class="string">"row"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子组件的data问题"><a href="#子组件的data问题" class="headerlink" title="子组件的data问题"></a>子组件的data问题</h4><p>在子组件中定义data时必须是一个函数形式 使用return返回数据，而不能是一个对象，因为根组件只会被调用一次，而子组件可能会被不同得地方中调用多次，避免各个地方得同一个子组件中得数据混淆(避免公用数据)，使用函数的return一个对象可以保证子组件拥有独立的数据存储。</p><h4 id="在vue中获取dom"><a href="#在vue中获取dom" class="headerlink" title="在vue中获取dom"></a>在vue中获取dom</h4><p>虽然vue不建议在dom上面操作事件，但是当你需要操作dom的时候，可以使用ref来获取。</p><h4 id="父子组件之间传值问题"><a href="#父子组件之间传值问题" class="headerlink" title="父子组件之间传值问题"></a>父子组件之间传值问题</h4><p>父组件向子组件传递数据是通过属性的方式</p><p>父组件可以向子组件传递参数，但是子组件不能修改父组件中的变量</p><h4 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h4><p>一般父组件向子组件之间进行传值是通过prop的形式，但是当我们需要向子组件传递html文本的时候，发现prop并不好用，如:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;child content=<span class="string">"&lt;p&gt;通过prop向子组件中传值：&lt;/p&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  var child = &#123;</span></span><br><span class="line"><span class="regexp">    template:`</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div v-html = "this.content"&gt;&lt;/</span>div&gt;</span><br><span class="line">            <span class="keyword">this</span> is child</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    `,</span></span><br><span class="line"><span class="regexp">    props:['content']</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el:"#root",</span></span><br><span class="line"><span class="regexp">    components:&#123;</span></span><br><span class="line"><span class="regexp">        child:child</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>此时我们浏览器解析出来的dom结构为：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span>通过prop向子组件中传值：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        this is child</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以发现p标签是被一个div包裹着的，这并不是我们所需要的，而且当我们需要向子组件传递大量html的时候，content中需要写入大量的代码，所以slot(插槽)的作用就可以体现出来了。</p><p>slot：父组件向子组件中优雅的传递dom</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VUE去哪儿网学习笔记1</title>
      <link href="/2018/09/27/vue-note2/"/>
      <url>/2018/09/27/vue-note2/</url>
      
        <content type="html"><![CDATA[<p>知识点：</p><pre><code>1. 使用axios进行ajax数据的获取2. 使用vue-router来进行多页面之间的路由跳转3. 使用vuex各个组件之间的数据共享4. 使用异步组件来优化性能5. 使用stylus编写样式6. 使用递归组件来实现组件调用自身组件7. 各种插件的调用：如swiper8. 自己对公用组件的拆分</code></pre><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="查看vue-js的官方文档"><a href="#查看vue-js的官方文档" class="headerlink" title="查看vue.js的官方文档"></a>查看vue.js的官方文档</h2><ol><li><p>使用vue.js实现todoList的功能，体现了vue的编程思想是MVVM：不改变DOM，而是只操作数据，最后dom随着数据的改变而改变</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"text"</span> v-model = <span class="string">"inputValue"</span>&gt;</span><br><span class="line">       &lt;button @click = <span class="string">"handleBtnClick"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">       &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">           &lt;li v-for="item in list"&gt;</span></span><br><span class="line"><span class="regexp">               &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>li&gt;</span><br><span class="line">       &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           el:<span class="string">"#app"</span>,</span><br><span class="line">           data:&#123;</span><br><span class="line">               list:[],</span><br><span class="line">               inputValue:<span class="string">''</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//  console.log(this.inputValue)</span></span><br><span class="line">                 <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span><br><span class="line">                 <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   </span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用JavaScript实现todolist的功能，体现的是MVP的编程思想：M是模型层（此段代码并没有体现），dom是V层，P(核心层)是js部分，指的是控制器，当点击按钮的时候，控制器里面的代码会执行，负责了所有的逻辑部分，控制器可以调用模型层来发起ajax请求，也可以操作dom改变视图。   Presenter层是View层以及Model层的中转站</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"input"</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul id="list"&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/code.jquery.com/</span>jquery<span class="number">-1.11</span><span class="number">.3</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    function Page() &#123;  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $.extend(Page.prototype,&#123;</span></span><br><span class="line"><span class="string">        init:function()&#123;</span></span><br><span class="line"><span class="string">            this.bindEvents()</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        bindEvents:function()&#123;</span></span><br><span class="line">            var btn = $("#btn");</span><br><span class="line">            btn.on(<span class="string">"click"</span>,$.proxy(<span class="keyword">this</span>.handleBtnClick,<span class="keyword">this</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> inputValue = $(<span class="string">"#input"</span>).val();</span><br><span class="line">            <span class="keyword">var</span> ulElem = $(<span class="string">"#list"</span>)</span><br><span class="line">            ulElem.append(<span class="string">"&lt;li&gt;"</span>+inputValue+<span class="string">"&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="string">"#input"</span>).val(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line">    page.init()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MVP与MVVM设计模式<br>MVVM:  View - ViewModel - Model</p></li></ol><p>Model:负责存储数据<br>View:视图层，负责显示数据<br>ViewModel:vue自带的一层(内置))，不需要我们去关心怎么实现的。<br>当我们使用MVVM设计模式的时候，我们只需要关心view和model。</p><p>在mvp设计模式开发的时候是面向DOM，mvvm设计模式面向数据进行编程，大大的简化了DOM的操作，可以节约代码量</p><ol start="4"><li>前端组件化</li></ol><p>使用Vue.component创建全局组件<br>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"TodoItem"</span>,&#123;</span><br><span class="line">    props:[<span class="string">"content"</span>],</span><br><span class="line">    template:<span class="string">"&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注册局部组件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> TodoItem = &#123;</span><br><span class="line">    props:[<span class="string">"content"</span>],</span><br><span class="line">    template:<span class="string">"&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在根部注册</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#root"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        TodoItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>子组件向父组件传值<br>在子组件的模板中定义事件<code>deleteSelf</code>，并在methods中使用$emit()向外触发事件，并且可以传值;<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在子组件中的methods中</span></span><br><span class="line"> <span class="keyword">var</span> TodoItem = &#123;</span><br><span class="line">    props:[<span class="string">"content"</span>,<span class="string">'index'</span>],</span><br><span class="line">    template:<span class="string">"&lt;li @click='deleteSelf'&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        deleteSelf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'delete'</span>,<span class="keyword">this</span>.index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在局部组件中，动态的监听刚刚在子组件中定义的事件<code>delete</code>，并将其动态的绑定到父组件的事件中 <code>deleteSon</code>,此时需要父组件改变数据，则DOM树会相应改变。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;todo-item v-<span class="keyword">for</span>=<span class="string">"(item,index) in list "</span> </span><br><span class="line">          v-bind:index=<span class="string">"index"</span>  </span><br><span class="line">          v-bind:content=<span class="string">"item"</span>   </span><br><span class="line">          v-on:<span class="keyword">delete</span> = <span class="string">"deleteSon"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/todo-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el:"#root",</span></span><br><span class="line"><span class="regexp">      components:&#123;</span></span><br><span class="line"><span class="regexp">          TodoItem</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      data:&#123;</span></span><br><span class="line"><span class="regexp">          todoValue:"",</span></span><br><span class="line"><span class="regexp">          list:[]</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods:&#123;</span></span><br><span class="line"><span class="regexp">          deleteSon:function(index)&#123;</span></span><br><span class="line"><span class="regexp">              this.list.splice(index,1)</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br></pre></td></tr></table></figure></p><ol start="6"><li>生命周期函数</li></ol><p>生命周期函数就是vue实例在某一个时间点会自动执行的函数,可以直接在vue实例中执行，不需要在methods中定义。</p><p>常用的八种生命周期函数</p><p>(1) beforeCreate:创建vue实例并且实例进行了基础的初始化之后就会执行。<br>(2) created：接着vue会继续处理一些外部的注入以及双向绑定的相关内容，完成之后触发created函数。<br>(3) beforeMount：vue实例中有了数据并定义了template之后，在页面渲染之前会触发beforeMount函数<br>(4) mounted: vue中的dom挂载在页面之后，执行mounted函数<br>(5) beforeDestroy：当destory()方法调用时，当组件即将被销毁时触发该函数。<br>(6) destroyed:当组件完全被销毁时，会触发destroyed<br>(7) beforeUpdate:当数据发生改变的时候，触发beforeUpdate函数。<br>(8) updated:虚拟dom重新渲染之后，执行updated函数</p><ol start="7"><li>computed、watch与methods</li></ol><p>computed与watch具有缓存机制，如果涉及的变量不改变，则不会执行。</p><p>methods是任何变量改变都会触发methods函数。</p><ol start="8"><li>样式绑定</li></ol><p>(1) class的对象绑定<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleColor"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active : isActive&#125;"</span>&gt;样式改变&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            isActive: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2) class的数组绑定</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleColor"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive]"</span>&gt;样式改变&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#root"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isActive: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isActive = <span class="keyword">this</span>.isActive == <span class="string">"active"</span> ? <span class="string">""</span> : <span class="string">"active"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>(3) style的内联样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div :style=<span class="string">"styleObj"</span> @click=<span class="string">"handleColor"</span>&gt;</span><br><span class="line">        hello world</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleObj:&#123;</span><br><span class="line">                color : <span class="string">"black"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.styleObj.color = <span class="keyword">this</span>.styleObj.color == <span class="string">'black'</span> ? <span class="string">"red"</span> : <span class="string">"black"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>(4) style的数组样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div :style=<span class="string">"[styleArr,&#123;fontSize:'20px'&#125;]"</span> @click=<span class="string">"handleColor"</span>&gt;</span><br><span class="line">        hello world</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleArr:&#123;</span><br><span class="line">                color : <span class="string">"black"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.styleArr.color = <span class="keyword">this</span>.styleArr.color == <span class="string">'black'</span> ? <span class="string">"red"</span> : <span class="string">"black"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>v-if 与 v-show<br>v-if 与 v-show 都能控制模板标签是否在页面中显示，但是条件是false时，v-if对应的标签不存在于dom中，而v-show是在标签内加入display：none隐藏dom；所以v-show的性能更高一点，因为他不会频繁的去操作dom。</p></li><li><p>key值：Vue提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key 属性即可。<br>在v-for循环时可以使用key值来提高性能，需注意key尽量唯一且不要用index来标识key。</p></li><li><p>当我们要改变数据操作数组时，必须要用vue已经定义的七种方法来操作数组数据，不能够直接通过数组下标来操作(数据改变但是页面并不会改变)。</p></li></ol><p>数组的变异方法：</p><p>pop push shift unshift splice sort reverse</p><ol start="12"><li>set方法</li></ol><p>因为 Vue 无法探测普通的新增属性，所以直接向vue中数组以及对象中直接添加数据虽然改变了数据但是并不会改变页面中的视图。</p><p>set方法用于向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">for</span> = <span class="string">"(item,key,index) of userInfo"</span>&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            userInfo:&#123;</span><br><span class="line">                name:<span class="string">"张三"</span>,</span><br><span class="line">                age:<span class="string">"23"</span>,</span><br><span class="line">                gender:<span class="string">"male"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.set(vm.userInfo,<span class="string">"address"</span>,<span class="string">"hangzhou"</span>);</span><br><span class="line">    <span class="comment">// vm.set(vm.userInfo,"address","hangzhou");</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>总结：改变数组并实时触发视图更新有三种方法<br>(1) 使用vue提供的数组变异方法</p><p>(2) 直接改变应用数据</p><p>(3) 使用Vue.set()方法或者实例</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用css汇总</title>
      <link href="/2018/09/11/css/"/>
      <url>/2018/09/11/css/</url>
      
        <content type="html"><![CDATA[<h2 id="改变placeholder颜色"><a href="#改变placeholder颜色" class="headerlink" title="改变placeholder颜色"></a>改变placeholder颜色</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Internet Explorer 10-11 */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换背景图改变checkbox样式"><a href="#替换背景图改变checkbox样式" class="headerlink" title="替换背景图改变checkbox样式"></a>替换背景图改变checkbox样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"spot"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>我已阅读并接受《芒果用户服务协议》</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">label</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:left;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">label</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"><span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.spot</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"../images/uncheck.png"</span>) no-repeat;  <span class="comment">/*未选中的样式图片*/</span></span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">12px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>:<span class="number">5</span>;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.spot</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"../images/checked.png"</span>) no-repeat;  <span class="comment">/*选中后的样式图片*/</span></span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随机生成图片验证码</title>
      <link href="/2018/09/11/identifyImg/"/>
      <url>/2018/09/11/identifyImg/</url>
      
        <content type="html"><![CDATA[<p>在vue-cli项目中，点击图片随机产生四位数验证码</p><ol><li><p>封装的identityImg.vue组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s-canvas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"s-canvas"</span> <span class="attr">:width</span>=<span class="string">"contentWidth"</span> <span class="attr">:height</span>=<span class="string">"contentHeight"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"SIdentify"</span>,</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    identifyCode: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//默认注册码</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">"1234"</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    fontSizeMin: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 字体最小值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">25</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    fontSizeMax: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 字体最大值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">35</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    backgroundColorMin: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 验证码图片背景色最小值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">200</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    backgroundColorMax: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 验证码图片背景色最大值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">220</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    dotColorMin: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 背景干扰点最小值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">60</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    dotColorMax: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 背景干扰点最大值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">120</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    contentWidth: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//容器宽度</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">100</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    contentHeight: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//容器高度</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">30</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 生成一个随机数</span></span></span><br><span class="line"><span class="undefined">    randomNum(min, max) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 生成一个随机的颜色</span></span></span><br><span class="line"><span class="undefined">    randomColor(min, max) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> r = <span class="keyword">this</span>.randomNum(min, max);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> g = <span class="keyword">this</span>.randomNum(min, max);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> b = <span class="keyword">this</span>.randomNum(min, max);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">"rgb("</span> + r + <span class="string">","</span> + g + <span class="string">","</span> + b + <span class="string">")"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawPic() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"s-canvas"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">      ctx.textBaseline = <span class="string">"bottom"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制背景</span></span></span><br><span class="line"><span class="javascript">      ctx.fillStyle = <span class="keyword">this</span>.randomColor(</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.backgroundColorMin,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.backgroundColorMax</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="javascript">      ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.contentWidth, <span class="keyword">this</span>.contentHeight);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制文字</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.identifyCode.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.drawText(ctx, <span class="keyword">this</span>.identifyCode[i], i);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.drawLine(ctx);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.drawDot(ctx);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawText(ctx, txt, i) &#123;</span></span><br><span class="line"><span class="javascript">      ctx.fillStyle = <span class="keyword">this</span>.randomColor(<span class="number">50</span>, <span class="number">160</span>); <span class="comment">//随机生成字体颜色</span></span></span><br><span class="line"><span class="undefined">      ctx.font =</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.randomNum(<span class="keyword">this</span>.fontSizeMin, <span class="keyword">this</span>.fontSizeMax) + <span class="string">"px SimHei"</span>; <span class="comment">//随机生成字体大小</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> x = (i + <span class="number">1</span>) * (<span class="keyword">this</span>.contentWidth / (<span class="keyword">this</span>.identifyCode.length + <span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> y = <span class="keyword">this</span>.randomNum(<span class="keyword">this</span>.fontSizeMax, <span class="keyword">this</span>.contentHeight - <span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> deg = <span class="keyword">this</span>.randomNum(<span class="number">-30</span>, <span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 修改坐标原点和旋转角度</span></span></span><br><span class="line"><span class="undefined">      ctx.translate(x, y);</span></span><br><span class="line"><span class="javascript">      ctx.rotate((deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">      ctx.fillText(txt, 0, 0);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 恢复坐标原点和旋转角度</span></span></span><br><span class="line"><span class="javascript">      ctx.rotate((-deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">      ctx.translate(-x, -y);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawLine(ctx) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制干扰线</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        ctx.strokeStyle = <span class="keyword">this</span>.randomColor(<span class="number">100</span>, <span class="number">200</span>);</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.moveTo(</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth),</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight)</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">        ctx.lineTo(</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth),</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight)</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">        ctx.stroke();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawDot(ctx) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制干扰点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        ctx.fillStyle = <span class="keyword">this</span>.randomColor(<span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.arc(</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth),</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight),</span></span><br><span class="line"><span class="undefined">          1,</span></span><br><span class="line"><span class="undefined">          0,</span></span><br><span class="line"><span class="javascript">          <span class="number">2</span> * <span class="built_in">Math</span>.PI</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">        ctx.fill();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="undefined">    identifyCode() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.drawPic();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.drawPic();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在所需页面中使用方式</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"verify-box"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"refreshCode"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"padding:0;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">identify-img</span> <span class="attr">:identifyCode</span>=<span class="string">"identifyCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">identify-img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> identifyImg <span class="keyword">from</span> <span class="string">"@/components/identifyImg/identifyImg"</span>;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      identifyCode: <span class="string">"2343"</span>, <span class="comment">//默认值</span></span><br><span class="line">      identifyCodes: <span class="string">"1234567890"</span>, <span class="comment">//不可变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    identifyImg</span><br><span class="line">  &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">    randomNum(min, max) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span><br><span class="line">    &#125;,</span><br><span class="line">    refreshCode() &#123;</span><br><span class="line">      <span class="keyword">this</span>.identifyCode = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">this</span>.makeCode(<span class="keyword">this</span>.identifyCodes, <span class="number">4</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    makeCode(o, l) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.identifyCode += <span class="keyword">this</span>.identifyCodes[</span><br><span class="line">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.identifyCodes.length)</span><br><span class="line">        ];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>axios传参报错400问题总结</title>
      <link href="/2018/08/09/qs/"/>
      <url>/2018/08/09/qs/</url>
      
        <content type="html"><![CDATA[<p>在使用axios传参的时候，发现只用post方法的时候，默认请求方式为payload，</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180810163720.png" alt=" "></p><p>百度了各种操作之后，试过以下几种方法：</p><ol><li>改变headers</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">headers: &#123;  <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808101637202.png" alt=" "><br>这种操作虽然将payload改为了formData形式，但是依旧报400错</p><ol start="2"><li>Json.stringify()</li></ol><p>请求头问题排除之后，开始研究参数自身问题，使用<code>json.stringify()</code>格式化参数之后，依旧不见效。</p><ol start="3"><li>qs.stringify()</li></ol><p>之前没有接触过qs.stringify，发现他与json.stringify转换成最后的格式并不相同，所以对参数进行qs.stringify(data)之后，即使不设置headers也没有出现问题。成功。</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808101637201.png" alt=" "></p><ol start="4"><li>两者区别</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'hehe'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a) <span class="comment">// "&#123;"a":"hehe","age":10&#125;"</span></span><br><span class="line"></span><br><span class="line">qs.stringify(a) <span class="comment">// name=hehe&amp;age=10</span></span><br></pre></td></tr></table></figure><p>总结：(1)axios在使用post方法出现400问题时，不能直接传递一个js对象，而需要通过qs.stringify()将参数格式转换一下，注意：不能使用json.stringify（）。</p><p>(2)axios请求头是随你的请求方式改变而改变的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue常用的八种生命周期函数</title>
      <link href="/2018/07/20/vueLife/"/>
      <url>/2018/07/20/vueLife/</url>
      
        <content type="html"><![CDATA[<p>生命周期函数就是vue实例在某一个时间点会自动执行的函数,可以直接在vue实例中执行，不需要在methods中定义。</p><p>常用的八种生命周期函数</p><p>(1) beforeCreate:创建vue实例并且实例进行了基础的初始化之后就会执行。<br>(2) created：接着vue会继续处理一些外部的注入以及双向绑定的相关内容，完成之后触发created函数。<br>(3) beforeMount：vue实例中有了数据并定义了template之后，在页面渲染之前会触发beforeMount函数<br>(4) mounted: vue中的dom挂载在页面之后，执行mounted函数<br>(5) beforeDestroy：当destory()方法调用时，当组件即将被销毁时触发该函数。<br>(6) destroyed:当组件完全被销毁时，会触发destroyed<br>(7) beforeUpdate:当数据发生改变的时候，触发beforeUpdate函数。<br>(8) updated:虚拟dom重新渲染之后，执行updated函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        template:<span class="string">"&lt;div&gt;&#123;&#123;test&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            test:<span class="string">"hello world"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'beforeCreate'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"created"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);<span class="comment">//&lt;div id="root"&gt;&lt;/div&gt;</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);<span class="comment">//&lt;div&gt;hello world&lt;/div&gt;</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"mounted"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"beforeDestory"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"destoryed"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"updated"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue知识小结</title>
      <link href="/2018/07/20/vue-tips/"/>
      <url>/2018/07/20/vue-tips/</url>
      
        <content type="html"><![CDATA[<h4 id="computed、watch与methods"><a href="#computed、watch与methods" class="headerlink" title="computed、watch与methods"></a>computed、watch与methods</h4><p>computed与watch具有缓存机制，如果涉及的变量不改变，则不会执行。</p><p>methods是任何变量改变都会触发methods函数。</p><h4 id="v-if-与-v-show"><a href="#v-if-与-v-show" class="headerlink" title="v-if 与 v-show"></a>v-if 与 v-show</h4><p>v-if 与 v-show 都能控制模板标签是否在页面中显示，但是条件是false时，v-if对应的标签不存在于dom中，而v-show是在标签内加入display：none隐藏dom；所以v-show的性能更高一点，因为他不会频繁的去操作dom。</p><h4 id="key值"><a href="#key值" class="headerlink" title="key值"></a>key值</h4><p>Vue提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key 属性即可。</p><p>在v-for循环时可以使用key值来提高性能，需注意key尽量唯一且不要用index来标识key。</p><h4 id="改变数组并实时触发视图更新有三种方法"><a href="#改变数组并实时触发视图更新有三种方法" class="headerlink" title="改变数组并实时触发视图更新有三种方法"></a>改变数组并实时触发视图更新有三种方法</h4><ol><li><p>使用vue提供的数组变异方法</p><p> pop push shift unshift splice sort reverse</p></li><li><p>直接改变引用数据</p></li><li><p>使用Vue.set()方法或者实例</p><p>因为 Vue 无法探测普通的新增属性，所以直接向vue中数组以及对象中直接添加数据虽然改变了数据但是并不会改变页面中的视图。</p><p>set方法用于向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过todolist简单了解vue的mvvm模式</title>
      <link href="/2018/07/19/mvvm/"/>
      <url>/2018/07/19/mvvm/</url>
      
        <content type="html"><![CDATA[<ol><li>使用vue.js实现todoList的功能，体现了vue的编程思想是MVVM：不改变DOM，而是只操作数据，最后dom随着数据的改变而改变</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"text"</span> v-model = <span class="string">"inputValue"</span>&gt;</span><br><span class="line">       &lt;button @click = <span class="string">"handleBtnClick"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">       &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">           &lt;li v-for="item in list"&gt;</span></span><br><span class="line"><span class="regexp">               &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>li&gt;</span><br><span class="line">       &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           el:<span class="string">"#app"</span>,</span><br><span class="line">           data:&#123;</span><br><span class="line">               list:[],</span><br><span class="line">               inputValue:<span class="string">''</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//  console.log(this.inputValue)</span></span><br><span class="line">                 <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span><br><span class="line">                 <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   </span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用JavaScript实现todolist的功能，体现的是MVP的编程思想</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"input"</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul id="list"&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/code.jquery.com/</span>jquery<span class="number">-1.11</span><span class="number">.3</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    function Page() &#123;  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $.extend(Page.prototype,&#123;</span></span><br><span class="line"><span class="string">        init:function()&#123;</span></span><br><span class="line"><span class="string">            this.bindEvents()</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        bindEvents:function()&#123;</span></span><br><span class="line">            var btn = $("#btn");</span><br><span class="line">            btn.on(<span class="string">"click"</span>,$.proxy(<span class="keyword">this</span>.handleBtnClick,<span class="keyword">this</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> inputValue = $(<span class="string">"#input"</span>).val();</span><br><span class="line">            <span class="keyword">var</span> ulElem = $(<span class="string">"#list"</span>)</span><br><span class="line">            ulElem.append(<span class="string">"&lt;li&gt;"</span>+inputValue+<span class="string">"&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="string">"#input"</span>).val(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line">    page.init()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MVP与MVVM设计模式<br>(1) MVP: Model - View - Presenter</p></li></ol><p>M是模型层（上段代码并没有体现）</p><p>V是DOM</p><p>P是View层以及Model层的中转站(js部分)，当点击按钮的时候，控制器里面的代码会执行，负责了所有的逻辑部分，控制器可以调用模型层来发起ajax请求，也可以操作dom改变视图。</p><p>(2) MVVM:  View - ViewModel - Model</p><p>Model:负责存储数据<br>View:视图层，负责显示数据<br>ViewModel:vue自带的一层(内置)，不需要我们去关心怎么实现的。<br>当我们使用MVVM设计模式的时候，我们只需要关心view和model。</p><p>(3) 总结：在mvp设计模式开发的时候是面向DOM进行操作，mvvm设计模式面向数据进行编程，大大的简化了DOM的操作，可以节约代码量，提高代码性能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git学习笔记</title>
      <link href="/2018/07/13/git/"/>
      <url>/2018/07/13/git/</url>
      
        <content type="html"><![CDATA[<h3 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h3><p>版本控制系统分为集中式和分布式。</p><h4 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h4><p>工具：SVN、CVS</p><p>工作模式：先从中央服务器获得最新版本，然后开始写代码，最后把自己的代码再推送给中央服务器。</p><p>缺点：必须联网才可工作（可以是局域网）。</p><h4 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h4><p>工具：git</p><p>工作模式：没有中央服务器，每个人的电脑上都是一个完整的版本库，共同开发的时候，只需将各自的修改推送给彼此就好了。为了更加方便开发者交换修改内容，分布式也会有一台电脑充当中央服务器。</p><p>优点：比集中式更加安全、不比联网也可以工作、强大的分支管理</p><h3 id="安装git–windows"><a href="#安装git–windows" class="headerlink" title="安装git–windows"></a>安装git–windows</h3><p>首先去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网下载</a>按照默认选项安装即可。</p><p>安装完成之后，在Git Bash中’自报家门’：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注： 使用–global参数表示电脑上的所有仓库都用这个配置。</p><h3 id="git操作的基本命令"><a href="#git操作的基本命令" class="headerlink" title="git操作的基本命令"></a>git操作的基本命令</h3><ol><li><p>初始化git： 在所需的文件夹中使用<code>git init</code>命令可以将该文件夹变成git管理仓库。</p></li><li><p>当文件夹新增文件之后 使用<code>git add</code>命令来将文件添加至版本库，如修改了demo1.html：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add demo1.html</span><br></pre></td></tr></table></figure></li><li><p>添加至版本库之后，使用<code>git commit</code>命令将文件提交到仓库。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a demo1 file&quot;</span><br></pre></td></tr></table></figure><p>注： -m参数后面是本次提交时的备注。</p><h3 id="git操作的删除命令"><a href="#git操作的删除命令" class="headerlink" title="git操作的删除命令"></a>git操作的删除命令</h3><ol><li><code>rm demo.html</code>：删除文件</li><li><code>git rm demo.html</code> <code>git commit -m &#39;confirm delete&#39;</code>：确认删除文件</li><li><code>git checkout -- demo.html</code>：将删除的文件恢复到最新版本</li></ol><h3 id="git操作常用命令"><a href="#git操作常用命令" class="headerlink" title="git操作常用命令"></a>git操作常用命令</h3><ol><li><p><code>git  status</code>：查看仓库当前的状态</p></li><li><p><code>git diff demo.html</code> ：查看某文件具体修改了什么内容</p></li><li><p><code>git log</code>：查看从最近到最远的提交日志</p><p> <code>git log --pretty=oneline</code>：查看从最近到最远提交时的备注，可以看到版本号</p></li><li><p><code>git reset --hard HEAD^</code>：使当前版本回归到上一个版本</p><p><code>git reset --hard commit_id</code>：hard后面加特定版本号（前几位就好），则回到特定版本</p></li><li><p><code>git reflog</code>：查看每次操作的命令</p></li></ol><h3 id="工作中遇见的问题及解决方案"><a href="#工作中遇见的问题及解决方案" class="headerlink" title="工作中遇见的问题及解决方案"></a>工作中遇见的问题及解决方案</h3><p>修改或新增文件后，没有<code>git pull -f --all</code></p><p>然后<code>git add .  | git commit -am &quot;init&quot;</code></p><p>导致github上的版本里有文件和本地版本冲突，下面给出冲突原因：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: failed to push some refs to &apos;https://gitee.com/junyaokeji/quanzidaihuan.git&apos;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><p>解决办法是<code>git push -u origin master -f</code>强制覆盖已有的分支（可能会丢失改动）</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo-BlueLake主题</title>
      <link href="/2018/07/12/hexo2/"/>
      <url>/2018/07/12/hexo2/</url>
      
        <content type="html"><![CDATA[<p>好久没写博客了，突然收到阿里云的信息，问我是否需要续费域名，觉得还是继续吧。</p><p>虽然很喜欢之前的maupassant主题，但是发现这个主题出现了某种问题，所以换成了<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a>;</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span></span><br><span class="line">$ npm install hexo-renderer-jade@<span class="number">0.3</span><span class="number">.0</span> --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="配置fileName文件下的-config-yml主要参数，其他地方默认即可"><a href="#配置fileName文件下的-config-yml主要参数，其他地方默认即可" class="headerlink" title="配置fileName文件下的_config.yml主要参数，其他地方默认即可"></a>配置fileName文件下的_config.yml主要参数，其他地方默认即可</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">zlstory</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">个人学习小结</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">zilan</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://zlstory.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span> <span class="string">BlueLake</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">git@github.com:zlstory/zlstory.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h3 id="配置BlueLake目录下的-config-yml文件"><a href="#配置BlueLake目录下的-config-yml文件" class="headerlink" title="配置BlueLake目录下的_config.yml文件"></a>配置BlueLake目录下的_config.yml文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">about/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">recent_posts</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">category</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tag</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#- weibo</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">links</span></span><br><span class="line"></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  number:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date_formats:</span></span><br><span class="line"><span class="attr">  archive:</span> <span class="string">"MM月DD日"</span></span><br><span class="line"><span class="attr">  category:</span> <span class="string">"YYYY/MM/DD"</span></span><br><span class="line"><span class="attr">  post:</span> <span class="string">"MMM DD, YYYY"</span></span><br><span class="line"><span class="attr">  tag:</span> <span class="string">"YYYY/MM/DD"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line">  <span class="string">hexo-generator-sitemap</span></span><br><span class="line">  <span class="string">hexo-generator-baidu-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Local search</span></span><br><span class="line"><span class="attr">local_search:</span> <span class="literal">true</span> <span class="comment">## Use a javascript-based local search engine, true/false.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Cmments</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line"><span class="attr">  duoshuo:</span> <span class="comment">#chaooo ## duoshuo_shortname</span></span><br><span class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></span><br><span class="line"><span class="attr">  livere:</span> <span class="comment">## 来必力(data-uid)</span></span><br><span class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></span><br><span class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></span><br><span class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></span><br><span class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></span><br><span class="line"><span class="attr">  gitment:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span> <span class="comment">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">zlstory</span> <span class="comment">## Your GitHub ID, e.g. username</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">zlstory.github.io</span> <span class="comment">## The repository to store your comments, make sure you're the repo's owner, e.g. imsun.github.io</span></span><br><span class="line"><span class="attr">    client_id:</span> <span class="number">2</span><span class="string">beb49205958bc8a66be</span> <span class="comment">## GitHub client ID, e.g. 75752dafe7907a897619</span></span><br><span class="line"><span class="attr">    client_secret:</span> <span class="number">1e8</span><span class="string">e5079085aa3df305c2e00d0ba45a326992962</span> <span class="comment">## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Share</span></span><br><span class="line"><span class="attr">baidu_share:</span> <span class="literal">false</span> <span class="comment">## 百度分享</span></span><br><span class="line"><span class="attr">JiaThis_share:</span> <span class="comment">##true ##JiaThis分享</span></span><br><span class="line"><span class="attr">duoshuo_share:</span> <span class="comment">#true ##true 多说分享必须和多说评论一起使用。</span></span><br><span class="line"><span class="attr">addToAny_share:</span> <span class="comment"># AddToAny share. Empty list hides. List items are service name at url. For ex: email for '&lt;a href="https://www.addtoany.com/add_to/email?linkurl=...'</span></span><br><span class="line"><span class="comment">#  - twitter</span></span><br><span class="line"><span class="comment">#  - baidu</span></span><br><span class="line"><span class="comment">#  - facebook</span></span><br><span class="line"><span class="comment">#  - google_plus</span></span><br><span class="line"><span class="comment">#  - linkedin</span></span><br><span class="line"><span class="comment">#  - email</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span>  <span class="string">UA-111606593-1</span> <span class="comment">## Your Google Analytics tracking id, e.g. UA-42025684-2</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="number">68</span><span class="string">cb98bd2a475f71ad8508d14ad906ba</span> <span class="comment">## Your Baidu Analytics tracking id, e.g. 1006843030519956000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Miscellaneous</span></span><br><span class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> <span class="comment">## If you want to show the count of categories in the sidebar widget please set the value to true.</span></span><br><span class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">true</span> <span class="comment">## Set to true to enable widgets on small screens.</span></span><br><span class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span> <span class="comment">## If you want to use Busuanzi page views please set the value to true.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># About page</span></span><br><span class="line"><span class="attr">about:</span></span><br><span class="line"><span class="attr">  photo_url:</span> <span class="string">/img/avatar.png</span> <span class="comment">## Your photo e.g. http://obzf7z93c.bkt.clouddn.com/themeauthor.jpg</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">  - label:</span> <span class="string">email</span></span><br><span class="line"><span class="attr">    url:</span> <span class="comment">## Your email with mailto: e.g.  mailto:zhenggchaoo@gmail.com</span></span><br><span class="line"><span class="attr">    title:</span> <span class="comment">## Your email e.g.  zhenggchaoo@gmail.com</span></span><br><span class="line"><span class="attr">  - label:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">    url:</span>  <span class="attr">https://github.com/zlstory</span> <span class="comment">## Your github'url e.g.  https://github.com/chaooo</span></span><br><span class="line"><span class="attr">    title:</span> <span class="string">zlstory</span> <span class="comment">## Your github'name e.g.  chaooo</span></span><br></pre></td></tr></table></figure><p>我用的是本地搜索，即self_search:true,需要在fileName中安装一个jq的插件， npm install hexo-generator-search –save</p><h3 id="将hexo与github相连接"><a href="#将hexo与github相连接" class="headerlink" title="将hexo与github相连接"></a>将hexo与github相连接</h3><p>就是为了hexo d的时候，能直接更新github中的内容，首先<a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank" rel="noopener">配置ssh</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>然后一直按enter，然后生成三个文件，默认目录是C:\Users\Administrator.ssh，将id_rsa.pub放在github的SSH和GPG密钥中。再配置git的用户名和密码<br>在使用hexo -d之前 要安装一个插件：npm install hexo-deployer-git –save</p><p>ssh是可以绑定多个的。</p><h3 id="域名的绑定"><a href="#域名的绑定" class="headerlink" title="域名的绑定"></a>域名的绑定</h3><p>新建一个CNAME文件，内容就是<a href="http://www.zlstory.com,放在source文件夹下，不能放在fileName文件夹中，否则hexo" target="_blank" rel="noopener">www.zlstory.com,放在source文件夹下，不能放在fileName文件夹中，否则hexo</a> d的时候会消失，神奇。还有要安装rss插件，虽然我不知道有什么用这个东西，虽然有人解释过，但是他出现了，那就装一下吧：npm install hexo-generator-feed –save，然后再theme的配置文件中加入rss: /atom.xml。</p><p>备注：此网址更详细的介绍了 BlueLake主题的配置：<a href="http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git学习笔记</title>
      <link href="/2018/04/17/vue-base/"/>
      <url>/2018/04/17/vue-base/</url>
      
        <content type="html"><![CDATA[<h3 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h3><p>版本控制系统分为集中式和分布式。</p><h4 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h4><p>工具：SVN、CVS</p><p>工作模式：先从中央服务器获得最新版本，然后开始写代码，最后把自己的代码再推送给中央服务器。</p><p>缺点：必须联网才可工作（可以是局域网）。</p><h4 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h4><p>工具：git</p><p>工作模式：没有中央服务器，每个人的电脑上都是一个完整的版本库，共同开发的时候，只需将各自的修改推送给彼此就好了。为了更加方便开发者交换修改内容，分布式也会有一台电脑充当中央服务器。</p><p>优点：比集中式更加安全、不比联网也可以工作、强大的分支管理</p><h3 id="安装git–windows"><a href="#安装git–windows" class="headerlink" title="安装git–windows"></a>安装git–windows</h3><p>首先去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网下载</a>按照默认选项安装即可。</p><p>安装完成之后，在Git Bash中’自报家门’：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注： 使用–global参数表示电脑上的所有仓库都用这个配置。</p><h3 id="git操作的基本命令"><a href="#git操作的基本命令" class="headerlink" title="git操作的基本命令"></a>git操作的基本命令</h3><ol><li><p>初始化git： 在所需的文件夹中使用<code>git init</code>命令可以将该文件夹变成git管理仓库。</p></li><li><p>当文件夹新增文件之后 使用<code>git add</code>命令来将文件添加至版本库，如修改了demo1.html：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add demo1.html</span><br></pre></td></tr></table></figure></li><li><p>添加至版本库之后，使用<code>git commit</code>命令将文件提交到仓库。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a demo1 file&quot;</span><br></pre></td></tr></table></figure><p>注： -m参数后面是本次提交时的备注。</p><h3 id="git操作的删除命令"><a href="#git操作的删除命令" class="headerlink" title="git操作的删除命令"></a>git操作的删除命令</h3><ol><li><code>rm demo.html</code>：删除文件</li><li><code>git rm demo.html</code> <code>git commit -m &#39;confirm delete&#39;</code>：确认删除文件</li><li><code>git checkout -- demo.html</code>：将删除的文件恢复到最新版本</li></ol><h3 id="git操作常用命令"><a href="#git操作常用命令" class="headerlink" title="git操作常用命令"></a>git操作常用命令</h3><ol><li><p><code>git  status</code>：查看仓库当前的状态</p></li><li><p><code>git diff demo.html</code> ：查看某文件具体修改了什么内容</p></li><li><p><code>git log</code>：查看从最近到最远的提交日志</p><p> <code>git log --pretty=oneline</code>：查看从最近到最远提交时的备注，可以看到版本号</p></li><li><p><code>git reset --hard HEAD^</code>：使当前版本回归到上一个版本</p><p><code>git reset --hard commit_id</code>：hard后面加特定版本号（前几位就好），则回到特定版本</p></li><li><p><code>git reflog</code>：查看每次操作的命令</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6中一不注意就掉进去的那些坑</title>
      <link href="/2018/04/11/es6_demos/"/>
      <url>/2018/04/11/es6_demos/</url>
      
        <content type="html"><![CDATA[<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>1.使用let、const与var的区别为前两者声明的变量不会被提升到作用域顶部</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span> value2) <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    alert(<span class="keyword">typeof</span> value1) <span class="comment">//undefined</span></span><br><span class="line">    alert(<span class="keyword">typeof</span> value2) <span class="comment">//value2 is not defined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value1 = <span class="number">111</span></span><br><span class="line">    <span class="keyword">let</span> value2 = <span class="number">222</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用const声明时，不允许修改绑定，但是允许修改绑定的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name : <span class="string">"Crystal"</span>,</span><br><span class="line">    age : <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改绑定的值</span></span><br><span class="line">person.name = <span class="string">"小懒"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接修改绑定会抛出语法错误</span></span><br><span class="line">person = &#123;</span><br><span class="line">    name : <span class="string">"Crystal"</span>,</span><br><span class="line">    age : <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//VM60:1 Uncaught TypeError: Assignment to constant variable. at &lt;anonymous&gt;:1:8</span></span><br></pre></td></tr></table></figure><p>3.在循环中创建的函数,使用var时，我们期望着输出0-9，但是最后只输出10。因为循环中的每次迭代都同时共享着变量i，循环内部引用的都是相同变量。而使用let每次循环都会创建一个新的i。此种情况下使用const时将在第二次赋值时报错。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)  <span class="comment">//0-9</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)  <span class="comment">//10</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i)()) <span class="comment">//结果为：0-9  使用闭包解决</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.var会覆盖已存在的全局变量，let与const不会覆盖全局变量，只能遮盖它;var创建新的全局变量时会将此作为window对象的属性，let与const不会将声明的变量添加为全局对象的属性,即不会破坏全局作用域。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Number</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>)<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.Number)<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Number</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>)<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.Number)<span class="comment">//ƒ Number() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>### </p>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VUE实战笔记1</title>
      <link href="/2018/01/16/vue-note1/"/>
      <url>/2018/01/16/vue-note1/</url>
      
        <content type="html"><![CDATA[<h3 id="VUE核心功能"><a href="#VUE核心功能" class="headerlink" title="VUE核心功能"></a>VUE核心功能</h3><p>vue的核心功能是数据双向绑定</p><p>el用于指定一个页面中已经存在的DOM元素来挂载Vue实例，可以是html节点，也可以是CSS选择器。</p><p>通过VUE实例的data选项，可以声明应用内需要双向绑定的数据。建议所有会用到的数据都预先在data中声明，这样不至于将数据散落在业务逻辑中，难以维护。</p><p> VUE常见生命周期钩子<br>    created：实例创建完成之后调用，已经完成了数据的观测，但是尚未挂载，即$el不能用，需要初始化处理一些数据时比较有用<br>    mounted: el挂载到实例之后调用，一般第一个业务逻辑会在这里开始<br>    beforeDestroy：实例销毁之前调用，主要是解绑一些实用addEventListener监听的事件等</p><p>钩子函数中的this指向的是调用它的Vue实例.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:app,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            a:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el) &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123; &#123; something &#125; &#125;&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>在 { { } } 插值的尾部添加一个管道符 | 可对数据进行过滤，经常用于格式化文本，比如字母大小写、货币千位使用逗号分离等。过滤的规则是自定义的。</p><p>过滤器可以串联，也可以接受参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message | filterA(<span class="string">'arg1'</span>,<span class="string">'arg2'</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>例如对时间进行格式化处理：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'#app'</span>&gt;</span><br><span class="line">    &#123;&#123; date | formatDate &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    在小于10之前补0</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    var padDate = function(value)&#123;</span></span><br><span class="line"><span class="regexp">        return value &lt; 10 ? '0' + value : value;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            date:new Date()</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        filters:&#123;</span></span><br><span class="line"><span class="regexp">            formatDate:function(value)&#123;</span></span><br><span class="line"><span class="regexp">                var date = new Date(value);</span></span><br><span class="line"><span class="regexp">                var year =date.getFullYear();</span></span><br><span class="line"><span class="regexp">                var month =padDate(date.getMonth()+1);</span></span><br><span class="line"><span class="regexp">                var day =padDate(date.getDate());</span></span><br><span class="line"><span class="regexp">                var hours =padDate(date.getHours());</span></span><br><span class="line"><span class="regexp">                var minutes =padDate(date.getMinutes());</span></span><br><span class="line"><span class="regexp">                var second =padDate(date.getSeconds());</span></span><br><span class="line"><span class="regexp">                return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        mounted()&#123;</span></span><br><span class="line"><span class="regexp">            var _this = this;声明一个变量只想VUE实例的this，保证作用域一致</span></span><br><span class="line"><span class="regexp">            this.timer = setInterval(function()&#123;</span></span><br><span class="line"><span class="regexp">                _this.date = new Date()</span></span><br><span class="line"><span class="regexp">            &#125;,1000);</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        beforeDestroy:function()&#123;</span></span><br><span class="line"><span class="regexp">            if(this.timer)&#123;</span></span><br><span class="line"><span class="regexp">                clearInteral(this.timer)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令的作用就是当其表达式的值改变时，相应的将某些行为应用到DOM上</p><p>数据驱动是Vue.js的核心理念，所以不是万不得已的情况下，不要主动去操作DOM，只需维护好数据,DOM的事Vue自己本身会处理好。</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>v-bind的基本用途是动态更新HTML元素上的属性，当数据变化时，就会重新渲染</p><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>v-on:用来绑定事件监听器，事件的方法都是以函数的形式写在Vue实例的methods属性中，方法内的this也是指向Vue实例。</p><p>Vue将methods里的方法也代理了，所以可以像访问Vue数据那样来调用方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">"#app"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">if</span> = <span class="string">"show"</span>&gt;hello world &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button v-on:click = "handleClose"&gt;</span></span><br><span class="line"><span class="regexp">        点击隐藏</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            show:true</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods:&#123;</span></span><br><span class="line"><span class="regexp">            handleClose()&#123;</span></span><br><span class="line"><span class="regexp">                this.close(); /</span><span class="regexp">/可以像访问Vue数据那样来调用方法</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            close()&#123;</span></span><br><span class="line"><span class="regexp">                this.show = false;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>语法糖是指在不影响功能的情况下，添加某种方法实现同样的效果，从而方便程序开发。</p><p>比如v-bind简写为一个冒号:,v-on简写为一个@</p><h3 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h3><p>模板内的表达式常用于简单的运算，但是当其过长或逻辑复杂时，会变得难以维护，所以需要计算属性来解决此问题。所有的计算属性都是以函数的形式写在Vue实例中computed选项内，最终返回的是计算后的结果。</p><p>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只需要最后返回一个结果就可以了。如：通过计算展示购物车中的两个包裹的物品总价</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'app'</span>&gt;商品总价为：&#123;&#123; prices &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            package1:[</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    name:'iphone7',</span></span><br><span class="line"><span class="regexp">                    price:7000,</span></span><br><span class="line"><span class="regexp">                    count:2</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                 &#123;</span></span><br><span class="line"><span class="regexp">                    name:'iphone8',</span></span><br><span class="line"><span class="regexp">                    price:5888,</span></span><br><span class="line"><span class="regexp">                    count:1</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            ],</span></span><br><span class="line"><span class="regexp">            package2:[</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    name:'apple',</span></span><br><span class="line"><span class="regexp">                    price:3,</span></span><br><span class="line"><span class="regexp">                    count:3</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    name:'banana',</span></span><br><span class="line"><span class="regexp">                    price:1.5,</span></span><br><span class="line"><span class="regexp">                    count:4</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            ]</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        computed:&#123;</span></span><br><span class="line"><span class="regexp">            price()&#123;</span></span><br><span class="line"><span class="regexp">                var prices = 0;</span></span><br><span class="line"><span class="regexp">                for(var i = 0; i &lt; this.package1.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">                    price += this.package1[i].price * this.package1[i].count</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                for(var i = 0; i &lt; this.package2.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">                    price += this.package2[i].price * this.package2[i].count</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                return prices;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>每一个计算属性都包含一个getter与setter，上述例子只是计算属性的默认用法，用了getter来获取。</p><p>setter函数：当手动修改计算属性的值就像修改一个普通数据一样，会触发setter函数，执行一些自定义的操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">"app"</span>&gt;姓名：&#123;&#123; fullName &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            firstName:"Jack",</span></span><br><span class="line"><span class="regexp">            lastName:"Green"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        computed:&#123;</span></span><br><span class="line"><span class="regexp">            fullName:&#123;</span></span><br><span class="line"><span class="regexp">                get()&#123;</span></span><br><span class="line"><span class="regexp">                    return this.firstName + ' ' + this.lastName;</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                set(newValue)&#123;</span></span><br><span class="line"><span class="regexp">                    var names = newValue.split(' ');</span></span><br><span class="line"><span class="regexp">                    this.firstName = names[o];</span></span><br><span class="line"><span class="regexp">                    this.lastName = names[names.length - 1];</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     /</span><span class="regexp">/ use setter</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    app.fullName = 'John Doe';</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>计算属性的两个小技巧：</p><p>1 计算属性可以依赖其他计算属性</p><p>2 计算属性不仅可以依赖当前Vue实例的数据，还可以依赖其他实例的数据</p><p>computed与methods不同点：有些功能使用methods定义函数，也可以实现该功能，那为什么还要使用计算属性呢？原因是因为计算书型是基于依赖缓存的，即：当一个计算属性所依赖的数据发生变化时，才会重新取值。而methods不同，只要重新渲染就会被调用，函数就会被执行。</p><p>总结：当遍历大数组和做大量计算时，应当使用计算属性，除非是你不希望得到缓存。 </p><h3 id="绑定class的几种方式"><a href="#绑定class的几种方式" class="headerlink" title="绑定class的几种方式"></a>绑定class的几种方式</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>给class设置一个对象，可以动态的切换class</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : <span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;'active':isActive,'error':isError&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            isActive: true,</span></span><br><span class="line"><span class="regexp">            isError: false</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>当需要应用多个class时，可以使用数组语法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : <span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;isActive,isError&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            isActive: 'active',</span></span><br><span class="line"><span class="regexp">            isError: 'error'</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>在写复用组件时，如果表达式较长或者逻辑较为复杂，应优先使用计算属性动态设置类名。</p><h4 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h4><p>当使用内联样式时，css属性需要使用驼峰命名或者短横分隔命名。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : style=<span class="string">"&#123;'color':color,'fontSize':size+'px'&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            color: 'green',</span></span><br><span class="line"><span class="regexp">            fontSize: 16</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>但是一般不会使用内联样式，都是写在data中或者computed里。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : style=<span class="string">"styles"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">           styles:&#123;</span></span><br><span class="line"><span class="regexp">               color: "blue",</span></span><br><span class="line"><span class="regexp">               fontSize: 14+"px"</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>注意：使用:style时，vue.js会自动给特殊的css属性名称增加前缀，如transform。</p><h3 id="vue基本指令"><a href="#vue基本指令" class="headerlink" title="vue基本指令"></a>vue基本指令</h3><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>v-cloak与css结合可以解决当网速慢、vue.js未加载完成、屏幕出现闪动的问题。</p><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span> v-cloak&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:'#app',</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            message:" hello world"</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>v-cloak是一个解决初始化慢导致页面闪动的最佳实践，但是在有webpack与vue-router的大项目中，项目是通过路由挂载不同组件时，则不需要v-cloak。</p><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>将元素或者组件只渲染一次，渲染过后，包括子节点，都不再随着数据的改变而改变，将被视为静态内容，此指令在业务中很少使用，但是当你需要进一步优化性能时，可能会用到v-once。</p><h3 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h3><h4 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h4><p>这三个表达式的顺序不能改变：v-if后跟v-else-if(可省略)后跟v-else,表达式为真时，当前组件以及所有子节点会被渲染，为假时则会被移除。</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>改变的是元素的display属性。v-show不能在\<template>上使用。</template></p><p>v-if更适合条件不经常改变的场景，v-show适用于频繁切换条件。</p><h3 id="列表渲染指令-v-for"><a href="#列表渲染指令-v-for" class="headerlink" title="列表渲染指令 v-for"></a>列表渲染指令 v-for</h3><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p>v-for需要结合in来使用，并且支持一个可选参数作为当前项的索引。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">"(book,index) in books "</span>&gt;&#123;&#123;index&#125;&#125;---&#123;&#123;book&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><p>遍历对象属性的时候，支持两个可选参数：键名和索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">"(value,key,index) in users "</span>&gt;&#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组更新"><a href="#数组更新" class="headerlink" title="数组更新"></a>数组更新</h3><h4 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h4><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h4 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h4><ul><li>filter()</li><li>concat()</li><li>slice()</li></ul><p>与JavaScript数组方法不同的是，vue中使用arr[2]=1,或者arr.length=1时并不会触发视图的更新，如果需要实现同样的效果时，可以使用vue的set方法，或者是$set。</p><h4 id="过滤与排序"><a href="#过滤与排序" class="headerlink" title="过滤与排序"></a>过滤与排序</h4><p>不需要改变原数组，借助计算属性返回过滤或者排序后的数组。</p><h3 id="方法与事件"><a href="#方法与事件" class="headerlink" title="方法与事件"></a>方法与事件</h3><h4 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h4><p>@click的表达式可以是直接的JavaScript语句，也可以是在VUE实例中methods选项中的一个函数名。</p><p>在@click调用的函数名后可加可不加()，使用$event可以访问原生DOM事件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id = <span class="string">"#app"</span>&gt;</span><br><span class="line">     &lt;p v-<span class="keyword">if</span> = <span class="string">"show"</span>&gt;hello world &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">     &lt;button v-on:click = "handleClose"&gt;</span></span><br><span class="line"><span class="regexp">         点击隐藏</span></span><br><span class="line"><span class="regexp">     &lt;/</span>button&gt;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">         el:"#app",</span></span><br><span class="line"><span class="regexp">         data:&#123;</span></span><br><span class="line"><span class="regexp">             show:true</span></span><br><span class="line"><span class="regexp">         &#125;,</span></span><br><span class="line"><span class="regexp">         methods:&#123;</span></span><br><span class="line"><span class="regexp">             handleClose()&#123;</span></span><br><span class="line"><span class="regexp">                 this.close(); /</span><span class="regexp">/可以像访问Vue数据那样来调用方法</span></span><br><span class="line"><span class="regexp">             &#125;,</span></span><br><span class="line"><span class="regexp">             close()&#123;</span></span><br><span class="line"><span class="regexp">                 this.show = false;</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">     &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>在事件绑定的后面用圆点加一个后缀名来使用修饰符。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阻止事件冒泡</span></span><br><span class="line">&lt;a @ckick.stop = <span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事件不再重载页面</span></span><br><span class="line">&lt;form @submit.prevent = <span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加事件侦听器时使用事件捕获模式</span></span><br><span class="line">&lt;div @click.capture = <span class="string">"handle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自身触发(不在子元素触发)</span></span><br><span class="line">&lt;div @click.self = <span class="string">"handle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//事件只触发一次</span></span><br><span class="line">&lt;div @click.once = <span class="string">"handle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听键盘事件</span></span><br><span class="line">&lt;div @keyup<span class="number">.13</span> = <span class="string">"submit"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="表单与v-model"><a href="#表单与v-model" class="headerlink" title="表单与v-model"></a>表单与v-model</h3><p>Vue的核心功能就是实现数据绑定，vue提供平v-model用于在表单中进行双向数据绑定。</p><p>如希望实时更新，可以使用@input事件来代替v-model。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"message"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> @input = <span class="string">"handleInput"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&#123;&#123;message1&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">         el:"#app",</span></span><br><span class="line"><span class="regexp">         data:&#123;</span></span><br><span class="line"><span class="regexp">           message:'',</span></span><br><span class="line"><span class="regexp">           message1:''</span></span><br><span class="line"><span class="regexp">         &#125;,</span></span><br><span class="line"><span class="regexp">         computed:&#123;</span></span><br><span class="line"><span class="regexp">             handleInput(e)&#123;</span></span><br><span class="line"><span class="regexp">                 this.message1 = e.target.value</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">     &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>当只有一个radio时，可以使用v-bind，不需要使用v-model</p><p>当radio组合使用实现互斥选择时，需要v-model配合value实现，不需要使用相同name属性值</p><p>当checkbox使用v-model时，绑定的是一个布尔值,v-model=”checked”</p><p>当checkbox组合使用v-model时，选中的value值 会自动push到数组中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">        &lt;p&gt;单选框使用v-model：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&lt;input type="radio" v-model="picked" value="html" id="html"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;lable for="html"&gt;HTML&lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">value</span>=<span class="string">"js"</span> <span class="attr">id</span>=<span class="string">"js"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"js"</span>&gt;</span>JAVAScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">value</span>=<span class="string">"css"</span> <span class="attr">id</span>=<span class="string">"css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;选中input的value值是：&#123;&#123;picked&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;复选框使用v-model：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">         &lt;p&gt;&lt;input type="checkbox" v-model="checked" value="html" id="html"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;lable for="html"&gt;HTML&lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"js"</span> <span class="attr">id</span>=<span class="string">"js"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"js"</span>&gt;</span>JAVAScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"css"</span> <span class="attr">id</span>=<span class="string">"css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;选中input的value值是：&#123;&#123;checked&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">         el:"#app",</span></span><br><span class="line"><span class="regexp">         data:&#123;</span></span><br><span class="line"><span class="regexp">            picked:'html',</span></span><br><span class="line"><span class="regexp">            checked:['html','js']</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">     &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>v-model也可以绑定动态的value值，即在input中使用v-bind:value</p><h4 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h4><ul><li><p>v-model.lazy：不是实时改变，而是失焦或者按回车时才会更新</p></li><li><p>v-model.number：平时输入框输入数字时，value是string类型，使用此修饰符可以让其改为number类型。</p></li><li><p>v-model.trim：自动过滤首尾空格</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>居中问题</title>
      <link href="/2018/01/15/center/"/>
      <url>/2018/01/15/center/</url>
      
        <content type="html"><![CDATA[<p>在有浮动时，使用定位解决div居中问题。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        overflow: hidden; position:</span></span><br><span class="line"><span class="undefined">        relative;padding-bottom: 10px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="undefined">        clear: left;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span>: 50%;<span class="comment">/*整个分页向右边移动宽度的50%*/</span></span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0 5px;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">right</span>: 50%;<span class="comment">/*将每个分页项向左边移动宽度的50%*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>: <span class="number">70px</span>;<span class="attribute">height</span>: <span class="number">40px</span>;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;<span class="attribute">width</span>: <span class="number">30px</span>;<span class="attribute">height</span>: <span class="number">30px</span>;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;<span class="attribute">width</span>: <span class="number">50px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VSCode配置</title>
      <link href="/2017/12/26/vscode/"/>
      <url>/2017/12/26/vscode/</url>
      
        <content type="html"><![CDATA[<p>最近我的sublime好像傻了一样，准备将编辑器换成VSCode了，工欲善其事必先利其器，总结一下VSCode的所需插件以及常用快捷键，下次换电脑的时候可以直接安装了。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>VSC所有插件地址 <a href="https://marketplace.visualstudio.com/VSCode" target="_blank" rel="noopener">插件</a> <code>https://marketplace.visualstudio.com/VSCode</code></p><h3 id="主题插件"><a href="#主题插件" class="headerlink" title="主题插件"></a>主题插件</h3><p>颜色主题：One Dark Pro</p><p>文件图标主题：vscode-icons</p><p>备注：重启有效</p><p>Monokai-Midnight(好看是好看,但是在md中语法不高亮。)</p><h3 id="HCJ相关插件"><a href="#HCJ相关插件" class="headerlink" title="HCJ相关插件"></a>HCJ相关插件</h3><p>初级的H5代码片段以及提示：HTML Snippets</p><p>html中关于CSS的class提示： IntelliSense for CSS class names</p><p>关于ES6的快捷键：JavaScript (ES6) code snippets</p><p>提示文件路径: Path Autocomplete</p><p>CSS中代码提示：HTML CSS Support</p><p>支持sass：sass</p><p>支持stylus：language-stylus</p><p>自动修改相匹配的HTML标签: Auto Rename Tag</p><p>颜色高亮显示：Color Highlight</p><p>package.json文件显示模块当前版本和最新版本: Version Lens</p><p>单词拼写检查：Spell Checker(这个插件太恶心了，还是不要装了，只支持英文，导致我写中文md文档时全是红色波浪下划线，惹不起惹不起)</p><p>格式化文件：beauty(可自定义快捷键，在文章底部)</p><p>浏览器预览页面：open In Browser</p><p>jq自动提示：jQuery Code Snippets</p><h3 id="VUE相关插件"><a href="#VUE相关插件" class="headerlink" title="VUE相关插件"></a>VUE相关插件</h3><p>格式化VUE文件：wpy-beautify</p><p>VUE代码高亮：Vetur</p><p>安装完成之后在 设置- 用户设置 中加入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为指定的语法定义配置文件或使用带有特定规则的配置文件。</span></span><br><span class="line"><span class="string">"emmet.syntaxProfiles"</span>: &#123;</span><br><span class="line">    <span class="string">"vue-html"</span>: <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MD插件"><a href="#MD插件" class="headerlink" title="MD插件"></a>MD插件</h3><p>MD文档格式检查: markdownlint(感觉离卸载不远了，跟lint在一起的都不是什么好用的东西)</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>VSCode的所有快捷键可以在 文件-首选项-键盘快捷方式 中查看，以下是常用快捷键。</p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>Ctrl + N 新建文件</p><p>Ctrl + R 打开最近的项目文件夹</p><p>Ctrl + P 打开本项目中的文件</p><p>Ctrl + o 在windows中打开文件</p><p>Ctrl + K Ctrl + o 在windows中打开文件夹</p><p>Ctrl + K R 打开文件所在windows中的目录位置(英文输入法状态下)</p><p>Alt + B 在浏览器中打开文件(所需插件open In Browser)</p><h3 id="文件中查找"><a href="#文件中查找" class="headerlink" title="文件中查找"></a>文件中查找</h3><p>Ctrl + G可以让你导航到文件中的特定行</p><p>Ctrl + Shift + F 在文当前工作目录所有文件中查找</p><p>Ctrl + Shift + H 在文当前工作目录所有文件中查找替换</p><p>Ctrl + F 在当前文件中查找</p><p>Ctrl + H 在当前文件中查找替换</p><p>Ctrl + Shift + O 查找文件中的特定符号</p><h3 id="切换文件"><a href="#切换文件" class="headerlink" title="切换文件"></a>切换文件</h3><p>Ctrl + Shift + Tab 切换打开的文件</p><p>Ctrl + PageDown转到右侧的编辑器。</p><p>Ctrl + PageUp转到左侧的编辑器。</p><p>Ctrl + Shift + Tab 可切换打开的文件</p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>Ctrl + F4 关闭活动的编辑器。</p><p>Ctrl + K + W 关闭编辑组中的所有编辑器。</p><p>Ctrl + B 切换显示左边侧边栏</p><h3 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h3><p>Ctrl + Shift + B 格式化HCJ文件(个人自定义快捷键，所需插件beauty，并不会删除文件中多余的空白行)</p><p>Ctrl + Shift + 6 格式化vue文件(所需插件wpy-beautify)</p><p>Alt + Shift + F 格式化文件(VSC自带快捷键)</p><h3 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h3><p>Ctrl + / 注释</p><p>Ctrl + Alt + / 多行注释(自定义)</p><p>Ctrl + \ 将活动编辑器分成两部分。</p><p>Ctrl + Shift + P可以访问VS Code的所有功能，包括最常见操作的键盘快捷键。</p><p>Ctrl + Shift + [ 折叠</p><p>Ctrl + Shift + ] 展开</p><p>Ctrl + Shift + K 删除当前行</p><p>Ctrl + Shift + C 打开CMD命令行</p><h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><p>文件-首选项-键盘快捷方式-keybindings.json中：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">//ctrl+shift+/多行注释</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"ctrl+alt+/"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.blockComment"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">&#125;,</span><br><span class="line">//快捷键ctrl+shift+b格式化</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+b"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"HookyQR.beautify"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>互联网常见名词解释</title>
      <link href="/2017/12/18/seo/"/>
      <url>/2017/12/18/seo/</url>
      
        <content type="html"><![CDATA[<p>网站三要素：服务器、主机、空间</p><h3 id="服务器知识"><a href="#服务器知识" class="headerlink" title="服务器知识"></a>服务器知识</h3><h4 id="服务器概念"><a href="#服务器概念" class="headerlink" title="服务器概念"></a>服务器概念</h4><p>放在机房提供公共性或者商业性服务的电脑就称之为服务器，服务器需要24小时运行。</p><h4 id="服务器分类"><a href="#服务器分类" class="headerlink" title="服务器分类"></a>服务器分类</h4><p>按照服务器的外观可以分为台式服务器和机架式服务器，机架式服务器包括普通机架式和刀片式服务器</p><h4 id="服务器系统概念"><a href="#服务器系统概念" class="headerlink" title="服务器系统概念"></a>服务器系统概念</h4><p>定义在服务器上的操作系统</p><h4 id="服务器系统分类"><a href="#服务器系统分类" class="headerlink" title="服务器系统分类"></a>服务器系统分类</h4><p>window 、Linux、Unix</p><h4 id="服务器对网站的重要性"><a href="#服务器对网站的重要性" class="headerlink" title="服务器对网站的重要性"></a>服务器对网站的重要性</h4><ol><li><p>确保网站持续稳定：网站24小时都可以访问</p><p> 影响因素：硬件配置、操作系统、应用软件    </p></li><li><p>确保网站速度够快：网站可以瞬间打开</p><p> 影响因素：避免流量大的机房、独立IP、带宽</p></li></ol><h3 id="主机知识"><a href="#主机知识" class="headerlink" title="主机知识"></a>主机知识</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>主机（也叫空间）是存放网站程序和数据的地方，是搭建网站的三要素之一。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>按照地域分类：国内主机(较贵，需要备案，但是速度快)、国外主机(比较便宜，不需备案，速度较慢)</p><p>按照程序语言分类：PHP主机、ASP主机、全能主机</p><p>按操作系统分类：Linux主机、Windows主机</p><h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><p>数据库大小、FTP、流量计算</p><p>我们搭建网站的时候，只需要购买相应配置的主机就行，不需要自己搭建服务器</p><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>为了确保访问者访问你域名的时候会打开你存放在该空间的网页，在服务器上设置该域名有权限访问的过程叫做绑定域名</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>域名解析就是把域名解析到空间ip上，绑定域名就是在空间上绑定域名允许域名访问空间的内容。域名解析与域名绑定这两个工作都需要，才能让网站正常访问。</p><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><p>在网络上有成千上万台主机，为了区分这些主机，人们给每台主机都分配了一个专门的地址，这个地址就是IP，IP的地址由4位数组成，每部分都不大于256，各部分之间由小数点分开，，每个ip地址都是唯一的。如：192.168.0.1</p><h4 id="IP与域名"><a href="#IP与域名" class="headerlink" title="IP与域名"></a>IP与域名</h4><p> 由于要访问网络时，记IP地址比较麻烦，从而给IP转换了一种比较简单易记的名称：域名。由于ip是唯一的，所以域名也是唯一的。</p><h4 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h4><p> 在公用网络上建立专用网络的技术，允许特定的用户访问公用网络的内部资源，那么这个虚拟专用网络就是VPN。</p><h4 id="VPN作用"><a href="#VPN作用" class="headerlink" title="VPN作用"></a>VPN作用</h4><p> VPN作用：传输数据安全可靠，连接方便灵活，完全控制可扩充性，专用网络</p><h4 id="网络日志"><a href="#网络日志" class="headerlink" title="网络日志"></a>网络日志</h4><p> 服务器日志的统称，它是记录web服务器接收处理请求以及运行时错误等各种原始信息的、以.log结尾的文件</p><p>日志内容：服务器错误信息+用户访问信息+蜘蛛爬行信息。</p><p>通过网络日志可以清楚的得知访客的详细的信息，比如IP、时间、操作系统、是否成功访问某页面等。</p><p>由于网络日志可以记录各搜索引擎蜘蛛机器人在网站爬行的详细情况，所以网站管理员可以通过日志了解网站在搜索引擎中的表现，从而根据日志分析结果来调整seo策略。</p><h3 id="网站类别"><a href="#网站类别" class="headerlink" title="网站类别"></a>网站类别</h3><h4 id="企业网站"><a href="#企业网站" class="headerlink" title="企业网站"></a>企业网站</h4><p>企业网站就是企业在互联网上进行网络建设和形象宣传的电子商务平台</p><p>分为：</p><ol><li><p>电子商务类型：以网络销售为主要目的的企业网站类型</p></li><li><p>多媒体广告型：用来展示企业形象，打造企业品牌</p></li><li><p>产品展示型：针对定向用户展示企业产品详细参数，提供服务咨询的企业网站类型</p></li></ol><h4 id="商城网站"><a href="#商城网站" class="headerlink" title="商城网站"></a>商城网站</h4><p>商城就是以电子商务软件来构建的大型商品电子交易平台，其主要作用就是通过商城交易平台向客户准确、快捷的销售产品</p><p>商城、消费者和物流构成了电子商务的核心三要素，其中商城是实现电子商务活动的载体</p><p>商城模式：</p><ol><li>B2B:Business-to-Business，代表：阿里巴巴 慧聪网</li><li>B2C:Business-to-Customer，代表：京东、当当、凡客</li><li>C2C:Customer-to-Customer，代表：淘宝</li></ol><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>SEO真正的价值是带来定向客户，定向客户是通过搜索一些词语来到我们网站的，这些客户要搜索的词语就叫做关键词。简单的来说，关键词就是潜在用户要搜的词，所有我们潜在客户在搜素引擎上面要搜索的词我们都可以称之为关键词。分为主关键词与长尾关键词。一般我们用最高权重页面去优化的词叫做主关键词。长尾关键词：搜索量没有主关键词打的一些词，一般用内页来优化。</p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>文章是一个网站必备的因素，是我们优化网站必要的手段，因为想要让一个网页排有名且转化一个很重要的前提就是我们要提供有价值的内容。页面内容对于搜索引擎来说最重要的就是文章，好的文章可以增强页面在整个网络上的权威，相反不好甚至作弊的文章可能回调整个网站在搜索引擎上积累的信任度。</p><p>原创：在seo行业里原创文章就是搜索引擎之前未见过的文章。各大搜索引擎的数据库是独立的，如果谷歌收录的一篇文章百度引擎没有见过的话， 也算作原创文章。</p><p>伪原创文章：在一些搜索引擎已经抓取过得文章基础上经过加工编辑成的文章。比如将原本网络中已经存在的文章交换段落，替换关键词就是一篇伪原创文章。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li>反向链接：任何一个链接都是某一个页面对另一个页面的反向链接，任何一个超链接都是一个页面对另外一个页面的信任投票。</li><li>锚文本：就是文本上加入超链接，如：<a href="https://sinsle.com/" target="_blank" rel="noopener">朽壳</a>，这是对另外一个页面最好的信任投票，直接的告诉了搜索引擎这个链接的属性</li><li>URL超链接：就是网址的超级链接，如：<a href="https://sinsle.com/" target="_blank" rel="noopener">https://sinsle.com/</a></li></ol><h4 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h4><p>内链是反向链接的一种形式，主要是指我们网站内部网页之间的相互超链接。</p><p>作用：可以让搜索引擎更多的抓取我们的页面，以及可以让网页之间进行”投票”。内链具有相关、稳定的特点。而这两个特点在反向链接中非常重要。</p><p>注意：内部链接虽然非常重要，但是我们在刚开始做一个网站的时候不要加太多内部链接，因为有过度优化的嫌疑。</p><h4 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h4><p>在同等条件下，外链数量较多，排名和稳定性越好。同等条件下，越是相关的页面给的外链越有价值。</p><p>外链是其他网站对本网站的信任投票，利于搜索引擎对我们网页权威性的评价。</p><p>注意：在建站初期时，建议大家不要建设太多外链。</p><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><p>我们在访问任何一个网页，服务器都会生成网站的日志，在日志里面会有一个3位数的数字代码，这三位数字diam就是记录了我们访问的动作，比如是“正常访问”还是“无法打开网页”等，这三位数字就是http状态码。</p><p>1xx:消息，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p><p>2xx:成功，代表请求已成功被服务器接收、理解、并接受。</p><p>3xx:重定向，代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p><p>4xx:客户端错误，代表了客户端看起来可能发生了错误，妨碍了服务器的处理。</p><p>5xx:服务器错误，表示服务器无法完成明显有效的请求。[56]这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。</p><p>http状态码是服务器与客户端交流信息的语言，这个客户端包括用户与爬虫。通过站长工具的http状态码查询可以查看网站的状态码信息</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/seo1.png" alt=" "></p><p>通过http状态码可以查看搜索引擎爬虫在你网站的爬取情况，也可以查看网站出现了什么问题。</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>网络爬虫(网络蜘蛛)是一种自动获取网页内容的程序，爬虫抓取的网页将会被搜索引擎系统存储，进行一定的分析、过滤并建立索引，一边之后的用户能够查询到这个页面，这个获取信息的程序就是爬虫。</p><p>爬虫为搜索引擎收集内容，搜索引擎展示的内容大部分是爬虫收集的。</p><p>爬虫通过漫游的形式进行抓取，爬虫爬到一个页面后，看到一个链接，然后顺着那个连接又爬到另外一个页面，爬虫是不听的从一个页面跳到另一个页面的，他一边下载这个网页，一边在提取这个网页中的链接，那个页面上所有的链接都放在一个公用的“待抓取列表”里。而且爬虫有个特点，就是在访问你网站之前不去做判断你这个网站本身是怎么样的，不对网页内容判断就抓取，但是会有优先级的划分，尽量不会抓重复的内容，尽量抓重要内容(比如网站的公共部分).搜索引擎同时会排出多个爬虫进行多线程的抓取。所有被爬虫抓取的网页将会被系统存储，进行一定的分析过滤，并建立索引，以便之后的查询和检索。</p><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>概念：搜索引擎对一个网站的信任度。</p><p>决定一个网站权重的因素包含很多方面，据谷歌数据调查至少有两百多个方面，且权重没有特定的工具可以测量出来。</p><h3 id="PR-Page-Rank-网页级别"><a href="#PR-Page-Rank-网页级别" class="headerlink" title="PR(Page Rank:网页级别)"></a>PR(Page Rank:网页级别)</h3><p>PR是Google用来标识网页的等级、重要性的一种方法，是Google用来衡量一个网站好坏的重要标准之一。</p><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>搜索引擎使用爬虫程序自动访问互联网上的网页并获取网页信息。爬虫在访问一个网站时，会首先检查该网站的根目录下是否有一个叫做robots.txt文件，这个文件是用于指定爬虫在网站上抓取范围。简单的来说就是网站通过robots协议来告诉搜索引擎哪些页面可以抓取，哪些页面不可以抓取。</p><p>因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。</p><p>用法：</p><ol><li><p>允许所有的机器人</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:*</span><br><span class="line">Disallow:</span><br><span class="line"></span><br><span class="line">User-agent:*</span><br><span class="line">Allow:/</span><br></pre></td></tr></table></figure></li><li><p>允许特定的机器人</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:some_spider</span><br><span class="line">Allow:</span><br></pre></td></tr></table></figure></li><li><p>仅禁止特定机器人访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:any_spider</span><br><span class="line">Disallow:/</span><br></pre></td></tr></table></figure></li><li><p>禁止所有的机器人</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:*</span><br><span class="line">Disallow:/</span><br></pre></td></tr></table></figure></li><li><p>禁止所有机器人访问特定目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /cgi-bin/</span><br><span class="line">Disallow: /images/</span><br><span class="line">Disallow: /tmp/</span><br><span class="line">Disallow: /private/</span><br></pre></td></tr></table></figure></li><li><p>禁止所有机器人访问特定文件类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /*.php$</span><br><span class="line">Disallow: /*.js$</span><br><span class="line">Disallow: /*.inc$</span><br><span class="line">Disallow: /*.css$</span><br></pre></td></tr></table></figure></li><li><p>使用”*“来限制访问的url，如仅允许访问以”.html”为后缀的url</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /cgi-bin/*.htm</span><br></pre></td></tr></table></figure></li><li><p>禁止访问网站中所有的动态界面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /*?*</span><br></pre></td></tr></table></figure></li></ol><h3 id="查询网站收入量"><a href="#查询网站收入量" class="headerlink" title="查询网站收入量"></a>查询网站收入量</h3><p>浏览器中输入：site:<a href="http://www.zlstory.com" target="_blank" rel="noopener">www.zlstory.com</a></p><p>从新站录入的时刻来讲，google快于百度，百度关于新站不会马上录入，乃至适当长的时刻内都不会录入，只需经过百度的检测期后，百度才会许多录入该站点内容，这需求很长一段时刻。</p><h3 id="网页快照"><a href="#网页快照" class="headerlink" title="网页快照"></a>网页快照</h3><p>搜索引擎在收录网页中，对网页进行备份时，存在自己的服务器缓存里，当用户在搜索引擎中点击“网页快照”链接时，搜索引擎将蜘蛛系统当时所抓取并保存的网页内容展现出来，称为“网页快照”。</p><p>快照回档：指的是百度的快照被退回到之前日期的快照。</p><p>回档原因：</p><ol><li>主机空间不稳定，网站首页的改动、作弊等</li><li>服务器宕机</li></ol><h3 id="黑冒"><a href="#黑冒" class="headerlink" title="黑冒"></a>黑冒</h3><h4 id="黑冒与白冒"><a href="#黑冒与白冒" class="headerlink" title="黑冒与白冒"></a>黑冒与白冒</h4><p>黑冒：所有不符合引擎优化规范的优化技巧及方法</p><p>白冒：所有符合引擎优化规范的优化技巧及方法</p><h4 id="黑冒与白冒的区别"><a href="#黑冒与白冒的区别" class="headerlink" title="黑冒与白冒的区别"></a>黑冒与白冒的区别</h4><p>本质区别：是否站在了用户的角度去调整优化我们的网站，黑冒是纯粹站在搜索引擎的角度去做优化，几乎或者完全不考虑用户感受，甚至存在欺骗用户、欺骗搜素引擎的行为。</p><h4 id="黑冒优点"><a href="#黑冒优点" class="headerlink" title="黑冒优点"></a>黑冒优点</h4><p>好的黑冒是白冒seo的基础，是我们探索搜索引擎底线的工具。</p><h4 id="黑冒常用手段"><a href="#黑冒常用手段" class="headerlink" title="黑冒常用手段"></a>黑冒常用手段</h4><p>1.锚文本轰炸</p><p>一个页面并没有相关的内容，但是用大量的锚文本指向此页面。</p><p>2.采集</p><p>用一些程序在网络是哪个自动收集一些文字，经过简单的程序自动处理之后发布到网站上，用户体验极差。</p><p>3.群发</p><p>用软件把自己的链接发布到一些网站上，短时间获得大量的外链。</p><p>4.站群和链轮</p><p>为了快速得到排名，组织了相关站点，这些网站之间按照一定规则像车轮一样链接起来，并且每一个站点都指向我们要优化的网站，因为链轮往往涉及都的网页较多，只要其中一个网页获得搜索引擎的光顾，其他网页通过这个网页上的超链接增加其在搜索引擎面前的曝光量，对于站群和链轮来讲，网站的数量越多风险越大。</p><p>5.挂马</p><p>为了达到某种目的，通过一种手段，进入到一个网站并在该网站安装了木马程序，不但该网站被挂马，更重要的是该网站用户的电脑也有中毒的危险，导致用户体验极差。</p><p>6.黑链</p><p>不正当的链接，用户一般看不到，但是搜索引擎可以看到的链接，一般网站后台被入侵，挂上了对方网站的链接，这些链接虽然从页面中看不出来，但是搜索引擎是可以抓取的。</p><h4 id="惩罚"><a href="#惩罚" class="headerlink" title="惩罚"></a>惩罚</h4><p>如果滥用黑冒过度并且影响到正常的搜索秩序的时候，搜索引擎必然会做出调整。</p><ol><li>收录大量减少</li><li>排名全面下降</li><li>直接从搜索引擎数据库中删除该站</li></ol><p>(换个域名就解决)</p><h3 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h3><p>Pay Per Click：点击付费广告。</p><p>自然排名：不管任何关键词在百度搜索结果当中每页肯定会有十个网页是按照搜索引擎规则得出的顺序进行排列的，这些网站的排名就是自然排名。</p><p>而搜索引擎的PPC，就是给的钱越多则排名越靠前、排名靠前的时间也越长。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈前端项目模块化工具webpack</title>
      <link href="/2017/11/30/webpack/"/>
      <url>/2017/11/30/webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h3><p>webpack是一个模块打包器，他可以将前端中的静态文件根据一定的规则打包成一个或多个文件。简单的来说，webpack就是一个代码打包工具。</p><h3 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h3><p>随着前端开发的越来越复杂，不可能将所有前端代码写在一个文件中，但是若写在多个文件中会在全局作用域下造成冲突、http请求次数增多且后期维护困难。为了方便管理及组织，我们需要给代码划分不同的模块及文件中，进行模块化开发。</p><p>另一方面，前端优化有两大方面：1.减少http请求 2.减小静态文件体积。</p><p>webpack可以同时支持CommonJs与AMD规范,不仅是针对于JavaScript，其他文件如css、图片、字体等一切前端文件皆可兼容，且都可以分模块打包(实现了按需加载)，且可以将es6的代码编译成浏览器识别的es5。</p><h3 id="commonJS-与-AMD-规范"><a href="#commonJS-与-AMD-规范" class="headerlink" title="commonJS 与 AMD 规范"></a>commonJS 与 AMD 规范</h3><h4 id="commonJS模块规范"><a href="#commonJS模块规范" class="headerlink" title="commonJS模块规范"></a>commonJS模块规范</h4><p>每一个文件都是一个模块，有着自己的作用域，在文件里定义的变量函数等都是私有的，对其他文件不可见。模块加载的顺序与其在代码中出现的顺序一致，即：不可异步加载。</p><p>模块之间必须通过module.exports进行自身文件的暴露，再其他文件中通过require()将暴露的模块引入到当前作用域中。</p><h4 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h4><p>由于commonJS只能同步加载，这样对浏览器来说很不友好，于是AMD定义了一套JavaScript模块以异步加载模块。</p><h3 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h3><p>安装webpack需要node支持（前端电脑中应该都有node环境吧！）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>安装完成之后，查看webpack的所有命令。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack -help</span><br></pre></td></tr></table></figure></p><p>cd进入目标文件之后，建立一个package.json文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><img src="http://p09xm7bj0.bkt.clouddn.com/webpack1.png" alt=" "></p><ul><li>name：这个包的名字</li><li>version：这个包的版本</li><li>description： 一句话描述这个包是做什么用的</li><li>entry point：入口文件，默认是index.js，你可以写成自己的文件</li><li>test command：测试命令</li><li>git repository：Git仓库地址，没有直接回车</li><li>keyword：作为搜索包的关键词</li><li>author：作者</li><li>license：开源文件</li></ul><p>填完这些信息之后，它会问你 Is this OK ？<br>回车之后，目标文件中就有新增一个package.json，内容就是刚刚填的那些信息。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"zlstory"</span>,</span><br><span class="line"><span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="string">"description"</span>: <span class="string">"a webpack demo"</span>,</span><br><span class="line"><span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"author"</span>: <span class="string">"zlstory"</span>,</span><br><span class="line"><span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装webpack的依赖，生成node_modules文件夹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure><p>若要安装指定版本的webpack版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.8.1 --save-dev</span><br></pre></td></tr></table></figure><h3 id="使用webpack打包js"><a href="#使用webpack打包js" class="headerlink" title="使用webpack打包js"></a>使用webpack打包js</h3><h4 id="单个入口文件"><a href="#单个入口文件" class="headerlink" title="单个入口文件"></a>单个入口文件</h4><p>在目标文件夹中建立index.html与entry.js文件，如下图所示：</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/webpack2.png" alt=" "></p><p>在entry.js中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"webpack works!"</span>);</span><br></pre></td></tr></table></figure><p>在index.html中<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意我们引入的是bundle.js，而并非是新建的entry.js，若直接在浏览器打开index.html一定是报错的，因为找不到bundle.js，那么webpack就是可以将entry.js打包成一个bundle.js，并生成bundle.js在指定目录中。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack entry.js bundle.js</span><br></pre></td></tr></table></figure></p><p>此时在浏览器中打开index.html会发现<span style="font-size:16px;">webpack works!<span></span></span></p><h4 id="多个入口文件"><a href="#多个入口文件" class="headerlink" title="多个入口文件"></a>多个入口文件</h4><p>通过require()可以将其他文件引入进来，如新建head.js文件。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require之前需要进行接口的暴露</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">"This is head.js"</span>;</span><br></pre></td></tr></table></figure></p><p>在entry.js中将head.js引入<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"webpack works!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">"./head.js"</span>));</span><br></pre></td></tr></table></figure></p><p>重新使用webpack entry.js bundle.js打包可以，成功后打开index.html，可以看出既有<span style="font-size:16px;">webpack works!<span>，也console出了 This is head.js,证明webpack将entry.js以及head.js都打包到了bundle.js中。</span></span></p><p>将之前生成的bundle.js删除，新建一个webpack.config.js文件：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"sourcemap"</span>,</span><br><span class="line">    entry: <span class="string">"./js/entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再使用cmd执行 webpack 命令也会生成bundle.js,同时会生成一个.map文件（错误信息文件）。</p><h3 id="使用不同的loader处理不同的静态文件"><a href="#使用不同的loader处理不同的静态文件" class="headerlink" title="使用不同的loader处理不同的静态文件"></a>使用不同的loader处理不同的静态文件</h3><p>webpack本身只能处理js文件，若需要模块化打包css、图片以及字体等文件，需要加载对应的loader。<br>loader是一个预处理函数，接受源文件作为参数，返回的是转换的结果。loader为JavaScript生态系统提供了更多的能力，例如压缩、打包、语言翻译等。</p><p>如css文件需要加载css-loader或style-loader：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install css-loader --save-dev</span><br><span class="line"></span><br><span class="line">npm install ts-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>在webpack.config.js(没有就新建)中指定loader。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123; <span class="attr">test</span>:<span class="regexp">/\.css$/</span>, <span class="attr">use</span>:<span class="string">"css-loader"</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单实现：</p><p>新建css文件，在entry.js中require该css文件，使用webpack entry.js bundle.js命令，发现css文件生效。</p><p>当然也可以使用内联方式来指定该文件需要使用什么的loader<br>如在entry.js中:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"!style-loader!css-loader!./style.css"</span>) <span class="comment">// 载入 style.css</span></span><br></pre></td></tr></table></figure></p><h3 id="使用webpack加载第三方库"><a href="#使用webpack加载第三方库" class="headerlink" title="使用webpack加载第三方库"></a>使用webpack加载第三方库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install jquery --save-dev</span><br></pre></td></tr></table></figure><p>在entry.js中，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"webpack works!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">"./head.js"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"h1"</span>).html(<span class="string">"this is jquery"</span>);</span><br></pre></td></tr></table></figure><p>在index.html中<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在webpack.config.js中<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"sourcemap"</span>,</span><br><span class="line">    entry: <span class="string">"./entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用webpack 命令，打开浏览器即可看见页面中：</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/webpack3.jpg" alt=" "></p><h3 id="webpack与babel、vue"><a href="#webpack与babel、vue" class="headerlink" title="webpack与babel、vue"></a>webpack与babel、vue</h3><p><a href="https://babeljs.cn/" target="_blank" rel="noopener">babel中文网</a></p><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue官网</a></p><p>首先安装相关的loader：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> npm install babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage-0 babel-runtime --save-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install vue-loader vue-html-loader vue-style-loader --save-dev</span><br></pre></td></tr></table></figure><p>在webpack.config.js中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"sourcemap"</span>,</span><br><span class="line">    entry: <span class="string">"./js/entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader:<span class="string">"style!css"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader:<span class="string">"babel"</span>,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader:<span class="string">"vue"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    babel:&#123;</span><br><span class="line">        presets:[<span class="string">'es2015'</span>,<span class="string">'stage-0'</span>],</span><br><span class="line">        plugins:[<span class="string">'transform-runtime'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">        resolve: &#123;<span class="comment">//在使用npm构建vue环境的时候，需要在打包工具里配置一个别名</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span> <span class="comment">// 'vue/dist/vue.common.js' for webpack 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="webpack命令"><a href="#webpack命令" class="headerlink" title="webpack命令"></a>webpack命令</h4><p>安装全局的webpack服务器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g webpack-dev-server</span><br></pre></td></tr></table></figure></p><p>安装项目依赖的服务器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>查看所有打包文件以及在什么文件中调用了哪个文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack  --display-modules  --display-reasons</span><br></pre></td></tr></table></figure><p>实时监控<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack -watch</span><br></pre></td></tr></table></figure></p><p>热更新：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack-dev-server --content-base build --inline --hot</span><br></pre></td></tr></table></figure></p><p>配置服务器与热更新,在package.json中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack-dev-server --content-base build --inline --hot&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区分线上与线下环境</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>　debug = process.env.MODE_ENV != <span class="string">"production"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: debug ?  <span class="string">"sourcemap"</span> :<span class="literal">null</span>,</span><br><span class="line">    entry: <span class="string">"./js/entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader:<span class="string">"style!css"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:debug?[]:[</span><br><span class="line">        <span class="keyword">new</span> webpack.optiomize.DebugPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optiomize.OccurenceOrderPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    babel:&#123;</span><br><span class="line">        presets:[<span class="string">'es2015'</span>,<span class="string">'stage-0'</span>],</span><br><span class="line">        plugins:[<span class="string">'transform-runtime'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span> <span class="comment">// 'vue/dist/vue.common.js' for webpack 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript核心-ECMAScript</title>
      <link href="/2017/10/26/js-basic/"/>
      <url>/2017/10/26/js-basic/</url>
      
        <content type="html"><![CDATA[<h4 id="JavaScript的实现"><a href="#JavaScript的实现" class="headerlink" title="JavaScript的实现"></a>JavaScript的实现</h4><pre><code>一个完整的JavaScript的实现由三部分组成：ECMAScript(核心) + DOM(文档对象模型) + BOM(浏览器对象模型)。注意：虽然JavaScript和ECMAScript经常表达的是一个意思，但是JavaScript包含ECMAScript。</code></pre><h5 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h5><pre><code>ECMAScript与Web浏览器没有依赖关系，Web浏览器只是ECMAScript实现可能的宿主环境之一。其他宿主环境包括Node等。</code></pre><h5 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM(文档对象模型)"></a>DOM(文档对象模型)</h5><pre><code>DOM是真对XML但经过扩展勇于HTML的应用编程接口(API)。</code></pre><ol><li><p>DOM 1级组成：</p><p> (1) DOM核心：规定如何映射基于XML的文档结构，以便简化对文档中任意部分的访问和操作。</p><p> (2) DOM HTML：在DOM核心的基础上加以扩展，添加了对HTML的对象和方法。</p></li><li><p>DOM 2级组成：</p><p> (1) DOM视图：定义了跟踪不同文档视图的接口</p><p> (2) DOM事件： 定义了事件和事件处理的接口</p><p> (3) DOM样式：定义了基于css为元素应用样式的接口</p><p> (4) DOM遍历和范围：定义了遍历和操作文档树的接口</p></li><li><p>DOM 3级扩展：</p><p> (1) 引入了统一方式加载和保存文档的方法：在DOM加载和保存模块中定义</p><p> (2) 新增了验证文档的方法：在DOM验证模块中定义</p><p> (3) 对DOM核心进行了扩展</p></li></ol><h5 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM(浏览器对象模型)"></a>BOM(浏览器对象模型)</h5><ol><li><p>弹出新浏览器窗口的功能</p></li><li><p>移动、缩放和关闭浏览器窗口的功能</p></li><li><p>提供浏览器详细信息的navigator对象</p></li><li><p>提供浏览器所加载页面的详细信息的location对象</p></li><li><p>提供用户显示器分辨率详细信息的screen对象</p></li><li><p>对cookies的支持</p></li></ol><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>严格模式是为JavaScript定义了一种不同的解析与执行模型。在代码顶部(或函数里面的顶部)中加入：“use strict”，这个字符串实际上是一个编译指示，用于告诉支持的JavaScript引擎切换到严格模式。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>基本数据类型：undefined、null、boolean、number、string</p><p>复杂数据类型：object</p><p>使用typeof操作符可检测给定变量的数据类型，返回值为：undefined、boolean、string、number、object、function。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;<span class="comment">//object</span></span><br><span class="line"><span class="comment">//null是一个空对象指针，所以返回object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">"123112"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> message;<span class="comment">//string</span></span><br></pre></td></tr></table></figure><h5 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h5><p>undefined类型只有一个值：undefined</p><p>变量使用var声明但是未复制，会出现undefined。</p><p>若变量没有声明就使用，则会报错，并非undefined。</p><h5 id="null"><a href="#null" class="headerlink" title="null"></a>null</h5><p>unll类型只有一个值：null，null == undefined</p><h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h5><p>boolean有两个值：true、false,需注意：区分大小写。</p><table><thead><tr><th>数据类型</th><th style="text-align:right">转换成true</th><th style="text-align:center">转换成false</th></tr></thead><tbody><tr><td>Boolean</td><td style="text-align:right">true</td><td style="text-align:center">false</td></tr><tr><td>String</td><td style="text-align:right">非空字符串</td><td style="text-align:center">空字符串</td></tr><tr><td>Number</td><td style="text-align:right">非零数字值</td><td style="text-align:center">0 和 NAN</td></tr><tr><td>Object</td><td style="text-align:right">任何对象</td><td style="text-align:center">null</td></tr><tr><td>undefined</td><td style="text-align:right">不适用</td><td style="text-align:center">undefined</td></tr></tbody></table><h5 id="number"><a href="#number" class="headerlink" title="number"></a>number</h5><p>八进制：第一位必须是0，，后面是0-7，若超出范围，则以十进制解析。</p><p>十六进制：前两位必须是0x，后面是0-9和A-F，字母大小写不限制。</p><p>isFinite():判断一个数值是不是有穷的。</p><p>isNaN()：判断一个数是不是NaN。NAN与任何值都不相等，包括本身。</p><p>number():将任何数据类型转换成数值。</p><p>paeseInt()和parseFloat()：将字符串转换成数值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">"hello"</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">"000011"</span>);<span class="comment">//11</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1232hello"</span>);<span class="comment">//1232</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">""</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);<span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>);<span class="comment">//22</span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"070"</span>,<span class="number">8</span>);<span class="comment">//56</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>);<span class="comment">//70</span></span><br></pre></td></tr></table></figure><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><p>string类型由0或者多个16位Unicode字符组成的字符序列。由双引号或者单引号包含着，字符串一旦建立值就不可改变，除非销毁原来的值。</p><p>toString():将number、Boolean、object、string转换成字符串</p><p>默认情况下，toString()以十进制返回数值的字符串，参数可以为2、8、16表示二进制、八进制与十六进制。</p><p>String():将任何类型转成字符串。如果值是null返回null，值是undefined返回undefined。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num.toString();<span class="comment">//"10"</span></span><br><span class="line">num.toString(<span class="number">2</span>);<span class="comment">//"1010"</span></span><br><span class="line">num.toString(<span class="number">8</span>);<span class="comment">//"12"</span></span><br><span class="line">num.toString(<span class="number">16</span>);<span class="comment">//"a"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val;</span><br><span class="line"><span class="built_in">String</span>(val);<span class="comment">//"undefined"</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">10</span>);<span class="comment">//10</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>);<span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>);<span class="comment">//"null"</span></span><br></pre></td></tr></table></figure><h5 id="object"><a href="#object" class="headerlink" title="object"></a>object</h5><p>对象就是一组数据和功能的集合，可以通过执行new操作符来创建。object有属性和方法。</p><p>constructor：保存着用于当前对象的函数。</p><p>hasOwnProperty：检查给定属性是否存在于当前对象实例中。</p><p>isPrototypeOf：用于检查传入的对象是否是当前对象的原型。</p><p>propertyIsEnumerable：检查给定的属性是否能够for…in来循环遍历。</p><p>toLocalString：返回对象的字符串表示，与执行环境的地区相对应。</p><p>toString：返回对象的字符串表示。</p><p>valueOf：返回对象的字符串、数值或者布尔值表示。</p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><h5 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h5><ol><li>递增递减操作符</li></ol><p>执行递增递减操作时，变量的值都是在语句被求值以前改变的(称为：副效应)。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myAge  = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> hisAge = --myAge + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myAge);<span class="comment">//22</span></span><br><span class="line"><span class="built_in">console</span>.log(hisAge);<span class="comment">//24</span></span><br></pre></td></tr></table></figure><ol start="2"><li>一元加和减操作符</li></ol><p>+放在数值前，对数值不产生影响。</p><p>-放在数值前，值变为负数。</p><p>对于不同的操作类型，会先转成数值类型，在进行操作<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"23"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"23.2"</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> func = &#123;</span><br><span class="line">    valueOf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( +str1 );<span class="comment">//23</span></span><br><span class="line"><span class="built_in">console</span>.log( +str2 );<span class="comment">//23.2</span></span><br><span class="line"><span class="built_in">console</span>.log( +str3 );<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log( +bool );<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log( +num1 );<span class="comment">//1.1</span></span><br><span class="line"><span class="built_in">console</span>.log( +func );<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( -str1 );<span class="comment">//-23</span></span><br><span class="line"><span class="built_in">console</span>.log( -str2 );<span class="comment">//-23.2</span></span><br><span class="line"><span class="built_in">console</span>.log( -str3 );<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log( -bool );<span class="comment">//-0</span></span><br><span class="line"><span class="built_in">console</span>.log( -num1 );<span class="comment">//-1.1</span></span><br><span class="line"><span class="built_in">console</span>.log( -func );<span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li>位操作符</li></ol><p>位操作符不直接操作64位的值，而是先转成32位进行操作，再将值转换为64位。</p><ul><li><p>~ ：按位非(NOT)，结果返回数值的反码，与二进制有关，本质就是对原值取反-1。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">-23</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"da"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(~num1);<span class="comment">//-24</span></span><br><span class="line"><span class="built_in">console</span>.log(~num2);<span class="comment">//22</span></span><br><span class="line"><span class="built_in">console</span>.log(~str1);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure></li><li><p>&amp;：按位与(AND)，当操作的两个数值都是1时，返回1，任何一位为0时，都返回0。</p></li><li><p>|：按位或(OR)，当操作的两个数值任何一位是1时，返回1，都为0时，都返回0。</p></li><li><p>^：按位异或(XOR)：当操作的两个数值对应位上只有一个1时返回1，如果对应两位都是1或者0，则返回0。</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">23</span> &amp; <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">23</span> | <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">23</span> ^ <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1);<span class="comment">//17</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//31</span></span><br><span class="line"><span class="built_in">console</span>.log(num3);<span class="comment">//14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//都是操作二进制的数值。</span></span><br></pre></td></tr></table></figure><ul><li><p>&lt;&lt;：左移操作符</p></li><li><p>>>：右移操作符</p></li><li><p>>&gt;&gt;：无符号右移</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">var</span> num0 = <span class="number">-23</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = num &lt;&lt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num &gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num3 = num &gt;&gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num4 = num0 &gt;&gt;&gt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1);<span class="comment">//736</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(num3);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(num4);<span class="comment">//134217727</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//又是操作二进制的数值。</span></span><br></pre></td></tr></table></figure><h5 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h5><ol><li>逻辑非！</li></ol><p>对任何数据类类型操作，先转换为布尔值，再对其求反。</p><ol start="2"><li>逻辑与&amp;&amp;</li></ol><p>可以返回null、undefined、NaN、布尔值等。</p><ol start="3"><li>逻辑或||</li></ol><h5 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h5><ol><li><p>* 乘以</p></li><li><p>/除以</p></li></ol><h5 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h5><ol><li><p>+：若有字符串，则是连接作用。</p></li><li><p>-：若有字符串，先转换成数值，在进行减法操作。</p></li></ol><h5 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h5><p>>、&lt;、= 、&lt;= 、&gt;=</p><h5 id="条件操作符-三目运算符"><a href="#条件操作符-三目运算符" class="headerlink" title="条件操作符(三目运算符)"></a>条件操作符(三目运算符)</h5><p> var max = (num1 &gt; num2) ? num1 : num2;</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数使用function 关键词来声明，通过函数可以封装任意多条语句，而且可以在任何地方任何时候调用执行。</p><p>return：函数在执行完return语句之后退出，所以return之后的语句不会执行。</p><p>函数的参数：ECMAScript中的参数在内部是一个参数数组来表示的，函数接收到的永远都是这个数组，而不关心数组中有没有参数。实际上，在函数体内可以使用arguments对象来访问参数数组。</p><p>arguments：与数组类似，因为可以使用[]访问他的每一个元素，也可以用length来确定他有多少个参数，函数内部通过arguments可以改变函数参数（严格模式不可以）。</p><h4 id="object类型"><a href="#object类型" class="headerlink" title="object类型"></a>object类型</h4><h5 id="2种创建方式"><a href="#2种创建方式" class="headerlink" title="2种创建方式"></a>2种创建方式</h5><ol><li><p>使用new操作符后跟Object构造函数。</p></li><li><p>对象字面量表示</p></li></ol><h5 id="2种访问对象属性的方法"><a href="#2种访问对象属性的方法" class="headerlink" title="2种访问对象属性的方法"></a>2种访问对象属性的方法</h5><ol><li><p>点表示法(推荐使用)</p></li><li><p>[]表示法(需用字符串形式)</p></li></ol><ul><li>使用[]的优点 </li></ul><p>(1) 可以通过变量来访问属性</p><p>(2) 属性名中包含关键字或者保留字</p><p>(3) 属性中含有非字母非数字等导致语法错误的字符。</p><h4 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h4><h5 id="2种创建方式-1"><a href="#2种创建方式-1" class="headerlink" title="2种创建方式"></a>2种创建方式</h5><ol><li><p>使用new操作符后跟Array构造函数(new 操作符可省略)。</p></li><li><p>对象字面量表示</p></li></ol><h5 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h5><ol><li><p>instanceOf </p></li><li><p>Array.isArray()</p></li></ol><h5 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h5><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">参数</th><th style="text-align:center">作用</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">toLocalString() <br>toString()<br>valueOf()</td><td style="text-align:center"></td><td style="text-align:center">将数组转换成字符串</td><td style="text-align:center">返回数组的字符串格式</td></tr><tr><td style="text-align:center">push() <br>pop()</td><td style="text-align:center">任意数量的参数<br>无需传参</td><td style="text-align:center">将参数添加到数组末尾<br>移除数组的最后一项</td><td style="text-align:center">返回新数组的长度<br>被移除的那一项</td></tr><tr><td style="text-align:center">unshift() <br>shift()</td><td style="text-align:center">任意数量的参数<br>无需传参</td><td style="text-align:center">将参数添加到数组最前端<br>移除数组的第一项</td><td style="text-align:center">返回新数组的长度<br>被移除的那一项</td></tr><tr><td style="text-align:center">reverse() <br>sort()</td><td style="text-align:center">无需传参<br>比较函数</td><td style="text-align:center">反转数组的顺序<br>按照一定规则给数组排序</td><td style="text-align:center">返回排序后的数组</td></tr><tr><td style="text-align:center">concat() <br>slice()</td><td style="text-align:center">值或数组<br>两或三个参数</td><td style="text-align:center">基于当前数组的所有项创建一个新数组<br>删除(起始位置,结束位置)、插入(起始位置,删除个数,插入项)、替换(起始位置,删除个数,插入项)</td><td style="text-align:center">返回操作后的新数组</td></tr><tr><td style="text-align:center">indexOf() <br>lastIndexOf()</td><td style="text-align:center">查找的内容,查找开始的位置</td><td style="text-align:center">从前往后找<br>从后往前找</td><td style="text-align:center">找不到返回-1，返回查找项在数组中的位置</td></tr><tr><td style="text-align:center">every() <br>filter() <br>forEach() <br>map() <br>some()</td><td style="text-align:center">给定函数(数组的每一项都执行该函数)</td><td style="text-align:center">该函数对数组每一项返回true，则返回true<br>返回值为true的数组<br>运行给定函数<br>函数调用后的结果组成的数组<br>任一项返回true，则返回true</td><td style="text-align:center">true<br>数组<br>无返回值<br>数组<br>true</td></tr><tr><td style="text-align:center">reduce() <br>reduceRight()</td><td style="text-align:center">给定函数(函数参数：prev,cur,index,arr)，归并基础的初始值</td><td style="text-align:center">从头开始遍历<br>从尾部开始遍历</td><td style="text-align:center">迭代数组所有项，构建一个最终返回的值</td></tr></tbody></table><h4 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h4><h5 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h5><p>使用new操作符加Date构造函数：</p><p>var now =  new Date()</p><h5 id="Date方法"><a href="#Date方法" class="headerlink" title="Date方法"></a>Date方法</h5><ol><li><p>Date.parse()：参数为字符串格式的日期(格式因地区而异)，返回值为对应日期的毫秒数。如果参数不规范，则返回NaN。</p></li><li><p>Date.UTC()：参数格式全部为数字，其中年月必须，返回值为对应日期的毫秒数。</p></li><li><p>Date.now()：返回表示调用这个方法时的日期和事件的毫秒数。可使用+操作符来获取Date对象的时间戳。</p></li><li><p>toLocalString()：返回与浏览器设置的地区相适应的格式返回日期与时间。</p></li><li><p>toString()：返回带有时区信息的日期与时间。</p></li><li><p>valueOf()：返回日期的毫秒表示，可以用来比较日期大小。</p></li></ol><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><ol><li><p>getTime():获取日期毫秒数</p></li><li><p>getFullYear(): 获取四位数的年份</p></li><li><p>getMonth()：获取月份</p></li><li><p>getDate()：获取月份中的天数</p></li><li><p>getDay()：获取星期几(0：星期日，6：星期六)</p></li><li><p>getHours()：获取小时(0-23)</p></li><li><p>getMinutes()：获取分钟(0-59)</p></li><li><p>getSeconds()：获取秒数(0-59)</p></li></ol><ul><li>注意：将get改为set，则可以设置对应的时间。</li></ul><h4 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h4><p>正则暂时不研究了，遇见就百度吧。</p><h4 id="function类型"><a href="#function类型" class="headerlink" title="function类型"></a>function类型</h4><p>函数是对象，函数名是只想函数对象的指针。</p><h5 id="创建方式-1"><a href="#创建方式-1" class="headerlink" title="创建方式"></a>创建方式</h5><ol><li><p>使用函数声明语法：function Sum (){   }。可提前调用。</p></li><li><p>使用函数表达式定义函数：var sum = function(){    }。不可提前调用。</p></li><li><p>使用Function构造函数：var sum = new Function()。</p></li></ol><h5 id="函数内部属性"><a href="#函数内部属性" class="headerlink" title="函数内部属性"></a>函数内部属性</h5><ol><li>arguments：类数组对象，包含传入函数的所有参数。</li></ol><ul><li>arguments有一个属性： callee，callee是 一个指向拥有arguments对象函数的指针，在函数内部中使用本函数时，可以使用arguments.callee()来代替。</li></ul><ol start="2"><li><p>caller：函数对象的属性，保存着调用当前函数的函数的引用。A函数中调用B函数，则A.caller指向B函数。</p></li><li><p>length：函数的length表示函数希望接受的命名参数的个数。</p></li><li><p>prototype：保存所有的实例方法，且不可枚举，即不能使用for…in来遍历。</p></li></ol><h5 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h5><ol><li><p>apply()：在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。参数有两个：(函数的作用域,数组)，第二个参数也可以是arguments。</p></li><li><p>call()：与apply作用想同，改变this指向。有多个参数：(this,参数1，参数2…)。</p></li></ol><ul><li>apply()与call()真正作用：扩大函数赖以运行的作用域，好处就是对象不需要与方法有任何耦合关系。</li></ul><ol start="3"><li>bind()：创建一个函数的实例。</li></ol><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><h5 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h5><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">参数</th><th style="text-align:center">作用</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">charAt() <br>charCodeAt()</td><td style="text-align:center">字符位置</td><td style="text-align:center">用于访问字符串中特定的字符</td><td style="text-align:center">返回给定位置的字符<br> 返回给定位置的字符的字符编码</td></tr><tr><td style="text-align:center">concat()</td><td style="text-align:center">字符串</td><td style="text-align:center">拼接任意个数的字符串</td><td style="text-align:center">返回新拼接的字符串</td></tr><tr><td style="text-align:center">slice()<br>substr()<br>substring()</td><td style="text-align:center">(开始位置,结束位置)<br>(开始位置，字符个数)<br>(开始位置,结束位置)</td><td style="text-align:center">基于子字符串创建新的字符串</td><td style="text-align:center">返回新的字符串 且不改变原字符串</td></tr><tr><td style="text-align:center">indexOf()<br>lastIndexOf()</td><td style="text-align:center">(给定子字符串，开始查找位置)</td><td style="text-align:center">查找子字符串</td><td style="text-align:center">返回-1或者子字符串第一次出现的位置</td></tr><tr><td style="text-align:center">trim()</td><td style="text-align:center">字符串</td><td style="text-align:center">删除字符串前置以及后缀的所有空格</td><td style="text-align:center">返回字符串副本</td></tr><tr><td style="text-align:center">toLowerCase()<br>toLocalLowerCase()<br>toUpperCase()<br>toLocalUpperCase()</td><td style="text-align:center">无</td><td style="text-align:center">实现字符串大小写转换</td><td style="text-align:center">返回转换后的字符串</td></tr><tr><td style="text-align:center">match()<br>search()<br>replace()<br>split()</td><td style="text-align:center">正则<br>正则<br>(正则或字符串,字符串或函数)<br>(分隔符,数组大小)</td><td style="text-align:center">字符串中匹配模式的方法</td><td style="text-align:center">返回数组<br>返回字符串中第一个匹配项的索引<br>返回新的字符串<br>返回数组</td></tr><tr><td style="text-align:center">localCompare()</td><td style="text-align:center">需比较的字符串之一</td><td style="text-align:center">按字母表顺序比较两个字符串</td><td style="text-align:center">返回值-1、0、1</td></tr><tr><td style="text-align:center">fromCharCode()</td><td style="text-align:center">字符编码</td><td style="text-align:center">字符编码</td><td style="text-align:center">返回编码对应的字符串</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue入门知识小结</title>
      <link href="/2017/09/26/vue/"/>
      <url>/2017/09/26/vue/</url>
      
        <content type="html"><![CDATA[<p>Vue.js是轻量级的前端界面框架，于2016年10月发布了2.0版本，目前得到了很多公司的青睐。实现了：数据渲染/数据同步、组件化/模块化、路由、ajax、数据流等。</p><h3 id="vue-js基础功能"><a href="#vue-js基础功能" class="headerlink" title="vue.js基础功能"></a>vue.js基础功能</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>Vue为构造函数，new是关键字，Vue中的内容是构造参数，el与data是参数选项。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> my = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,<span class="comment">//对象装载的位置</span></span><br><span class="line">    template:<span class="string">"&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">    components:&#123; App &#125;,<span class="comment">//引入子组件</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        message:<span class="string">"hello Vue.js!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取data中的数据 my.message、my.$data</span></span><br></pre></td></tr></table></figure></p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>全局注册组件与局部注册组件、组件树的概念。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 全局注册组件的方法</span></span><br><span class="line">Vue.component(<span class="string">"my-header"</span>,&#123;</span><br><span class="line">    template: <span class="string">"&lt;p&gt;this is my header&lt;/p&gt;"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//在html文件中</span></span><br><span class="line">&lt;div id = <span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;my-header&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.组件与子组件（局部注册）</span></span><br><span class="line"><span class="keyword">var</span> myHeaderChild = &#123;</span><br><span class="line">    template: <span class="string">"&lt;p&gt;this is my header child&lt;/p&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myHeader = &#123;</span><br><span class="line">    template: <span class="string">"&lt;p&gt;&lt;my-header-child&gt;&lt;/my-header-child&gt;&lt;/p&gt;"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">"my-header-child"</span>:myHeaderChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        word:<span class="string">"hello world"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">"my-header"</span>:myHeader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在html文件中</span></span><br><span class="line">&lt;div id = <span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;my-header&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>内置组件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myHeader = &#123;</span><br><span class="line">    template: <span class="string">'&lt;p&gt;&lt;my-header-child&gt;&lt;/my-header-child&gt;'</span>+</span><br><span class="line">              <span class="string">'&lt;component :is=""&gt;&lt;/component&gt;'</span>+</span><br><span class="line">              <span class="string">'&lt;keep-alive&gt;&lt;/keep-alive&gt;'</span>+</span><br><span class="line">              <span class="string">'&lt;router-view&gt;&lt;/router-view&gt;'</span>+</span><br><span class="line">                <span class="string">'&lt;/p&gt;'</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">"my-header-child"</span>:myHeaderChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在组件中的data需注意，因为会被其他组件引用，所以应该避免引用赋值,如<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">"my-header"</span>:myHeader</span><br><span class="line">    &#125;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        a:<span class="number">1</span>,</span><br><span class="line">        b:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>建议使用函数返回值方式，如<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">"my-header"</span>:myHeader</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            a:<span class="number">1</span>,</span><br><span class="line">            b:<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样做是为了避免组件之间的数据相互影响。</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>指令是指带有v-前缀的特殊属性，当表达式的值改变时，将其产生的连带影响，响应式的作用于DOM，指令可以有参数（指令只有以冒号表示）和修饰符（以.修饰）。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myHeader = &#123;</span><br><span class="line">    template: <span class="string">"&lt;p v-html = 'test' v-on:keydown.enter = ''&gt;&lt;my-header-child&gt;&lt;/my-header-child&gt;&lt;/p&gt;"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">"my-header-child"</span>:myHeaderChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义指令<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p v-color=<span class="string">"'red'"</span>&gt;hello world&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default&#123;</span></span><br><span class="line"><span class="regexp">        directives:&#123;</span></span><br><span class="line"><span class="regexp">            color:function(el,binding)&#123;</span></span><br><span class="line"><span class="regexp">                el.style.color = binding.value</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>conputed计算属性 选项会被缓存<br>也可以通过调用方法来计算属性，使得每次的属性都是重新调用生成的<br>watch–监听属性变化<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type = <span class="string">"text"</span> v-model = <span class="string">"myVal"</span>&gt;</span><br><span class="line">&#123;&#123; myValueWithoutNum &#125;&#125;</span><br><span class="line">&#123;&#123; getMyValWithoutNum() &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            myVal:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">        myVal:<span class="function"><span class="keyword">function</span>(<span class="params">val,oldVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(val,oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        myValueWithoutNum () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.myVal.replace(<span class="regexp">/\d/g</span>,<span class="string">''</span>);<span class="comment">//删掉所有数字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getMyValWithoutNum ()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.myVal.replace(<span class="regexp">/\d/g</span>,<span class="string">''</span>);<span class="comment">//删掉所有数字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=<span class="string">"addItem"</span>&gt;addItem&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button v-on:click="toogle"&gt;toogle&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            hello:<span class="string">'&lt;span&gt;hello world&lt;/span&gt;'</span>,</span><br><span class="line">            link:<span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">            className:[<span class="string">'red-font'</span>,<span class="string">'big-font'</span>],</span><br><span class="line">            hasError:<span class="literal">false</span>,</span><br><span class="line">            classA:<span class="string">'hello'</span>,</span><br><span class="line">            classB:<span class="string">'world'</span>,</span><br><span class="line">            isPartA:<span class="literal">true</span>,</span><br><span class="line">            list:[</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'apple'</span>,</span><br><span class="line">                    price: <span class="number">34</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'banana'</span>,</span><br><span class="line">                    price: <span class="number">34</span></span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        addItem () &#123;<span class="comment">//es6缩写，原为：addItem:function()&#123;&#125;</span></span><br><span class="line">            Vue.set(<span class="keyword">this</span>.list,<span class="number">1</span>,&#123;</span><br><span class="line">                name:<span class="string">'pinaapple'</span>,</span><br><span class="line">                price:<span class="number">231</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        toggle () &#123;</span><br><span class="line">            <span class="keyword">this</span>.isPartA = !<span class="keyword">this</span>.isPartA</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单的数据双向绑定:v-model<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.lazy = <span class="string">"myValue"</span> type = <span class="string">"text"</span>/&gt;</span><br><span class="line">&#123;&#123; myValue &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;input v-model=<span class="string">"myBox"</span> type = <span class="string">"checkbox"</span> value = <span class="string">"111"</span>&gt;</span><br><span class="line">&lt;input v-model=<span class="string">"myBox"</span> type = <span class="string">"checkbox"</span> value = <span class="string">"222"</span>&gt;</span><br><span class="line">&lt;input v-model=<span class="string">"myBox"</span> type = <span class="string">"checkbox"</span> value = <span class="string">"333"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;select v-model = =<span class="string">"selection"</span>&gt;</span><br><span class="line">    &lt;option v-<span class="keyword">for</span>=<span class="string">"item in selectOption"</span> :value = <span class="string">"item.value"</span>&gt;&#123;&#123; item <span class="keyword">in</span> text &#125;&#125;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">    &lt;option value = "2"&gt;2222222&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123; selection &#125;&#125;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data () &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            myValue:'',</span></span><br><span class="line"><span class="regexp">            myBox:[],</span></span><br><span class="line"><span class="regexp">            selection:null,</span></span><br><span class="line"><span class="regexp">            selectOption:[</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    text:'apple',</span></span><br><span class="line"><span class="regexp">                    value:0</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    text:'banana',</span></span><br><span class="line"><span class="regexp">                    value:1</span></span><br><span class="line"><span class="regexp">                &#125;,  </span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    text:'pinaapple',</span></span><br><span class="line"><span class="regexp">                    value:2</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">            ]</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; hello &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;div v-html="hello"&gt;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div v-text=<span class="string">"hello"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &#123;&#123; status ? <span class="string">'success'</span> : <span class="string">'fail'</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;p v-<span class="keyword">for</span> = <span class="string">"(item,index) in list"</span>&gt;&#123;&#123; item.name &#125;&#125; - &#123;&#123; item.price &#125;&#125; - &#123;&#123; index &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-for = "(value,key) in objList"&gt;&#123;&#123; value &#125;&#125;-&#123;&#123; key &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        data ()&#123;</span></span><br><span class="line"><span class="regexp">            return &#123;</span></span><br><span class="line"><span class="regexp">                hello: "&lt;p&gt;world&lt;/</span>p&gt;<span class="string">",</span></span><br><span class="line"><span class="string">                num: 1,</span></span><br><span class="line"><span class="string">                status: true,</span></span><br><span class="line"><span class="string">                list:[</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        name: 'apple',</span></span><br><span class="line"><span class="string">                        price: 34</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        name: 'banana',</span></span><br><span class="line"><span class="string">                        price: 34</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                ],</span></span><br><span class="line"><span class="string">                objList:&#123;</span></span><br><span class="line"><span class="string">                    name: "</span>apple<span class="string">",</span></span><br><span class="line"><span class="string">                    price: 34,</span></span><br><span class="line"><span class="string">                    color: "</span>pink<span class="string">",</span></span><br><span class="line"><span class="string">                    weight: 12</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内置动画"><a href="#内置动画" class="headerlink" title="内置动画"></a>内置动画</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=<span class="string">"show = !show"</span>&gt; Toogle &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;transition name="fade"&gt;  </span></span><br><span class="line"><span class="regexp">       &lt;p v-show = "show"&gt; i am show &lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">    @before-enter=<span class="string">"beforeEnter"</span> </span><br><span class="line">    @enter=<span class="string">"enter"</span> </span><br><span class="line">    @leave=<span class="string">"leave"</span> </span><br><span class="line">    :css=<span class="string">"false"</span> &gt;</span><br><span class="line">        &lt;p <span class="class"><span class="keyword">class</span> </span>= <span class="string">"animate-p"</span> v-show=<span class="string">"show"</span>&gt;i am show&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>transition&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">    .fade-enter-active,.fade-leave-active &#123;</span></span><br><span class="line"><span class="regexp">        transition:all .5s;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .fade-enter,.fade-leave-active&#123;</span></span><br><span class="line"><span class="regexp">        opacity:0;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            beforeEnter:<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">                $(el).css(&#123;</span><br><span class="line">                    left:<span class="string">"-500px"</span>,</span><br><span class="line">                    opacity:<span class="number">0</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            enter:<span class="function"><span class="keyword">function</span>(<span class="params">el,done</span>)</span>&#123;</span><br><span class="line">                $(el).animate(&#123;</span><br><span class="line">                    left:<span class="number">0</span>,</span><br><span class="line">                    opacity:<span class="number">1</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                    duration:<span class="number">1500</span>,</span><br><span class="line">                    complete:done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            leave:<span class="function"><span class="keyword">function</span>(<span class="params">el,done</span>)</span>&#123;</span><br><span class="line">                $(el).animate(&#123;</span><br><span class="line">                    left:<span class="string">"500px"</span>,</span><br><span class="line">                    opacity:<span class="number">0</span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line">                    duration:<span class="number">1500</span>,</span><br><span class="line">                    complete:done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件交互"><a href="#组件交互" class="headerlink" title="组件交互"></a>组件交互</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;comp-a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comp-a</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:is</span>=<span class="string">"comToRender"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">       // is的好处是可以渲染不同的组件</span></span><br><span class="line"><span class="xml">       </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    import ComA from './</span>components/a<span class="string">'</span></span><br><span class="line"><span class="string">    export default&#123;</span></span><br><span class="line"><span class="string">        components:&#123;</span></span><br><span class="line"><span class="string">            ComA</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data ()&#123;</span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                comToRender:"com-a"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>父组件向子组件传递信息的是passProps，props接受的参数形式可以是数组，也可以是对象。<br>子组件向父组件传递信息的是emitEvents</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在父组件中引入子组件,并在子组件标签中传递参数,参数大小写不敏感（父组件页面）</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;comp-a number=<span class="number">5</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comp-a</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:is</span>=<span class="string">"comToRender"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">       //接受子组件的事件</span></span><br><span class="line">        &lt;com-a @my-event="getMyEvent"&gt;&lt;/com-a&gt;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> ComA <span class="keyword">from</span> <span class="string">'./components/a'</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">            ComA</span><br><span class="line">        &#125;,</span><br><span class="line">        data ()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                comToRender:<span class="string">"com-a"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getMyEvent (hello)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'i got my event'</span>+hello);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/将父组件传给子组件的参数number渲染到子组件中（子组件页面）</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">       &#123;&#123; hello &#125;&#125;</span></span><br><span class="line"><span class="regexp">       &#123;&#123; number &#125;&#125;       </span></span><br><span class="line"><span class="regexp">       &lt;button @click="emitMyEvent"&gt;emit&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        props:[<span class="string">'number'</span>],</span><br><span class="line">        data ()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">               hello:<span class="string">'i am a child component'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            emitMyEvent () &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'my-event'</span>,<span class="keyword">this</span>.hello);<span class="comment">//my-event:自定义事件，this.hello:参数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript</title>
      <link href="/2017/09/09/JavaScript/"/>
      <url>/2017/09/09/JavaScript/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript与其他语言的关系"><a href="#JavaScript与其他语言的关系" class="headerlink" title="JavaScript与其他语言的关系"></a>JavaScript与其他语言的关系</h3><ul><li>Java是JavaScript语法的参考模型，他同时影响JavaScript将值分为原始类型和对象类型，以及日期构造函数。(一直听说JavaScript与java没关系，现在发现还是有血缘关系的，而且es6之后增加了块级作用域等，更像java语法了)</li><li>AWK给了JavaScript函数的灵感，JavaScript的关键字function来源于AWK</li><li>因为Scheme，JavaScript拥有第一类函数和闭包</li><li>Perl和Python影响了JavaScript对字符串、数组和正则表达式的处理方式</li><li>HyperTalk启发了JavaScript如何集成到浏览器，这使得HTML标签拥有事件处理属性</li></ul><h3 id="基础JavaScript"><a href="#基础JavaScript" class="headerlink" title="基础JavaScript"></a>基础JavaScript</h3><h4 id="原始值和对象"><a href="#原始值和对象" class="headerlink" title="原始值和对象"></a>原始值和对象</h4><ul><li>原始值包括布尔值、数字、字符串、null、undefined</li><li>其他的值为对象，常见的对象有:简单对象，数组，正则表达式。<br>原始值与对象最主要的区别在于他们的比较方式：每个对象都有唯一的标识且仅（严格的）等于本身。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj1); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><p>所有的原始值，只要编码值相同，则被认为相等。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1 === num2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>auguments不是数组，但是类似于数组：具有length属性，可以用[]去访问元素，但是不能移除他的元素，也不调用数组的方法。<br>强制函数参数的长度<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pair</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length !== <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"需要两个参数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>强制将arguments转换成数组<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="变量提升特性"><a href="#变量提升特性" class="headerlink" title="变量提升特性"></a>变量提升特性</h4><p>所有变量生命都会被提升：声明会被移动到函数的开始出，而赋值则仍然会在原来的位置进行。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(abc);  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数执行顺序</span></span><br><span class="line"><span class="keyword">var</span> abc;</span><br><span class="line"><span class="built_in">console</span>.log(abc);  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">     num ++;</span><br><span class="line">     <span class="built_in">console</span>.log(num);</span><br><span class="line"> &#125;</span><br><span class="line">add(<span class="number">1</span>);<span class="comment">//2</span></span><br><span class="line">add(<span class="number">1</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num ++;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = closure(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result());<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(result());<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包造成的无意共享</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</span><br><span class="line">    result.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> i;&#125;);<span class="comment">//此时i永远为5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用IIFE:立即调用函数表达式</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> j = i ;</span><br><span class="line">        arr1.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">1</span>]());<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">4</span>]());<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li><p>使用字面量创建普通对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preson = &#123;</span><br><span class="line">    name: Crystal,</span><br><span class="line">    age: <span class="number">23</span>,</span><br><span class="line">    descroipt: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'an adorable girl'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用.操作符与[ ]获取与设置对象属性，获取不存在的属性将会得到undefined。</p></li><li>使用in运算符检查属性是否存在，结果为true或false。</li><li>使用delete运算符移除属性。</li></ul><h4 id="构造函数与实例"><a href="#构造函数与实例" class="headerlink" title="构造函数与实例"></a>构造函数与实例</h4><p>构造函数就是对象工厂，按照惯例，构造函数的名称以大写字母开头<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">Point.prototype.dist = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.x + <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用new运算符来使用Point</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//p为Point的一个实例</span></span><br><span class="line">p.dist(); <span class="comment">//7</span></span><br></pre></td></tr></table></figure></p><h4 id="正则表达式的三种方法"><a href="#正则表达式的三种方法" class="headerlink" title="正则表达式的三种方法"></a>正则表达式的三种方法</h4><ol><li>test()方法：匹配</li><li>exec()方法：匹配以及捕获分组</li><li>replace()方法：搜索和替换</li></ol><h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><p>eval在语句的上下文中解析他的参数，如果需要eval返回一个对象，需要用小括号将对象字面量括起来<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">'&#123;foo:233&#125;'</span>);<span class="comment">//233</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'(&#123;foo:223&#125;)'</span>);<span class="comment">//&#123;foo:223&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript小知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo个人博客</title>
      <link href="/2017/08/24/hexo/"/>
      <url>/2017/08/24/hexo/</url>
      
        <content type="html"><![CDATA[<p>上一篇博客更新的时间是7月25，今天已经是8月24了，一个月都没更新博客了，不能说明这一个月没有学到新的知识点，只能说这个月的事情太多了，这是值得纪念的一个月。本来想总结一下，但是又怕觉得矫情，不过昨天刚结束完公司的事情，自己的事情还一大堆。由于换了新电脑，hexo的环境要重新再建，折腾了一上午，现在趁着还记得操作步骤，把他记下来，不然下次换电脑，又要开始重新找资料。（一个月不操作，md文档都不会了，还是看着文档写的。）</p><h3 id="在E盘下输入命令"><a href="#在E盘下输入命令" class="headerlink" title="在E盘下输入命令"></a>在E盘下输入命令</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init fileName  </span><br><span class="line">cd fileName</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h3><p>我用的主题是<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>，首先在fileName中输入以下命令<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/tufu9441/maupassant-hexo.git themes/maupassant</span></span><br><span class="line">$ npm install hexo-renderer-jade@<span class="number">0.3</span><span class="number">.0</span> --save</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure></p><h3 id="配置fileName文件下的-config-yml主要参数，其他地方默认即可"><a href="#配置fileName文件下的-config-yml主要参数，其他地方默认即可" class="headerlink" title="配置fileName文件下的_config.yml主要参数，其他地方默认即可"></a>配置fileName文件下的_config.yml主要参数，其他地方默认即可</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: zlstory</span><br><span class="line">subtitle: </span><br><span class="line">description: 个人学习小结</span><br><span class="line">author: zilan</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line">url: http:<span class="comment">//zlstory.com</span></span><br><span class="line">root: <span class="regexp">/</span></span><br><span class="line"><span class="regexp">permalink: :year/</span>:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line">theme: maupassant</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:zlstory/zlstory.github.io.git</span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br></pre></td></tr></table></figure><h3 id="配置maupassant目录下的-config-yml文件"><a href="#配置maupassant目录下的-config-yml文件" class="headerlink" title="配置maupassant目录下的_config.yml文件"></a>配置maupassant目录下的_config.yml文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fancybox - 是否启用Fancybox图片灯箱效果</span><br><span class="line">disqus - Disqus评论 shortname</span><br><span class="line">gitment - Gitment评论相关参数</span><br><span class="line">uyan - 友言评论 id</span><br><span class="line">livere - 来必力评论 data-uid</span><br><span class="line">changyan - 畅言评论 appid</span><br><span class="line">google_search - 默认使用Google搜索引擎</span><br><span class="line">baidu_search - 若想使用百度搜索，将其设定为<span class="literal">true</span>。</span><br><span class="line">swiftype - Swiftype 站内搜索key</span><br><span class="line">tinysou - 微搜索 key</span><br><span class="line">self_search - 基于jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。</span><br><span class="line">google_analytics - Google Analytics 跟踪ID</span><br><span class="line">baidu_analytics - 百度统计 跟踪ID</span><br><span class="line">show_category_count - 是否显示侧边栏分类数目</span><br><span class="line">toc_number - 是否显示文章中目录列表自动编号</span><br><span class="line">shareto - 是否使用分享按鈕，需要安装hexo-helper-qrcode插件使用</span><br><span class="line">busuanzi - 是否使用不蒜子页面访问计数</span><br><span class="line">widgets_on_small_screens - 是否在移动设备屏幕底部显示侧边栏</span><br><span class="line">canvas_nest - 是否使用canvas动态背景</span><br><span class="line">donate - 是否启用捐赠按钮</span><br><span class="line">menu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照相关说明使用。</span><br><span class="line">widgets - 选择和排列希望使用的侧边栏小工具。</span><br><span class="line">links - 友情链接，请依照格式填写。</span><br><span class="line">timeline - 网站历史时间线，在页面front-matter中设置layout: timeline可显示。</span><br><span class="line">Static files - 静态文件存储路径，方便设置CDN缓存。</span><br><span class="line">Theme version - 主题版本，便于静态文件更新后刷新CDN缓存。</span><br></pre></td></tr></table></figure><p>我用的是本地搜索，即self_search:true,需要在fileName中安装一个jq的插件， npm install hexo-generator-search –save，另外disqus需翻墙使用。</p><h3 id="将hexo与github相连接"><a href="#将hexo与github相连接" class="headerlink" title="将hexo与github相连接"></a>将hexo与github相连接</h3><p>就是为了hexo d的时候，能直接更新github中的内容，首先<a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank" rel="noopener">配置ssh</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>然后一直按enter，然后生成三个文件，默认目录是C:\Users\Administrator.ssh，将id_rsa.pub放在github的SSH和GPG密钥中。再配置git的用户名和密码<br>在使用hexo -d之前 要安装一个插件：npm install hexo-deployer-git –save</p><h3 id="域名的绑定"><a href="#域名的绑定" class="headerlink" title="域名的绑定"></a>域名的绑定</h3><p>新建一个CNAME文件，内容就是<a href="http://www.zlstory.com,放在source文件夹下，不能放在fileName文件夹中，否则hexo" target="_blank" rel="noopener">www.zlstory.com,放在source文件夹下，不能放在fileName文件夹中，否则hexo</a> d的时候会消失，神奇。还有要安装rss插件，虽然我不知道有什么用这个东西，虽然有人解释过，但是他出现了，那就装一下吧：npm install hexo-generator-feed –save，然后再theme的配置文件中加入rss: /atom.xml。</p><p>备注：这篇文章不是为了教你怎么利用hexo加github搭建博客的，只是为了我自己下次换电脑方便，哈哈哈~</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>响应式开发</title>
      <link href="/2017/07/25/responsive/"/>
      <url>/2017/07/25/responsive/</url>
      
        <content type="html"><![CDATA[<p>响应式设计：能够根据视口变化控制页面文档流，简单的来说就是针对任意设备对网页内容进行完美布局的一种显示机制。<br>媒体查询：在不改变页面内容的情况下，为特定的一些输出设备定制显示效果。</p><h3 id="视口与屏幕尺寸"><a href="#视口与屏幕尺寸" class="headerlink" title="视口与屏幕尺寸"></a>视口与屏幕尺寸</h3><p>视口：浏览器窗口内的内容区域，不包含工具栏、标签栏等。<br>屏幕尺寸：设备的物理显示区域。</p><h3 id="媒体查询的特性"><a href="#媒体查询的特性" class="headerlink" title="媒体查询的特性"></a>媒体查询的特性</h3><ol><li>width：视口宽度</li><li>height：视口高度</li><li>device-width：设备屏幕的宽度</li><li>device-height：设备屏幕的高度</li><li>orientation：检查设备处于横向还是纵向</li><li>aspect-ratio：基于视口宽度和高度的比</li><li>device-aspect-ratio：基于设备渲染平面宽度和高度的宽高比</li><li>color：每种颜色的位数</li><li>color-index：设备的颜色索引表中的颜色数，值为非负整数</li><li>monochrome：检测单色帧缓冲区中没像素所使用的位数，值为非负整数</li><li>resolution：用来检测屏幕或者打印机的分辨率</li><li>scan：电视机的扫描方式，值为：progressive(逐渐扫描)、interlace(隔行扫描)</li><li>grid：用来检测输出设备是网格设备还是位图设备</li></ol><p>媒体查询可使用min和max来创建一个查询范围，除了scan和grid之外。</p><h3 id="渐进增强与优雅降级"><a href="#渐进增强与优雅降级" class="headerlink" title="渐进增强与优雅降级"></a>渐进增强与优雅降级</h3><p>优雅降级：指的是为现代浏览器制作网站，然后保证为某些老版本浏览器提供基本可用的<br>体验。新特性在老版本浏览器中会降级，且一般会有一个分界点，声明不支持那些老掉<br>牙的浏览器。有些时候用户也仅会被警告他们所使用的浏览器有问题，建议其更换（如<br>“您的浏览器老得让人笑话——建议下载最新版浏览器！”）</p><p>渐进增强：与优雅降级恰好相反。渐进增强以恪守 Web标准的标签为基础，意味着它在所<br>有浏览器中均可用。然后通过 CSS 样式和必要的 JavaScript 来为更先进的浏览器提供渐<br>进式的增强体验</p><h3 id="px-em与rem"><a href="#px-em与rem" class="headerlink" title="px em与rem"></a>px em与rem</h3><p>px：像素，用px设置字体大小的时候，优点是精确，但是不支持浏览器缩放和移动端的兼容。因为有些手机屏幕太大啦，而像素却是固定的，所以有了em(相对值)<br>em：根据父元素来对应字体大小，麻烦的是每次都要找他父级元素的值，于是有了rem<br>rem：根据根元素html的font-size来设置字体大小。</p><p>但是IE8及以下都不支持em与rem属性，解决办法是px与rem一起使用，以达到兼容效果。例如：<br>p {font-size:14px; font-size:.875rem;}</p><p>在线转换工具：<a href="http://pxtoem.com/" target="_blank" rel="noopener">http://pxtoem.com/</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用js判断设备宽度以改变文字大小</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = <span class="number">50</span> * (clientWidth / <span class="number">375</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    win.addEventListener(resizeEvt, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(tid);</span><br><span class="line">        tid = setTimeout(recalc, <span class="number">300</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    win.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">            clearTimeout(tid);</span><br><span class="line">            tid = setTimeout(recalc, <span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        tid = setTimeout(recalc, <span class="number">0</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    recalc();</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6学习笔记(下)</title>
      <link href="/2017/07/14/es6_2/"/>
      <url>/2017/07/14/es6_2/</url>
      
        <content type="html"><![CDATA[<h3 id="Proxy（代理）和Reflect（反射）的概念"><a href="#Proxy（代理）和Reflect（反射）的概念" class="headerlink" title="Proxy（代理）和Reflect（反射）的概念"></a>Proxy（代理）和Reflect（反射）的概念</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        time:<span class="string">'2017-7-18'</span>,</span><br><span class="line">        name:<span class="string">'Crystal'</span>,</span><br><span class="line">        _r:<span class="number">123</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> monitor = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">        <span class="comment">//拦截对象属性的读取</span></span><br><span class="line">        get(target,key)&#123;</span><br><span class="line">            <span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//拦截对象属性的设置</span></span><br><span class="line">        set(target,key,value)&#123;</span><br><span class="line">            <span class="comment">//只允许修改name属性</span></span><br><span class="line">            <span class="keyword">if</span>(key === <span class="string">"name"</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key] = value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//判断当前对象中是否有某属性</span></span><br><span class="line">        has(target,key,value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key === <span class="string">'name'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target [key];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        deleteProperty(target,key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.indexOf(<span class="string">"_"</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">delete</span> target[key];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//拦截object.keys、object.getOwnPropertySymbols、object.getOwnPropertyNames</span></span><br><span class="line">        ownKeys(target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.target(target).filter(<span class="function"><span class="params">item</span> =&gt;</span> item != <span class="string">"time"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(monitor.time);<span class="comment">//2018-7-18</span></span><br><span class="line">    monitor.time = <span class="string">"2018"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( monitor.time);<span class="comment">//2018-7-18(无修改)</span></span><br><span class="line">    monitor.name = <span class="string">"Sinsle"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(monitor.name);<span class="comment">//Sinsle(已修改)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> monitor,<span class="string">"time"</span> <span class="keyword">in</span> monitor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> monitor.time;</span><br><span class="line">    <span class="built_in">console</span>.log(monitor);<span class="comment">//没有删除time</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> monitor._r;</span><br><span class="line">    <span class="built_in">console</span>.log(monitor);<span class="comment">//删除_r属性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ownkeys'</span>,<span class="built_in">Object</span>.keys(monitor));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;   <span class="comment">//Reflect的方法与属性和Proxy相同</span></span><br><span class="line">     <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        time:<span class="string">'2017-7-18'</span>,</span><br><span class="line">        name:<span class="string">'Crystal'</span>,</span><br><span class="line">        _r:<span class="number">123</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.get(obj,<span class="string">"time"</span>));<span class="comment">//2017-7-18</span></span><br><span class="line">    <span class="built_in">Reflect</span>.set(obj,<span class="string">"name"</span>,<span class="string">"sinsle"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.has(obj,<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Proxy和Reflect的适用场景"><a href="#Proxy和Reflect的适用场景" class="headerlink" title="Proxy和Reflect的适用场景"></a>Proxy和Reflect的适用场景</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</span><br><span class="line">            _validator:validator,</span><br><span class="line">            set(target,key,value,proxy)&#123;</span><br><span class="line">                <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</span><br><span class="line">                    <span class="keyword">let</span> val = <span class="keyword">this</span>._validator[key];</span><br><span class="line">                    <span class="keyword">if</span>(!!val(value))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="built_in">Error</span> (<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span>到<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> personValidator = &#123;</span><br><span class="line">        name(val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">"string"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        age(val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">"number"</span> &amp;&amp; val &gt;=<span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> validator(<span class="keyword">this</span>,personValidator);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">"Crystal"</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(person);<span class="comment">//Proxy &#123;name: "Crystal", age: 23&#125;</span></span><br><span class="line"></span><br><span class="line">    person.name = <span class="number">48</span>;<span class="comment">//报错：不能设置name到48</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>基本定义与生成实例<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent(<span class="string">'v'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>,v_parent);<span class="comment">//构造函数和实例 Parent &#123;name: "v"&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"继承"</span>,<span class="keyword">new</span> Child());<span class="comment">//继承 Child &#123;name: "crystal"&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//子类传递给父类 super</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;       </span><br><span class="line">        <span class="keyword">constructor</span>(name = "zilan")&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);<span class="comment">//super需在第一行</span></span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">"child"</span>;<span class="comment">//定义自己属性时需要有this关键字，在super之后</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"传递属性"</span>,<span class="keyword">new</span> Child());<span class="comment">//传递属性 Child &#123;name: "zilan", type: "child"&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> tell()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"静态方法"</span>);<span class="comment">//通过类来调用，不通过类的实例调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Parent.tell();<span class="comment">//静态方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> tell()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"静态方法"</span>);<span class="comment">//static定义静态方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义静态属性</span></span><br><span class="line">    Parent.type = <span class="string">"静态属性"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(Parent.type);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getter与setter"><a href="#getter与setter" class="headerlink" title="getter与setter"></a>getter与setter</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = "crystal")&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        get longName()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'love '</span> + <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">        set longName(value)&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="keyword">new</span> Parent();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getter:"</span>,v.longName);<span class="comment">//getter: love crystal</span></span><br><span class="line">    v.longName = <span class="string">"sinsle"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setter:"</span>,v.longName);<span class="comment">//setter: love sinsle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h4 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"执行"</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback &amp;&amp; callback.call()   </span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout1"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"执行2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise"</span>,<span class="string">"setTimeout2"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"执行3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout3'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;   <span class="comment">//catch捕获错误</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"执行4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ajax(<span class="string">"str"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"catch"</span>,err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有图片加载完成再加载图片</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve(img);</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</span><br><span class="line">        imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.all([</span><br><span class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB11rUOSXXXXXXVaXXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB1SpARSXXXXXaCapXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.alicdn.com/simba/img/TB1J.5xSXXXXXbJXFXXSutbFXXX.jpg'</span>)</span><br><span class="line">    ]).then(showImgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>谁先加载完成就先显示<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve(img);</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">        p.appendChild(img);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.race([<span class="comment">//有一个状态改变 则改变  只显示一张图片 其他忽略</span></span><br><span class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB11rUOSXXXXXXVaXXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.alicdn.com/tfs/TB1SpARSXXXXXaCapXXXXXXXXXX-520-280.jpg_q90_.webp'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.alicdn.com/simba/img/TB1J.5xSXXXXXbJXFXXSutbFXXX.jpg'</span>)</span><br><span class="line">    ]).then(showImgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Iterator和for-of循环"><a href="#Iterator和for-of循环" class="headerlink" title="Iterator和for  of循环"></a>Iterator和for  of循环</h3><h4 id="什么是Iterator"><a href="#什么是Iterator" class="headerlink" title="什么是Iterator"></a>什么是Iterator</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line">    <span class="keyword">let</span> map = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">    <span class="built_in">console</span>.log(map.next());</span><br><span class="line">    <span class="built_in">console</span>.log(map.next());</span><br><span class="line">    <span class="built_in">console</span>.log(map.next());</span><br><span class="line">    <span class="comment">// Object &#123;value: "hello", done: false&#125;</span></span><br><span class="line">    <span class="comment">// Object &#123;value: "world", done: false&#125;</span></span><br><span class="line">    <span class="comment">// Object &#123;value: undefined, done: true&#125; true代表循环结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Iterator的基本用法"><a href="#Iterator的基本用法" class="headerlink" title="Iterator的基本用法"></a>Iterator的基本用法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;   <span class="comment">//先遍历start,再遍历end</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        start:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">        end:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">            <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = self.start.concat(self.end);</span><br><span class="line">            <span class="keyword">let</span> len = arr.length;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next()&#123;</span><br><span class="line">                    <span class="keyword">if</span>(index&lt;len)&#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;</span><br><span class="line">                            value:arr[index++],</span><br><span class="line">                            done:<span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;</span><br><span class="line">                            value:arr[index++],</span><br><span class="line">                            done:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);<span class="comment">//1 2 3 4  7 8 9 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> tell = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'c'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> k = tell();</span><br><span class="line">    <span class="built_in">console</span>.log(k.next());</span><br><span class="line">    <span class="built_in">console</span>.log(k.next());</span><br><span class="line">    <span class="built_in">console</span>.log(k.next());</span><br><span class="line">    <span class="built_in">console</span>.log(k.next());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Object &#123;value: "a", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "b", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "c", done: true&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: undefined, done: true&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);<span class="comment">//1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个事务只有三个状态</span></span><br><span class="line">    <span class="keyword">let</span> state = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'B'</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'C'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> states = state();</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//另一种方法</span></span><br><span class="line">    <span class="keyword">let</span> state = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">await</span> <span class="string">'B'</span>;</span><br><span class="line">            <span class="keyword">await</span> <span class="string">'C'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> states = state();</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="built_in">console</span>.log(states.next());</span><br><span class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "A", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "B", done: false&#125;</span></span><br><span class="line">    <span class="comment">//Object &#123;value: "C", done: false&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽奖次数的限制</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//具体抽奖次数</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次数`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> residue = <span class="function"><span class="keyword">function</span>* (<span class="params">count</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            count --;</span><br><span class="line">            <span class="keyword">yield</span> draw(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> star = residue(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    btn.id = <span class="string">'start'</span>;</span><br><span class="line">    btn.textContent = <span class="string">"抽奖"</span>;</span><br><span class="line">    documnent.body.appendChild(btn);</span><br><span class="line">    docunment.getELementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        star.next();</span><br><span class="line">    &#125;,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//长轮询</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve(&#123;code200&#125;);</span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pull = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> genertaor = ajax();</span><br><span class="line">        <span class="keyword">let</span> step = genertaor.next();</span><br><span class="line">        step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(d.code != <span class="number">0</span>)&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"wait"</span>);</span><br><span class="line">                    pull()</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pull();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>npm install babel-plugin-transform-decorators-legacy –save-dev<br>修改babellrc文件<br>“plugins”:[“transform-decorators-legacy”]</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>修饰器是一个函数  类class<br>第三方修饰器库：core-decorators:npm install core-decorators<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> readonly = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">        descriptor.weitable = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> descriptor</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        @readonly</span><br><span class="line">        time()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"2017-07-19"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    test.time = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"修改了时间"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(test.time());<span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> typename = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">        target.myname = <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @typename</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"类修饰符"</span>,Test.myname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><h4 id="ES6的模块化语法"><a href="#ES6的模块化语法" class="headerlink" title="ES6的模块化语法"></a>ES6的模块化语法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;   <span class="comment">//A文件中导出</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">let</span> A = <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        test()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"class"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出的建议写法  更方便命名</span></span><br><span class="line">    <span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        test()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"class"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    esport <span class="keyword">default</span>&#123;</span><br><span class="line">        A,</span><br><span class="line">        test,</span><br><span class="line">        Hello</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用import导入</span></span><br><span class="line">    <span class="comment">//B文件中</span></span><br><span class="line">    <span class="keyword">import</span> &#123;A,test,Hello&#125; <span class="keyword">from</span> A</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当文件很多的时候  导入小技巧</span></span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> lesson <span class="keyword">from</span> <span class="string">'A'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(lesson.A,lesson.test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6学习笔记(上)</title>
      <link href="/2017/07/14/es6_1/"/>
      <url>/2017/07/14/es6_1/</url>
      
        <content type="html"><![CDATA[<p>es8已经出来了，是时候开始学习es6了。</p><p>ES6从2010年开始到2015年正式通过，过了15年。</p><p>环境要求：node</p><p>检验运行环境对ES6的支持情况：<br>    npm install -g es-checker<br>    es-checker</p><p>Babel转码器：不需要担心环境是否支持，babel会将es6转换成es5语法。[<a href="http://babeljs.io/]" target="_blank" rel="noopener">http://babeljs.io/]</a><br>在配置.babelrc文件时，在根目录中新建.babelrc文件(使用sublime等编辑器新建)。</p><p>注意：babel默认只转换新的JavaScript句法，不转换新增的API，所以需要安装支持新增API的方法babel-polyfill.<br>    npm install –save babel-polyfill<br>    再文件中import或者require此库。</p><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>ES5只有var与function可以声明变量，ES6中新增了let、const、class与import四种方法。</p><h3 id="let-const-作用域"><a href="#let-const-作用域" class="headerlink" title="let  const 作用域"></a>let  const 作用域</h3><p>es5：全局作用域  函数作用域<br>es6：新增块作用域 let const  只在用{  }包围内有效<br>es6强制使用严格模式：未定义使用 直接报错，而不是undefined，即不存在变量提升。<br>使用let不能重复定义相同变量<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//is not defined</span></span><br></pre></td></tr></table></figure></p><p> const定义的是常量不是变量，常量是不能修改的( read-only )，声明的时候必须赋值,但是const定义的对象（引用类型）则是可以改变的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">last</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">        <span class="keyword">const</span> k = &#123;</span><br><span class="line">            a:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        k.b = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(PI,k);<span class="comment">//3.1415926 Object &#123;a: 1, b: 3&#125;</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>是一种赋值方式，解构简单的说左右一一对应，允许使用默认值。<br>解构赋值的规则：只要等号右边的值不是对象就先将其转换成对象，由于undefined和null无法转换成对象，所以对他们进行解构赋值都会报错。<br>分为：数组解构赋值  对象解构赋值 字符串解构赋值   布尔值解构赋值   函数参数解构赋值   数值解构赋值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组类型结构赋值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a,b,reset;</span><br><span class="line">    [a,b]=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b,reset;</span><br><span class="line">[a,b,...reset]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,reset);</span><br><span class="line"><span class="comment">//reset 是一个数组[3,4,5,6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="正则扩展"><a href="#正则扩展" class="headerlink" title="正则扩展"></a>正则扩展</h3><p>新增：构造函数的变化  正则方法的扩展  u修饰符  y修饰符 s修饰符<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>,<span class="string">'i'</span>);</span><br><span class="line">    <span class="keyword">let</span> regex2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(regex.test(<span class="string">'xyz123'</span>),regex2.test(<span class="string">'xyz123'</span>));<span class="comment">//true,true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> regex3 = <span class="keyword">new</span> Regexp(<span class="regexp">/xyz/ig</span>,<span class="string">"i"</span>);<span class="comment">//第一个参数正则表达式 第二个参数是修饰符，则后面修饰符会覆盖前面正则表达式的修饰符</span></span><br><span class="line">    <span class="built_in">console</span>.log(regex3.flags);<span class="comment">//flags：用来获取正则表达式的修饰符</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"bbb_bb_b"</span>;</span><br><span class="line">    <span class="keyword">let</span> a1 = <span class="regexp">/b+/g</span>;</span><br><span class="line">    <span class="keyword">let</span> a2 = <span class="regexp">/b+/y</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"one"</span>,a1.exec(s),a2.exec(s));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"two"</span>,a1.exec(s),a2.exec(s));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a1.sticky,a2.sticky);<span class="comment">//sticky：验证是否开启y修饰符</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'u-1'</span>,/^\uD83D/.test(<span class="string">'\uD83D\uDC2A'</span>));<span class="comment">//u-1 true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'u-2'</span>,/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>));<span class="comment">//u-2 false</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">'a'</span>));<span class="comment">//false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符串知识"><a href="#字符串知识" class="headerlink" title="字符串知识"></a>字符串知识</h3><p>新增：Unicode表示法  遍历接口  模板字符串  新增方法</p><p>库：npm install babel-polyfill –sava-dev</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>,<span class="string">'\u0061'</span>);<span class="comment">//a a</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'s'</span>,<span class="string">'\u20bb7'</span>);<span class="comment">//s ₻7</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'s2'</span>,<span class="string">`\u&#123;20bb7&#125;`</span>);<span class="comment">//s2 𠮷</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//es5中乱码问题</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">'𠮷'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(s.length);<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'0'</span>,s.charAt(<span class="number">0</span>));<span class="comment">//0 �</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>,s.charAt(<span class="number">1</span>));<span class="comment">//1 �</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'at0'</span>,s.charCodeAt(<span class="number">0</span>));<span class="comment">//at0 55362</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'at1'</span>,s.charCodeAt(<span class="number">1</span>));<span class="comment">//at1 57271</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//es6中新增方法codePointAt()方法来获取码值</span></span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="string">'𠮷a'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(s1.length);<span class="comment">//3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>));<span class="comment">//code0 134071</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));<span class="comment">//code0 20bb7</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code1'</span>,s1.codePointAt(<span class="number">1</span>));<span class="comment">//code1 57271</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code2'</span>,s1.codePointAt(<span class="number">2</span>));<span class="comment">//code2 97</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//能不能处理Unicode字符大于0fffff</span></span><br><span class="line">    <span class="comment">//es5中</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">'0x20bb7'</span>));<span class="comment">//ஷ</span></span><br><span class="line">    <span class="comment">//es6中</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="string">'0x20bb7'</span>));<span class="comment">//𠮷</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'\u&#123;20bb7&#125;abc'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'es5'</span>,str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//es5 �   es5 �  es5 a  es5 b   es5 c</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">of</span> str)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'es6'</span>,code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//es6 𠮷    es6 a   es6 b   es6 c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="includes-startsWith-endWith"><a href="#includes-startsWith-endWith" class="headerlink" title="includes()  startsWith()  endWith()"></a>includes()  startsWith()  endWith()</h4><p>之前的js只有indexof方法来确定一个字符串是否包含在另一个字符串中，ES6又提供了这三种新的方法，返回的都是布尔值，第一个参数是要搜索的字符串，第二个参数表示起始位置。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断字符串中是不是包含某些字符</span></span><br><span class="line">    <span class="keyword">let</span> str1 = <span class="string">'string'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'includes'</span>,str1.includes(<span class="string">"r"</span>));<span class="comment">//includes true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'includes'</span>,str1.includes(<span class="string">"c"</span>));<span class="comment">//includes false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断某些字符串是否以某字符为起始</span></span><br><span class="line">    <span class="built_in">console</span>,log(<span class="string">"start"</span>,str1.startWith(<span class="string">"str"</span>));<span class="comment">// start true</span></span><br><span class="line">    <span class="built_in">console</span>,log(<span class="string">"end"</span>,str1.endWith(<span class="string">"ng"</span>));<span class="comment">// end true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>复制原字符串n次，参数为小数时会被取整，若为负数或者infinity，则报错；NaN等同于0。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="comment">//字符串复制功能</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>));<span class="comment">//abcabc</span></span><br><span class="line">    <span class="comment">//模板字符串</span></span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"list"</span>;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="string">`i am <span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;info&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(m);<span class="comment">//i am list,hello world</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//标签模板:防止xss攻击;处理多语言</span></span><br><span class="line">    <span class="keyword">let</span> user1 = &#123;</span><br><span class="line">        name:<span class="string">"list"</span>,</span><br><span class="line">        info:<span class="string">"hello world"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    abc<span class="string">`i am <span class="subst">$&#123;user1.name&#125;</span>,<span class="subst">$&#123;user1.info&#125;</span>`</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s,v1,v2</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(s,v1,v2);</span><br><span class="line">        <span class="keyword">return</span> s+v1+v2;<span class="comment">//i am ,,,listhello world</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//raw 对所有的\符号都不转义</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);<span class="comment">//Hi\n3</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);<span class="comment">//Hi  换行 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><p>新增方法：<br>方法调整：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">    <span class="comment">//二进制以0b开头</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0b111110100</span>);<span class="comment">//500</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//八进制以0o开头</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0o754</span>);<span class="comment">//492</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#123;   <span class="comment">//isFinite判断是不是数 isNaN</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'15'</span>,<span class="built_in">Number</span>.isFinite(<span class="number">15</span>));<span class="comment">//15 true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>));<span class="comment">//NaN false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1/0'</span>,<span class="built_in">Number</span>.isFinite(<span class="number">1</span>/<span class="number">0</span>));<span class="comment">//1/0 false</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断是不是整数（保证参数是一个数字）</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'25'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25</span>));<span class="comment">//25 true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'25.0'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.0</span>));<span class="comment">//25.0 true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'25.1'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>));<span class="comment">//25.1 false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'crystal'</span>,<span class="built_in">Number</span>.isInteger(<span class="string">"crystal"</span>));<span class="comment">//crystal false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'crystal'</span>,<span class="built_in">Number</span>.isInteger(crystal));<span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;   <span class="comment">//MAX_SAFE_INTEGER 常量  表示最大上限  </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER);<span class="comment">//9007199254740991</span></span><br><span class="line">    <span class="comment">//最小下限</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER);<span class="comment">//-9007199254740991</span></span><br><span class="line">    <span class="comment">//判断一个数是否是安全的（在上下限范围之内）（保证参数是一个数字）</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"10"</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="number">10</span>));<span class="comment">//10 true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取小数的整数部分</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"4.1"</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.1</span>));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"4.9"</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.9</span>));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断一个数是正数负数或者是0  返回值：-1 0  1  NaN</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'-5'</span>,<span class="built_in">Math</span>.sign(<span class="number">-5</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'0'</span>,<span class="built_in">Math</span>.sign(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'5'</span>,<span class="built_in">Math</span>.sign(<span class="number">5</span>));    </span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//立方根</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"-1"</span>,<span class="built_in">Math</span>.cbrt(<span class="number">-1</span>));<span class="comment">//-1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"8"</span>,<span class="built_in">Math</span>.cbrt(<span class="number">8</span>));<span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组扩展方法"><a href="#数组扩展方法" class="headerlink" title="数组扩展方法"></a>数组扩展方法</h3><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p>把一个集合转义成数组。也有map的用法，两个参数：第一个是数组，第二个是函数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//打印页面中所有p节点的内容</span></span><br><span class="line">    <span class="keyword">let</span> p = docunment.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line">    <span class="keyword">let</span> pArr = <span class="built_in">Array</span>.from(p);</span><br><span class="line">    pArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item.textContent);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item*<span class="number">2</span>;<span class="comment">//[2, 6, 10, 14]</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h4><p>将一组值转换成数组<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">// [3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">    <span class="comment">//没有参数情况下 返回空数组</span></span><br><span class="line">    <span class="keyword">let</span> empty = <span class="built_in">Array</span>.of();</span><br><span class="line">    <span class="built_in">console</span>.log(empty);<span class="comment">//[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h4><p>使用频率不高<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;   <span class="comment">//替换起始位置 读取起始位置 结束位置</span></span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//[4, 2, 3, 4, 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find\findIndex"></a>find\findIndex</h4><p>find与findIndex只找到第一个符合条件的值与下标，参数可为函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">3</span>;<span class="comment">//只返回4</span></span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">3</span>;<span class="comment">//返回4的下标 3</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>填充<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fill-7'</span>,[<span class="string">'a'</span>,<span class="number">1</span>,<span class="literal">undefined</span>].fill(<span class="number">7</span>));<span class="comment">//[7,7,7]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fill,pos'</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//第一个是替换的 第二个是起始位置（从1开始) 第二个是结束位置 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="entries-keys-values"><a href="#entries-keys-values" class="headerlink" title="entries\keys\values"></a>entries\keys\values</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].keys())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"keys"</span>,index);<span class="comment">//key 0  key 1  key 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要兼容库</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].values())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"values"</span>,index);<span class="comment">//取到的是值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既取值又取索引</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> [index,value] <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].entries())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(index,value);<span class="comment">//0 "1"   1 "c"    2 "ks"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p>判断数组中是否包含某个值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));<span class="comment">//number true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>));<span class="comment">//number true  NaN==NaN  es5中则做不到</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><p>ES5中参数默认值使用||符号,es6中默认值参数须是最后一个参数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y = <span class="string">"world"</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"默认值"</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>);<span class="comment">//默认值 1 world</span></span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//默认值 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//函数作用域</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">'test'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">x,y=x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'作用域'</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    test2(<span class="string">'kill'</span>);<span class="comment">//作用域 kill kill</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arg)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'rest'</span>,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    test3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//rest 1  rest2....rest7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>把数组转成离散的值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);<span class="comment">//a,1,2,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arrow = <span class="function"><span class="params">v</span> =&gt;</span> v*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arrow(<span class="number">3</span>));<span class="comment">//6</span></span><br><span class="line">    <span class="comment">//如果没有参数，则用()代替</span></span><br><span class="line">    <span class="keyword">let</span> arrow2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h4><p>提高性能<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tail'</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tail(x);</span><br><span class="line">    &#125;</span><br><span class="line">    f(<span class="number">12</span>);<span class="comment">//tail 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><h4 id="简洁表示法"><a href="#简洁表示法" class="headerlink" title="简洁表示法"></a>简洁表示法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> es5 = &#123;</span><br><span class="line">        o:o,</span><br><span class="line">        k:k</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> es6 = &#123;</span><br><span class="line">        o,</span><br><span class="line">        k</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(es5,es6);<span class="comment">//Object &#123;o: 1, k: 2&#125; Object &#123;o: 1, k: 2&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果对象中有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> es5_method = &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> es6_method = &#123;</span><br><span class="line">        hello()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(es5_method.hello(),es6_method.hello());<span class="comment">//hello  hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">'b'</span>;</span><br><span class="line">    <span class="keyword">let</span> es5_obj = &#123;</span><br><span class="line">        a:<span class="string">'c'</span>,</span><br><span class="line">        b:<span class="string">'c'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> es6_obj = &#123;</span><br><span class="line">        [a]:<span class="string">'c'</span>   <span class="comment">//[a]是一个表达式，实现变量依赖</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(es5_obj,es6_obj);<span class="comment">//Object &#123;a: "c", b: "c"&#125; Object &#123;b: "c"&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展运算符-1"><a href="#扩展运算符-1" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>要扩展库,babel支持性不好，实际无法运用<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;a,b,...c&#125; = &#123;<span class="attr">a</span>:<span class="string">'test'</span>,<span class="attr">b</span>:<span class="string">'kill'</span>,<span class="attr">c</span>:<span class="string">'ddd'</span>,<span class="attr">d</span>:<span class="string">'ccc'</span>&#125;;</span><br><span class="line">    c = &#123;</span><br><span class="line">        c:<span class="string">'ddd'</span>,</span><br><span class="line">        d:<span class="string">'ccc'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Object新增方法"><a href="#Object新增方法" class="headerlink" title="Object新增方法"></a>Object新增方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//is()判断两个参数是否相等===</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"字符串"</span>,<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"数组"</span>,<span class="built_in">Object</span>.is([],[]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign()浅拷贝</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"拷贝"</span>,<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">'a'</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;));<span class="comment">//拷贝 Object &#123;a: "a", b: "b"&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> test = &#123;</span><br><span class="line">        k:<span class="number">123</span>,</span><br><span class="line">        o:<span class="number">456</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log([key,value]);<span class="comment">//["k", 123] ["o", 456]</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symbol数据类型"><a href="#Symbol数据类型" class="headerlink" title="Symbol数据类型"></a>Symbol数据类型</h3><p>提供独一无二的值  声明的变量 不重复 不相等<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line"><span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a4);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a1 = Symblo.for(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        [a1]:<span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'abc'</span>:<span class="number">234</span>,</span><br><span class="line">        <span class="string">'c'</span>:<span class="number">345</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用symbol定义的属性，通过for in是拿不到属性值的</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"let of"</span>,key,value);</span><br><span class="line">   &#125;<span class="comment">//只拿到非symbol属性</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用Object.getOwnPropertySymbols(obj).forEach方法</span></span><br><span class="line">   <span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">   &#125;)<span class="comment">//只拿到symbol属性</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//取到所有的属性与属性值</span></span><br><span class="line">   <span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ownkeys"</span>,item,obj[item]);</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Set  WeakSet  Map  WeakMap</p><p>set集合中的元素是不能重复的<br>set中的key必须是字符串<br>map的key可以是任意数据类型</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="comment">//set中增加元素时用add方法</span></span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">//size属性知道长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"size"</span>,list.size);<span class="comment">//size 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"size"</span>,list.size);<span class="comment">//size 5</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">    list.add(<span class="number">1</span>);<span class="comment">//添加重复的元素时不显示,不报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重要场景：数组去重</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> list1 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(list1);<span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//list不转换数据类型，string与number类型是不一样的，不会去重</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"has"</span>,list.has(<span class="string">'add'</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"delete"</span>,list.delete(<span class="string">'add'</span>),list);<span class="comment">//delete true ['delete','clear','has']</span></span><br><span class="line">    list.clear();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"list"</span>,list);<span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;   <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.keys())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"keys"</span>,key);<span class="comment">//keys add  keys delete  keys clear  keys has</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.values())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"keys"</span>,key);<span class="comment">//keys add  keys delete  keys clear  keys has</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> list.entries())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"entries"</span>,key,value);<span class="comment">//entries add add  entries delete delete  entries clear clear  entries has has</span></span><br><span class="line">    &#125;</span><br><span class="line">    list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item);<span class="comment">//add delete clear has</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h4><p>必须是对象，弱引用（不检测是否在其他地方运用，与垃圾回收机制无缘）<br>与set区别：无clear()方法，无size属性，不能遍历<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> weakList = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">    <span class="keyword">let</span> arg = &#123;&#125;;</span><br><span class="line">    weakList.add(arg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'weakList'</span>,weakList);<span class="comment">//WeakSet &#123;Object &#123;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一种创建方式：无参数</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'123'</span>];</span><br><span class="line">    map.set(arr,<span class="number">456</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"map"</span>,map,map.get(arr));<span class="comment">//map &#123;["123"] =&gt; 456&#125; 456</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第二种创建方式:数组</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"map arg"</span>,map);<span class="comment">//map arg  &#123;"a" =&gt; 123, "b" =&gt; 456&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"size"</span>,map.size);<span class="comment">//size 2</span></span><br><span class="line">    <span class="comment">//还有get()、delete()、clear()、遍历等方法与set一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> weakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">    <span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line">    weakMap.set(o,<span class="number">123</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(weakMap.get(o));<span class="comment">//123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Map与Array的对比"><a href="#Map与Array的对比" class="headerlink" title="Map与Array的对比"></a>Map与Array的对比</h4><p>增删改查<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> array = [];</span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>);</span><br><span class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.info(map,array);<span class="comment">//&#123;"t" =&gt; 1&#125;  [&#123;t:1&#125;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">let</span> map_exist = map.has(<span class="string">'t'</span>);</span><br><span class="line">    <span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</span><br><span class="line">    <span class="built_in">console</span>.info(map_exist,array_exist);<span class="comment">//true  &#123;t:1&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>);</span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?item.t = <span class="number">2</span>:<span class="string">''</span>);</span><br><span class="line">    <span class="built_in">console</span>.info(map,array);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    map.delete(<span class="string">'t'</span>);</span><br><span class="line">    <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</span><br><span class="line">    array.splice(index,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.info(map,array);<span class="comment">//&#123;&#125; []</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Set与Array的对比"><a href="#Set与Array的对比" class="headerlink" title="Set与Array的对比"></a>Set与Array的对比</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> array = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    set.add(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</span><br><span class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="built_in">console</span>.info(set,array);<span class="comment">//&#123;t =&gt; 1&#125;  [&#123;t:1&#125;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">let</span> set_exist = set.has(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);<span class="comment">//需要被保存过才会true</span></span><br><span class="line">    <span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</span><br><span class="line">    <span class="built_in">console</span>.info(set_exist,array_exist);<span class="comment">//false  &#123;t:1&#125;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//改</span></span><br><span class="line">    set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?item.t = <span class="number">2</span>:<span class="string">''</span>);</span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?item.t = <span class="number">2</span>:<span class="string">''</span>);</span><br><span class="line">    <span class="built_in">console</span>.info(set,array);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    set.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.t?set.delete(item):<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</span><br><span class="line">    array.splice(index,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.info(set,array);<span class="comment">//&#123;&#125; []</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map、set与Object的对比"><a href="#map、set与Object的对比" class="headerlink" title="map、set与Object的对比"></a>map、set与Object的对比</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> item = &#123;<span class="attr">t</span>:<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>);</span><br><span class="line">    set.add(item);</span><br><span class="line">    obj[<span class="string">'t'</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(obj,map,set);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="built_in">console</span>.info(&#123;</span><br><span class="line">        map_exist:map.has(<span class="string">'t'</span>),</span><br><span class="line">        set_exist:set.has(item),</span><br><span class="line">        obj_exist:<span class="string">'t'</span> <span class="keyword">in</span> obj</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>);</span><br><span class="line">    item.t = <span class="number">2</span>;</span><br><span class="line">    obj[<span class="string">'t'</span>] =<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(obj,map,set);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    map.delete(<span class="string">'t'</span>);</span><br><span class="line">    set.delete(item);</span><br><span class="line">    <span class="keyword">delete</span> obj[<span class="string">"t"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(obj,map,set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React</title>
      <link href="/2017/07/10/react1/"/>
      <url>/2017/07/10/react1/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Native之React速学教程-上"><a href="#React-Native之React速学教程-上" class="headerlink" title="React Native之React速学教程(上)"></a>React Native之React速学教程(上)</h1><p>本文出自《React Native学习笔记》系列文章。</p><p></p><p style="font-size:12px;color:red;">非我原创，原创作者也不知道是谁，放在页面上方便学习</p><br>React Native是基于React的，在开发React Native过程中少不了的需要用到React方面的知识。虽然官方也有相应的Document，但篇幅比较多，学起来比较枯燥。<br>通过《React Native之React速学教程》你可以对React有更系统和更深入的认识。为了方便大家学习，我将《React Native之React速学教程》分为上、中、下三篇，大家可以根据需要进行阅读学习。  <p></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇为《React Native之React速学教程》的第一篇。本篇将从React的特点、如何使用React、JSX语法、组件(Component）以及组件的属性，状态等方面进行讲解。  </p><h2 id="What’s-React"><a href="#What’s-React" class="headerlink" title="What’s React"></a>What’s React</h2><p>React是一个用于组建用户界面的JavaScript库，让你以更简单的方式来创建交互式用户界面。    </p><ol><li>当数据改变时，React将高效的更新和渲染需要更新的组件。声明性视图使你的代码更可预测，更容易调试。</li><li>构建封装管理自己的状态的组件，然后将它们组装成复杂的用户界面。由于组件逻辑是用JavaScript编写的，而不是模板，所以你可以轻松地通过您的应用程序传递丰富的数据，并保持DOM状态。</li><li>一次学习随处可写，学习React，你不仅可以将它用于Web开发，也可以用于React Native来开发Android和iOS应用。  </li></ol><p>不是模板却比模板更加灵活：  </p><p><img src="https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/master/React%20Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B/images/Component.jpg" alt="Component">  </p><blockquote><p>心得：上图是<a href="https://github.com/crazycodeboy/GitHubPopular" target="_blank" rel="noopener">GitHub Popular</a>的首页截图，这个页面是通过不同的组件组装而成的，组件化的开发模式，使得代码在更大程度上的到复用，而且组件之间对的组装很灵活。  </p></blockquote><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>使用React之前需要在页面引入如下js库 。  </p><ul><li>react.js  </li><li>react-dom.js  </li><li>browser.min.js  </li></ul><p>上面一共列举了三个库： react.js 、react-dom.js 和 browser.min.js ，它们必须首先加载。其中，react.js 是 React 的核心库，react-dom.js 是提供与 DOM 相关的功能，browser.min.js 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。<br>你可以从<a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="noopener">React官网</a>下载这些库，也可以将其下载到本地去使用。 </p><blockquote><p>心得：在做React Native开发时，这些库作为React Native核心库已经被初始化在node_modules目录下，所以不需要单独下载。  </p></blockquote><h3 id="使用React"><a href="#使用React" class="headerlink" title="使用React"></a>使用React</h3><p>解压从上述地址下载的压缩包，在根目录中创建一个包含以下内容的 “helloworld.html” 。  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/babel-core@5.8.38/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      ReactDOM.render(</span></span><br><span class="line"><span class="javascript">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 JavaScript 代码里写着 XML 格式的代码称为 JSX，下文会介绍。为了把 JSX 转成标准的 JavaScript，我们用<code>&lt;script type=&quot;text/babel&quot;&gt;</code>标签，然后通过Babel转换成在浏览器中真正执行的内容。  </p><h3 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h3><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span><br><span class="line">  document.getElementById('example')</span><br><span class="line">);</span><br><span class="line">```  </span><br><span class="line">上述代码的作用是将`<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`插入到元素id为example的容器中。   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## JSX  </span><br><span class="line">JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。</span><br><span class="line">每一个XML标签都会被JSX转换工具转换成纯JavaScript代码，使用JSX，组件的结构和组件之间的关系看上去更加清晰。  </span><br><span class="line">JSX并不是React必须使用的，但React官方建议我们使用 JSX , 因为它能定义简洁且我们熟知的包含属性的树状结构语法。 </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**Usage:**  </span><br><span class="line">  </span><br><span class="line">```html </span><br><span class="line">React.render(//使用JSX</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span><br><span class="line">    document.getElementById('example')</span><br><span class="line">); </span><br><span class="line">React.render(//不使用JSX</span><br><span class="line">    React.createElement('div', null,</span><br><span class="line">        React.createElement('div', null,</span><br><span class="line">            React.createElement('div', null, 'content')</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    document.getElementById('example')</span><br><span class="line">);</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">### HTML标签 与 React组件 对比</span><br><span class="line"></span><br><span class="line">React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。   </span><br><span class="line">要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</span><br><span class="line"></span><br><span class="line">```html </span><br><span class="line">var myDivElement = <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"foo"</span> /&gt;</span>;</span><br><span class="line">React.render(myDivElement, document.body);</span><br></pre></td></tr></table></figure></p><p>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var MyComponent = React.createClass(&#123;/*...*/&#125;);</span><br><span class="line">var myElement = <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">someProperty</span>=<span class="string">&#123;true&#125;</span> /&gt;</span>;</span><br><span class="line">React.render(myElement, document.body);</span><br></pre></td></tr></table></figure><blockquote><p>提示：    </p><ul><li>React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。    </li><li>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，  React DOM 使用 className 和 htmlFor 来做对应的属性。  </li></ul></blockquote><h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><h4 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h4><p>要使用 JavaScript 表达式作为属性值，只需把这个表达式用一对大括号 ({}) 包起来，不要用引号 (“”)。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 输入 (JSX):</span><br><span class="line">var person = <span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#123;window.isLoggedIn</span> ? <span class="attr">window.name</span> <span class="attr">:</span> ''&#125; /&gt;</span>;</span><br><span class="line">// 输出 (JS):</span><br><span class="line">var person = React.createElement(</span><br><span class="line">  Person,</span><br><span class="line">  &#123;name: window.isLoggedIn ? window.name : ''&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="子节点表达式"><a href="#子节点表达式" class="headerlink" title="子节点表达式"></a>子节点表达式</h4><p>同样地，JavaScript 表达式可用于描述子结点：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 输入 (JSX):</span><br><span class="line">var content = <span class="tag">&lt;<span class="name">Container</span>&gt;</span>&#123;window.isLoggedIn ? <span class="tag">&lt;<span class="name">Nav</span> /&gt;</span> : <span class="tag">&lt;<span class="name">Login</span> /&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Container</span>&gt;</span>;</span><br><span class="line">// 输出 (JS):</span><br><span class="line">var content = React.createElement(</span><br><span class="line">  Container,</span><br><span class="line">  null,</span><br><span class="line">  window.isLoggedIn ? React.createElement(Nav) : React.createElement(Login)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>JSX 里添加注释很容易；它们只是 JS 表达式而已。你只需要在一个标签的子节点内(非最外层)用 {} 包围要注释的部分。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">class ReactDemo extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (     </span><br><span class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="line">        &#123;/*标签子节点的注释*/&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span></span></span><br><span class="line"><span class="tag">          //<span class="attr">textAlign</span>=<span class="string">'right'</span></span></span><br><span class="line"><span class="tag">          <span class="attr">textShadowColor</span>=<span class="string">'yellow'</span></span></span><br><span class="line"><span class="tag">          /*<span class="attr">color</span>=<span class="string">'red'</span></span></span><br><span class="line"><span class="tag">          <span class="attr">textShadowRadius</span>=<span class="string">'1'</span>*/</span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">          React Native!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>心得：在标签节点以外注释，和通常的注释是一样的，多行用“/**/” 单行用“//”；</p></blockquote><h3 id="JSX延展属性"><a href="#JSX延展属性" class="headerlink" title="JSX延展属性"></a>JSX延展属性</h3><h4 id="不要试图去修改组件的属性"><a href="#不要试图去修改组件的属性" class="headerlink" title="不要试图去修改组件的属性"></a>不要试图去修改组件的属性</h4><p>不推荐做法：   </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var component = <span class="tag">&lt;<span class="name">Component</span> /&gt;</span>;</span><br><span class="line">component.props.foo = x; // 不推荐</span><br><span class="line">component.props.bar = y; // 不推荐</span><br></pre></td></tr></table></figure><p>这样修改组件的属性，会导致React不会对组件的属性类型（propTypes）进行的检查。从而引发一些预料之外的问题。</p><p>推荐做法：  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var component = <span class="tag">&lt;<span class="name">Component</span> <span class="attr">foo</span>=<span class="string">&#123;x&#125;</span> <span class="attr">bar</span>=<span class="string">&#123;y&#125;</span> /&gt;</span>;</span><br></pre></td></tr></table></figure><h4 id="延展属性（Spread-Attributes）"><a href="#延展属性（Spread-Attributes）" class="headerlink" title="延展属性（Spread Attributes）"></a>延展属性（Spread Attributes）</h4><p>你可以使用 JSX 的新特性 - 延展属性：  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var props = &#123;&#125;;</span><br><span class="line">props.foo = x;</span><br><span class="line">props.bar = y;</span><br><span class="line">var component = <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span><br></pre></td></tr></table></figure><p>传入对象的属性会被复制到组件内。</p><p>它能被多次使用，也可以和其它属性一起用。注意顺序很重要，后面的会覆盖掉前面的。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var props = &#123; foo: 'default' &#125;;</span><br><span class="line">var component = <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">foo</span>=<span class="string">&#123;</span>'<span class="attr">override</span>'&#125; /&gt;</span>;</span><br><span class="line">console.log(component.props.foo); // 'override'</span><br></pre></td></tr></table></figure><p>上文出现的… 标记被叫做延展操作符（spread operator）已经被 ES6 数组 支持。</p><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。 </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var HelloMessage = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>,</span><br><span class="line">  document.getElementById('example')</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码中，变量 HelloMessage 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code>时，会自动生成 HelloMessage 的一个实例。所有组件类都必须有自己的 render 方法，用于输出组件。</p><blockquote><p>注意 </p></blockquote><ul><li>组件类的第一个字母必须大写。</li><li>组件类只能包含一个顶层标签。  </li></ul><h2 id="组件的属性-props"><a href="#组件的属性-props" class="headerlink" title="组件的属性(props)"></a>组件的属性(props)</h2><p>我们可以通过<code>this.props.xx</code>的形式获取组件对象的属性，对象的属性可以任意定义，但要避免与JavaScript关键字冲突。  </p><h3 id="遍历对象的属性："><a href="#遍历对象的属性：" class="headerlink" title="遍历对象的属性："></a>遍历对象的属性：</h3><p><code>this.props.children</code>会返回组件对象的所有属性。<br>React 提供一个工具方法 React.Children 来处理 this.props.children 。我们可以用 <code>React.Children.map</code>或<code>React.Children.forEach</code> 来遍历子节点。<br><strong>React.Children.map</strong>  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">array React.Children.map(object children, function fn [, object thisArg])</span><br><span class="line">```     </span><br><span class="line">该方法会返回一个array。  </span><br><span class="line">**React.Children.forEach**    </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">React.Children.forEach(object children, function fn [, object thisArg])</span><br><span class="line">```  </span><br><span class="line">**Usage：**  </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">var NotesList = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      &#123;</span><br><span class="line">        React.Children.map(this.props.children, function (child) &#123;</span><br><span class="line">          return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</span><br><span class="line">  document.body</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a><a href="https://facebook.github.io/react/docs/top-level-api.html#react.proptypes" target="_blank" rel="noopener">PropTypes</a></h3><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。<br>组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var MyTitle = React.createClass(&#123;</span><br><span class="line">  propTypes: &#123;</span><br><span class="line">    title: React.PropTypes.string.isRequired,</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">     return <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的Mytitle组件有一个title属性。PropTypes 告诉 React，这个 title 属性是必须的，而且它的值必须是字符串。现在，我们设置 title 属性的值是一个数值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var data = 123;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="tag">&lt;<span class="name">MyTitle</span> <span class="attr">title</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>,</span><br><span class="line">  document.body</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样一来，title属性就通不过验证了。控制台会显示一行错误信息。</p><figure class="highlight plain"><figcaption><span>Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.```  </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">更多的PropTypes设置，可以查看[官方文档](https://facebook.github.io/react/docs/reusable-components.html)。  </span><br><span class="line">此外，getDefaultProps 方法可以用来设置组件属性的默认值。</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">var MyTitle = React.createClass(&#123;</span><br><span class="line">  getDefaultProps : function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title : &apos;Hello World&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;MyTitle /&gt;,</span><br><span class="line">  document.body</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码会输出<code>&quot;Hello World&quot;</code>。   </p><h2 id="ref-属性-获取真实的DOM节点"><a href="#ref-属性-获取真实的DOM节点" class="headerlink" title="ref 属性(获取真实的DOM节点)"></a>ref 属性(获取真实的DOM节点)</h2><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。</p><p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性。  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var MyComponent = React.createClass(&#123;</span><br><span class="line">  handleClick: function() &#123;</span><br><span class="line">    this.refs.myTextInput.focus();</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"myTextInput"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Focus the text input"</span>   <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>,</span><br><span class="line">  document.getElementById('example')</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码中，组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点。<br>需要注意的是，由于 this.refs.[refName] 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会读取 this.refs.[refName] 属性。<br>React 组件支持很多事件，除了 Click 事件以外，还有 KeyDown 、Copy、Scroll 等，完整的事件清单请查看<a href="https://facebook.github.io/react/docs/events.html#supported-events" target="_blank" rel="noopener">官方文档</a>。</p><blockquote><p>心得：ref属性在开发中使用频率很高，使用它你可以获取到任何你想要获取的组件的对象，有个这个对象你就可以灵活地做很多事情，比如：读写对象的变量，甚至调用对象的函数。  </p></blockquote><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>上文讲到了props，因为每个组件只会根据props 渲染了自己一次，props 是不可变的。为了实现交互，可以使用组件的 state 。this.state 是组件私有的，可以通过<code>getInitialState()</code>方法初始化，通过调用 <code>this.setState()</code> 来改变它。当 state 更新之后，组件就会重新渲染自己。<br>render() 方法依赖于 this.props 和 this.state ，框架会确保渲染出来的 UI 界面总是与输入（ this.props 和 this.state ）保持一致。</p><h3 id="初始化state"><a href="#初始化state" class="headerlink" title="初始化state"></a>初始化state</h3><p>通过<code>getInitialState()</code>方法初始化state，在组件的生命周期中仅执行一次，用于设置组件的初始化 state 。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">getInitialState:function()&#123;</span><br><span class="line">   return &#123;favorite:false&#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="更新-state"><a href="#更新-state" class="headerlink" title="更新 state"></a>更新 state</h3><p>通过<code>this.setState()</code>方法来更新state，调用该方法后，React会重新渲染相关的UI。<br><code>this.setState({favorite:!this.state.favorite});</code></p><p><strong>Usage:</strong>  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var FavoriteButton=React.createClass(&#123;</span><br><span class="line">  getInitialState:function()&#123;</span><br><span class="line">    return &#123;favorite:false&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick:function(event)&#123;</span><br><span class="line">    this.setState(&#123;favorite:!this.state.favorite&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    var text=this.state.favorite? 'favorite':'un favorite';</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span><br><span class="line">        You &#123;text&#125; this. Click to toggle.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码是一个 FavoriteButton 组件，它的 getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。  </p><blockquote><p>心得：由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React’s official site</a><br><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="noopener">React on ES6+</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React</title>
      <link href="/2017/07/10/react3/"/>
      <url>/2017/07/10/react3/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Native之React速学教程-下"><a href="#React-Native之React速学教程-下" class="headerlink" title="React Native之React速学教程(下)"></a>React Native之React速学教程(下)</h1><p>本文出自《React Native学习笔记》系列文章。</p><p style="font-size:12px;color:red;">非我原创，原创作者也不知道是谁，放在页面上方便学习</p><p>React Native是基于React的，在开发React Native过程中少不了的需要用到React方面的知识。虽然官方也有相应的Document，但篇幅比较多，学起来比较枯燥。<br>通过《React Native之React速学教程》你可以对React有更系统和更深入的认识。为了方便大家学习，我将《React Native之React速学教程》分为上、中、下三篇，大家可以根据需要进行阅读学习。  </p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇为《React Native之React速学教程》的最后一篇。本篇将带着大家一起认识ES6，学习在开发中常用的一些ES6的新特性，以及ES6与ES5的区别，解决大家在学习React /React Native过程中对于ES6与ES5的一些困惑。  </p><h2 id="ES6的特性"><a href="#ES6的特性" class="headerlink" title="ES6的特性"></a>ES6的特性</h2><h3 id="何为ES6？"><a href="#何为ES6？" class="headerlink" title="何为ES6？"></a>何为ES6？</h3><p>ES6全称ECMAScript 6.0，ES6于2015年6月17日发布，ECMAScript是ECMA制定的标准化脚本语言。目前JavaScript使用的ECMAScript版本为ECMAScript-262。  </p><p>下面我为大家列举了ES6新特性中对我们开发影响比较大的六方面的特性。  </p><h3 id="1-类（class）"><a href="#1-类（class）" class="headerlink" title="1.类（class）"></a>1.类（class）</h3><p>对熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6 引入了class（类），让JavaScript的面向对象编程变得更加简单和易于理解。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 构造方法，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.</span></span><br><span class="line">   <span class="keyword">constructor</span>(name,color) &#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">     <span class="keyword">this</span>.color = color;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// toString 是原型对象上的属性</span></span><br><span class="line">   toString() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'name:'</span> + <span class="keyword">this</span>.name + <span class="string">',color:'</span> + <span class="keyword">this</span>.color);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">'dog'</span>,<span class="string">'white'</span>);<span class="comment">//实例化Animal</span></span><br><span class="line">animal.toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(action) &#123;</span><br><span class="line">   <span class="comment">// 子类必须要在constructor中指定super 方法，否则在新建实例的时候会报错.</span></span><br><span class="line">   <span class="comment">// 如果没有置顶consructor,默认带super方法的constructor将会被添加、</span></span><br><span class="line">   <span class="keyword">super</span>(<span class="string">'cat'</span>,<span class="string">'white'</span>);</span><br><span class="line">   <span class="keyword">this</span>.action = action;</span><br><span class="line"> &#125;</span><br><span class="line"> toString() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">super</span>.toString());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'catch'</span>)</span><br><span class="line">cat.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-模块-Module"><a href="#2-模块-Module" class="headerlink" title="2.模块(Module)"></a>2.模块(Module)</h3><p>ES5不支持原生的模块化，在ES6中，模块将作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。   </p><h4 id="导出-export"><a href="#导出-export" class="headerlink" title="导出(export)"></a>导出(export)</h4><p>ES6允许在一个模块中使用export来导出多个变量或方法。  </p><p><strong>导出变量</strong>   </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">'Rainbow'</span></span><br></pre></td></tr></table></figure><blockquote><p>心得：ES6不仅支持变量的导出，也支持常量的导出。 <code>export const sqrt = Math.sqrt;//导出常量</code> </p></blockquote><p>ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Rainbow'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="string">'24'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br></pre></td></tr></table></figure><p><strong>导出函数</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myModule.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params">someArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someArg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入-import"><a href="#导入-import" class="headerlink" title="导入(import)"></a>导入(import)</h4><p>定义好模块的输出以后就可以在另外一个模块通过import引用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;myModule&#125; <span class="keyword">from</span> <span class="string">'myModule'</span>;<span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">'test'</span>;<span class="comment">// test.js</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">&gt;心得:一条import 语句可以同时导入默认方法和其它变量。`</span><span class="keyword">import</span> defaultMethod, &#123; otherMethod &#125; <span class="keyword">from</span> <span class="string">'xxx.js'</span>;<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 3.箭头（Arrow）函数</span></span><br><span class="line"><span class="string">这是ES6中最令人激动的特性之一。`</span>=&gt;<span class="string">`不只是关键字function的简写，它还带来了其它好处。箭头函数与包围它的代码共享同一个`</span><span class="keyword">this</span><span class="string">`,能帮你很好的解决this的指向问题。有经验的JavaScript开发者都熟悉诸如`</span><span class="keyword">var</span> self = <span class="keyword">this</span>;<span class="string">`或`</span><span class="keyword">var</span> that = <span class="keyword">this</span><span class="string">`这种引用外围this的模式。但借助`</span>=&gt;<span class="string">`，就不需要这种模式了。   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 箭头函数的结构  </span></span><br><span class="line"><span class="string">箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">// 箭头函数的例子</span></span><br><span class="line">()=&gt;<span class="number">1</span></span><br><span class="line">v=&gt;v+<span class="number">1</span></span><br><span class="line">(a,b)=&gt;a+b</span><br><span class="line">()=&gt;&#123;</span><br><span class="line">    alert(<span class="string">"foo"</span>);</span><br><span class="line">&#125;</span><br><span class="line">e=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span>/e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>心得：不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。  </p></blockquote><h4 id="卸载监听器时的陷阱"><a href="#卸载监听器时的陷阱" class="headerlink" title="卸载监听器时的陷阱"></a>卸载监听器时的陷阱</h4><blockquote><p><strong>错误的做法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    onAppPaused(event)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>正确的做法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>._onAppPaused = <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</span><br><span class="line">    &#125;</span><br><span class="line">    onAppPaused(event)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除上述的做法外，我们还可以这样做：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.onAppPaused);</span><br><span class="line">    &#125;</span><br><span class="line">    onAppPaused = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是：不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。</p></blockquote><h3 id="4-ES6不再支持Mixins"><a href="#4-ES6不再支持Mixins" class="headerlink" title="4.ES6不再支持Mixins"></a>4.ES6不再支持Mixins</h3><p>在ES5下，我们经常使用mixin来为组件添加一些新的方法，如： </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> SetIntervalMixin = &#123;</span><br><span class="line">  componentWillMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.intervals = [];</span><br><span class="line">  &#125;,</span><br><span class="line">  setInterval: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.intervals.push(setInterval.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.intervals.forEach(clearInterval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> TickTock = React.createClass(&#123;</span><br><span class="line">  mixins: [SetIntervalMixin], <span class="comment">// Use the mixin</span></span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">seconds</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>但，很不幸的是，ES6不支持使用Mixins了，不过我们可以使用，增强组件来替代Mixins。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Enhance.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">"React"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> Enhance = <span class="function"><span class="params">ComposedComponent</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">data</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">data</span>: <span class="string">'Hello'</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ComposedComponent</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">//HigherOrderComponent.js</span></span><br><span class="line"><span class="xml">import &#123; Enhance &#125; from "./Enhance";</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class MyComponent &#123;</span></span><br><span class="line"><span class="xml">    render() &#123;</span></span><br><span class="line"><span class="xml">        if (!this.data) return <span class="tag">&lt;<span class="name">div</span>&gt;</span>Waiting...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">        return <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default Enhance(MyComponent); // Enhanced component</span></span><br></pre></td></tr></table></figure><p>用一个“增强组件”，来为某个类增加一些方法，并且返回一个新类，这无疑能实现mixin所实现的大部分需求。</p><p>另外，网上也有很多其他的方案，如<a href="https://github.com/brigand/react-mixin" target="_blank" rel="noopener">react-mixin</a>。</p><h3 id="5-ES6不再有自动绑定"><a href="#5-ES6不再有自动绑定" class="headerlink" title="5.ES6不再有自动绑定"></a>5.ES6不再有自动绑定</h3><p>在ES5中，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但在ES6中没有了自动绑定，也就是说，你需要通过bind或者箭头函数来手动绑定this引用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过使用 bind() 来绑定`this`</span></span><br><span class="line">&lt;div onClick=&#123;<span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>)&#125;&gt;</span><br><span class="line"><span class="comment">// 也可通过使用箭头函数来实现</span></span><br><span class="line">&lt;div onClick=&#123;() =&gt; <span class="keyword">this</span>.tick()&#125;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>心得： 因为无论是箭头函数还是bind()每次被执行都返回的是一个新的函数引用，所以，推荐大家在组件的构造函数中来绑定<code>this</code>。</p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: props.initialCount&#125;;</span><br><span class="line">  <span class="keyword">this</span>.tick = <span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>);<span class="comment">//在构造函数中绑定`this`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;div onClick=&#123;<span class="keyword">this</span>.tick&#125;&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-static关键字"><a href="#6-static关键字" class="headerlink" title="6.static关键字"></a>6.static关键字</h3><p>在ES6中我们可以通过static关键字来定义一个类函数。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123; <span class="comment">//构造函数</span></span><br><span class="line">          <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    sayName() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> formatName(name) <span class="comment">//将formatName定义为类方法</span></span><br><span class="line">        <span class="keyword">return</span> name[<span class="number">0</span>].toUpperCase() + name.sustr(<span class="number">1</span>).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(People.formatName(<span class="string">"tom"</span>)); <span class="comment">//使用类方法formatName</span></span><br></pre></td></tr></table></figure><h2 id="ES6-VS-ES5（ES6与ES5的区别）"><a href="#ES6-VS-ES5（ES6与ES5的区别）" class="headerlink" title="ES6 VS ES5（ES6与ES5的区别）"></a>ES6 VS ES5（ES6与ES5的区别）</h2><p>新版本的React /React Native使用了ES6标准，下面就让我们一起了解一下基于ES6的React/React Native相比ES5有哪些不同。  </p><blockquote><p>心得：很多React/React Native的初学者经常会被ES6问题迷惑：官方建议我们ES6，但是网上搜到的很多教程和例子都是基于ES5版本的，所以很多人感觉无法下手，下面就让我们一起认识ES6与ES5在React/React Native开发上有哪些不同和需要注意的地方。</p></blockquote><p>下面是我们需要知道的ES6与ES5在4大方面上的区别。</p><h3 id="1-在定义方面的不同"><a href="#1-在定义方面的不同" class="headerlink" title="1.在定义方面的不同"></a>1.在定义方面的不同</h3><p>在定义组件，方法，属性等方面，ES6与ES5是有所不同的，下面就让我们一起看一下有哪些不同。    </p><blockquote><p>心得：因为向下兼容的原因，你在开发过程中可使用ES6也可以使用ES5的规范，但为了代码的风格一致性，建议尽量减少混写。  </p></blockquote><h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><blockquote><p><strong>ES5</strong>  </p></blockquote><p>在ES5里，通常通过React.createClass来定义一个组件类，像这样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>ES6</strong>  </p></blockquote><p>在ES6里，我们通过继承React.Component 来定义一个组件类，像这样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><p>相比ES5，ES6在方法定义上语法更加简洁，从上面的例子里可以看到，给组件定义方法不再用 名字: function()的写法，而是直接用名字()，在方法的最后也不能有逗号了。</p><blockquote><p><strong>ES5</strong>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><br><span class="line">    test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>ES6</strong>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Image source=&#123;<span class="keyword">this</span>.props.source&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义组件的属性类型和默认属性"><a href="#定义组件的属性类型和默认属性" class="headerlink" title="定义组件的属性类型和默认属性"></a>定义组件的属性类型和默认属性</h4><blockquote><p><strong>ES5</strong>  </p></blockquote><p>在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</span><br><span class="line">    getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            autoPlay: <span class="literal">false</span>,</span><br><span class="line">            maxLoops: <span class="number">10</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    propTypes: &#123;</span><br><span class="line">        autoPlay: React.PropTypes.bool.isRequired,</span><br><span class="line">        maxLoops: React.PropTypes.number.isRequired,</span><br><span class="line">        posterFrameSrc: React.PropTypes.string.isRequired,</span><br><span class="line">        videoSrc: React.PropTypes.string.isRequired,</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>ES6</strong>  </p></blockquote><p>在ES6里，可以统一使用static成员来实现。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        autoPlay: <span class="literal">false</span>,</span><br><span class="line">        maxLoops: <span class="number">10</span>,</span><br><span class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        autoPlay: React.PropTypes.bool.isRequired,</span><br><span class="line">        maxLoops: React.PropTypes.number.isRequired,</span><br><span class="line">        posterFrameSrc: React.PropTypes.string.isRequired,</span><br><span class="line">        videoSrc: React.PropTypes.string.isRequired,</span><br><span class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="comment">// 注意这里既没有分号也没有逗号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也有人这么写，虽然不推荐，但读到代码的时候你应当能明白它的意思：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Video.defaultProps = &#123;</span><br><span class="line">    autoPlay: <span class="literal">false</span>,</span><br><span class="line">    maxLoops: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line">Video.propTypes = &#123;</span><br><span class="line">    autoPlay: React.PropTypes.bool.isRequired,</span><br><span class="line">    maxLoops: React.PropTypes.number.isRequired,</span><br><span class="line">    posterFrameSrc: React.PropTypes.string.isRequired,</span><br><span class="line">    videoSrc: React.PropTypes.string.isRequired,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>心得:对React开发者而言，static在一些老版本的浏览器上是不支持的。React Native开发者可以不用担心这个问题。</p></blockquote><h3 id="2-在导入-import-与导出-export-组件上的不同"><a href="#2-在导入-import-与导出-export-组件上的不同" class="headerlink" title="2.在导入(import)与导出(export)组件上的不同"></a>2.在导入(import)与导出(export)组件上的不同</h3><h4 id="导入组件"><a href="#导入组件" class="headerlink" title="导入组件"></a>导入组件</h4><blockquote><p><strong>ES5</strong>  </p></blockquote><p>在ES5里，如果使用CommonJS标准，引入React包基本通过require进行，代码类似这样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">"react"</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    Component,</span><br><span class="line">    PropTypes</span><br><span class="line">&#125; = React;  <span class="comment">//引用React抽象组件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ReactNative = <span class="built_in">require</span>(<span class="string">"react-native"</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    Image,</span><br><span class="line">    Text,</span><br><span class="line">&#125; = ReactNative;  <span class="comment">//引用具体的React Native组件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> AboutPage=<span class="built_in">require</span>(<span class="string">'./app/AboutPage'</span>) <span class="comment">//引入app目录下AboutPage组件，即AboutPag.js</span></span><br><span class="line"><span class="keyword">var</span> PopularPage=<span class="built_in">require</span>(<span class="string">'./app/PopularPage'</span>) <span class="comment">//引入app目录下PopularPage组件，即PopularPage.js</span></span><br><span class="line"><span class="keyword">var</span> FavoritePage=<span class="built_in">require</span>(<span class="string">'./app/FavoritePage'</span>) <span class="comment">//引入app目录下FavoritePage组件，即FavoritePage.js</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>ES6</strong>  </p></blockquote><p>在ES6里，没有了require，而是使用import来导入组件，有点像Java的写法。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; </span><br><span class="line">    Component,</span><br><span class="line">    PropTypes,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span>;<span class="comment">//引用React抽象组件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Image,</span><br><span class="line">    Text</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span> <span class="comment">//引用具体的React Native组件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AboutPage <span class="keyword">from</span> <span class="string">'./app/AboutPage'</span> <span class="comment">//引入app目录下AboutPage组件，即AboutPag.js</span></span><br><span class="line"><span class="keyword">import</span> PopularPage <span class="keyword">from</span> <span class="string">'./app/PopularPage'</span> <span class="comment">//引入app目录下PopularPage组件，即PopularPage.js</span></span><br><span class="line"><span class="keyword">import</span> FavoritePage  <span class="keyword">from</span> <span class="string">'./app/FavoritePage'</span> <span class="comment">//引入app目录下FavoritePage组件，即FavoritePage.js</span></span><br></pre></td></tr></table></figure><p>另外，ES6支持将组件导入作为一个对象，使用“ * as”修饰即可。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入app目录下AboutPage组件作为一个对象，接下来就可使用“AboutPage.”来调用AboutPage的方法及属性了。  </span></span><br><span class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> AboutPage <span class="keyword">from</span> <span class="string">'./app/AboutPage'</span></span><br></pre></td></tr></table></figure><blockquote><p>心得：使用“ <em> as ”修饰后，导入的组件直接被实例化成一个对象，可以使用“.”语法来调用组件的方法和属性，和没有“ </em> as ”修饰是有本质区别的，使用的时候要特别注意。  </p></blockquote><h4 id="导出组件"><a href="#导出组件" class="headerlink" title="导出组件"></a>导出组件</h4><blockquote><p><strong>ES5</strong><br>在ES5里，要导出一个类给别的模块用，一般通过module.exports来导出：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = MyComponent;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ES6</strong><br>在ES6里，通常用export default来实现相同的功能：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在初始化state上的不同"><a href="#3-在初始化state上的不同" class="headerlink" title="3.在初始化state上的不同"></a>3.在初始化state上的不同</h3><blockquote><p><strong>ES5</strong>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>ES6</strong><br>ES6下，有两种写法：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过我们推荐更易理解的在构造函数中初始化（这样你还可以根据需要做一些计算）：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            loopsRemaining: <span class="keyword">this</span>.props.maxLoops,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-在方法作为回调上的不同"><a href="#4-在方法作为回调上的不同" class="headerlink" title="4.在方法作为回调上的不同"></a>4.在方法作为回调上的不同</h3><p>在开发工作中，经常会使用到回调，如按钮的单击回调等，这也是在很多编程语言中都会经常出现的情况。ES6与ES5在使用回调方面是有区别的。   </p><blockquote><p><strong>ES5</strong>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PostInfo = React.createClass(&#123;</span><br><span class="line">    handleOptionsButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Here, 'this' refers to the component instance.</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableHighlight onPress=&#123;<span class="keyword">this</span>.handleOptionsButtonClick&#125;&gt;</span><br><span class="line">                &lt;Text&gt;&#123;<span class="keyword">this</span>.props.label&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableHighlight&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在ES5中，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。</p><p>在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）：  </p><blockquote><p><strong>ES6</strong>  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    handleOptionsButtonClick(e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableHighlight </span><br><span class="line">                onPress=&#123;<span class="keyword">this</span>.handleOptionsButtonClick.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">                <span class="comment">//onPress=&#123;e=&gt;this.handleOptionsButtonClick(e)&#125;//这种方式和上面的效果是一样的</span></span><br><span class="line">                &gt;</span><br><span class="line">                &lt;Text&gt;&#123;<span class="keyword">this</span>.props.label&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableHighlight&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;,·</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React’s official site</a><br><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="noopener">React on ES6+</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React</title>
      <link href="/2017/07/10/react2/"/>
      <url>/2017/07/10/react2/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Native之React速学教程-中"><a href="#React-Native之React速学教程-中" class="headerlink" title="React Native之React速学教程(中)"></a>React Native之React速学教程(中)</h1><p>本文出自《React Native学习笔记》系列文章。</p><p style="font-size:12px;color:red;">非我原创，原创作者也不知道是谁，放在页面上方便学习</p><p>React Native是基于React的，在开发React Native过程中少不了的需要用到React方面的知识。虽然官方也有相应的Document，但篇幅比较多，学起来比较枯燥。<br>通过《React Native之React速学教程》你可以对React有更系统和更深入的认识。为了方便大家学习，我将《React Native之React速学教程》分为上中、下三篇，大家可以根据需要进行阅读学习。  </p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇为《React Native之React速学教程》的第二篇。本篇将从组件(Component)的详细说明、组件的生命周期(Component Lifecycle)、isMounted是个反模式等方面进行讲解，让大家对组件(Component)有个更系统以及更深入的认识。  </p><h2 id="组件的详细说明"><a href="#组件的详细说明" class="headerlink" title="组件的详细说明"></a>组件的详细说明</h2><p>当通过调用 React.createClass() 来创建组件的时候，每个组件必须提供render方法，并且也可以包含其它的在这里描述的生命周期方法。  </p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>ReactComponent render()</code><br><code>render()</code> 方法是必须的。<br>当该方法被回调的时候，会检测 <code>this.props</code> 和 <code>this.state</code>，并返回一个单子级组件。该子级组件可以是虚拟的本地 DOM 组件（比如 \<div> 或者 <code>React.DOM.div()</code>），也可以是自定义的复合组件。<br>你也可以返回 <code>null</code> 或者 <code>false</code> 来表明不需要渲染任何东西。实际上，React 渲染一个<code>&lt;noscript&gt;</code>标签来处理当前的差异检查逻辑。当返回 <code>null</code> 或者 <code>false</code> 的时候，<code>this.getDOMNode()</code> 将返回 <code>null</code>。   </div></p><p><strong>注意：</strong>  </p><p><code>render()</code>函数应该是纯粹的，也就是说该函数不修改组件的 <code>state</code>，每次调用都返回相同的结果，不读写 DOM 信息，也不和浏览器交互（例如通过使用 <code>setTimeout</code>）。如果需要和浏览器交互，在 <code>componentDidMount()</code> 中或者其它生命周期方法中做这件事。保持 <code>render()</code> 纯粹，可以使服务器端渲染更加切实可行，也使组件更容易被理解。  </p><blockquote><p>心得：不要在<code>render()</code>函数中做复杂的操作，更不要进行网络请求，数据库读写，I/O等操作。</p></blockquote><h3 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h3><p><code>object getInitialState()</code><br>初始化组件状态，在组件挂载之前调用一次。返回值将会作为 <code>this.state</code>的初始值。  </p><blockquote><p>心得：通常在该方法中对组件的状态进行初始化。  </p></blockquote><h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><p><code>object getDefaultProps()</code><br>设置组件属性的默认值，在组件类创建的时候调用一次，然后返回值被缓存下来。如果父组件没有指定 <code>props</code> 中的某个键，则此处返回的对象中的相应属性将会合并到 <code>this.props</code> （使用 in 检测属性）。<br><strong>Usage:</strong>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getDefaultProps() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &apos;&apos;,</span><br><span class="line">      popEnabled:true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>该方法在任何实例创建之前调用，因此不能依赖于 <code>this.props</code>。另外，<code>getDefaultProps()</code> 返回的任何复杂对象将会在实例间共享，而不是每个实例拥有一份拷贝。  </p><blockquote><p>心得：该方法在你封装一个自定义组件的时候经常用到，通常用于为组件初始化默认属性。   </p></blockquote><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a><a href="https://facebook.github.io/react/docs/top-level-api.html#react.proptypes" target="_blank" rel="noopener">PropTypes</a></h3><p><code>object propTypes</code><br><code>propTypes</code> 对象用于验证传入到组件的 <code>props</code>。  可参考<a href="https://facebook.github.io/react/docs/reusable-components.html" target="_blank" rel="noopener">可重用的组件</a>。</p><p><strong>Usage:</strong>   </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var NavigationBar=React.createClass(&#123;</span><br><span class="line">  propTypes: &#123;</span><br><span class="line">    navigator:React.PropTypes.object,</span><br><span class="line">    leftButtonTitle: React.PropTypes.string,</span><br><span class="line">    leftButtonIcon: Image.propTypes.source,</span><br><span class="line">    popEnabled:React.PropTypes.bool,</span><br><span class="line">    onLeftButtonClick: React.PropTypes.func,</span><br><span class="line">    title:React.PropTypes.string,</span><br><span class="line">    rightButtonTitle: React.PropTypes.string,</span><br><span class="line">    rightButtonIcon:Image.propTypes.source,</span><br><span class="line">    onRightButtonClick:React.PropTypes.func</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>心得：在封装组件时，对组件的属性通常会有类型限制，如：组件的背景图片，需要<code>Image.propTypes.source</code>类型，propTypes便可以帮你完成你需要的属性类型的检查。</p></blockquote><h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p><code>array mixins</code><br><code>mixin</code> 数组允许使用混合来在多个组件之间共享行为。更多关于混合的信息，可参考<a href="https://facebook.github.io/react/docs/reusable-components.html#mixins" target="_blank" rel="noopener">Reusable Components</a>。  </p><blockquote><p>心得：由于ES6不再支持mixins，所以不建议在使用mixins，我们可以用另外一种方式来替代mixins，</p></blockquote><h3 id="statics"><a href="#statics" class="headerlink" title="statics"></a>statics</h3><p><code>object statics</code><br><code>statics</code> 对象允许你定义静态的方法，这些静态的方法可以在组件类上调用。例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var MyComponent = React.createClass(&#123;</span><br><span class="line">  statics: &#123;</span><br><span class="line">    customMethod: function(foo) &#123;</span><br><span class="line">      return foo === 'bar';</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">MyComponent.customMethod('bar');  // true</span><br></pre></td></tr></table></figure><p>在这个块儿里面定义的方法都是静态的，你可以通过<code>ClassName.funcationName</code>的形式调用它。<br><strong>注意</strong><br>这些方法不能获取组件的 <code>props</code> 和 <code>state</code>。如果你想在静态方法中检查 <code>props</code> 的值，在调用处把 <code>props</code> 作为参数传入到静态方法。</p><h3 id="displayName"><a href="#displayName" class="headerlink" title="displayName"></a>displayName</h3><p><code>string displayName</code><br><code>displayName</code> 字符串用于输出调试信息。JSX 自动设置该值；可参考<a href="https://facebook.github.io/react/docs/jsx-in-depth.html#the-transform" target="_blank" rel="noopener">JSX in Depth</a>。</p><h4 id="isMounted"><a href="#isMounted" class="headerlink" title="isMounted"></a>isMounted</h4><p><code>boolean isMounted()</code>，当组件被渲染到DOM，该方法返回true，否则返回false。该方法通常用于异步任务完成后修改state前的检查，以避免修改一个没有被渲染的组件的state。   </p><blockquote><p>心得：开发中不建议大家isMounted，大家可以使用另外一种更好的方式来避免修改没有被渲染的DOM，请下文的<a href="">isMounted 是个反模式</a>。</p></blockquote><h2 id="组件的生命周期-Component-Lifecycle"><a href="#组件的生命周期-Component-Lifecycle" class="headerlink" title="组件的生命周期(Component Lifecycle)"></a><a href="https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle" target="_blank" rel="noopener">组件的生命周期(Component Lifecycle)</a></h2><p>在iOS中<code>UIViewController</code>提供了<code>(void)viewWillAppear:(BOOL)animated</code>, <code>- (void)viewDidLoad</code>,<code>(void)viewWillDisappear:(BOOL)animated</code>等生命周期方法，在Android中<code>Activity</code>则提供了<code>onCreate()</code>,<code>onStart()</code>,<code>onResume()</code>,<code>onPause()</code>,<code>onStop()</code>,<code>onDestroy()</code>等生命周期方法，这些生命周期方法展示了一个界面从创建到销毁的一生。  </p><p>那么在React 中组件(Component)也是有自己的生命周期方法的。  </p><p><img src="https://raw.githubusercontent.com/crazycodeboy/RNStudyNotes/master/React%20Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B/images/component-lifecycle.jpg" alt="component-lifecycle"></p><h3 id="组件的生命周期分成三个状态："><a href="#组件的生命周期分成三个状态：" class="headerlink" title="组件的生命周期分成三个状态："></a>组件的生命周期分成三个状态：</h3><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM</li></ul><blockquote><p>心得：你会发现这些React 中组件(Component)的生命周期方法从写法上和iOS中<code>UIViewController</code>的生命周期方法很像，React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用。  </p></blockquote><h3 id="Mounting-装载"><a href="#Mounting-装载" class="headerlink" title="Mounting(装载)"></a>Mounting(装载)</h3><ul><li><code>getInitialState()</code>: 在组件挂载之前调用一次。返回值将会作为 this.state 的初始值。</li><li><code>componentWillMount()</code>：服务器端和客户端都只调用一次，在初始化渲染执行之前立刻调用。</li><li><code>componentDidMount()</code>：在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。</li></ul><h3 id="Updating-更新"><a href="#Updating-更新" class="headerlink" title="Updating (更新)"></a>Updating (更新)</h3><ul><li>componentWillReceiveProps(object nextProps) 在组件接收到新的 props 的时候调用。在初始化渲染的时候，该方法不会调用。</li></ul><p>用此函数可以作为 react 在 prop 传入之后， render() 渲染之前更新 state 的机会。老的 props 可以通过 this.props 获取到。在该函数中调用 this.setState() 将不会引起第二次渲染。</p><ul><li>shouldComponentUpdate(object nextProps, object nextState): 在接收到新的 props 或者 state，将要渲染之前调用。</li></ul><p>该方法在初始化渲染的时候不会调用，在使用 forceUpdate 方法的时候也不会。如果确定新的 props 和 state 不会导致组件更新，则此处应该 返回 false。   </p><blockquote><p>心得：重写次方你可以根据实际情况，来灵活的控制组件当 props 和 state 发生变化时是否要重新渲染组件。   </p></blockquote><ul><li>componentWillUpdate(object nextProps, object nextState)：在接收到新的 props 或者 state 之前立刻调用。</li></ul><p>在初始化渲染的时候该方法不会被调用。使用该方法做一些更新之前的准备工作。   </p><blockquote><p>注意：你不能在该方法中使用 this.setState()。如果需要更新 state 来响应某个 prop 的改变，请使用 <code>componentWillReceiveProps</code>。</p></blockquote><ul><li>componentDidUpdate(object prevProps, object prevState): 在组件的更新已经同步到 DOM 中之后立刻被调用。</li></ul><p>该方法不会在初始化渲染的时候调用。使用该方法可以在组件更新之后操作 DOM 元素。</p><h3 id="Unmounting-移除"><a href="#Unmounting-移除" class="headerlink" title="Unmounting(移除)"></a>Unmounting(移除)</h3><ul><li>componentWillUnmount：在组件从 DOM 中移除的时候立刻被调用。</li></ul><p>在该方法中执行任何必要的清理，比如无效的定时器，或者清除在 componentDidMount 中创建的 DOM 元素。</p><h2 id="isMounted是个反模式"><a href="#isMounted是个反模式" class="headerlink" title="isMounted是个反模式"></a>isMounted是个反模式</h2><p>isMounted通常用于避免修改一个已经被卸载的组件的状态，因为调用一个没有被装载的组件的<code>setState()</code>方法，系统会抛出异常警告。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.isMounted()) &#123; <span class="comment">//不推荐</span></span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;...&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面做法有点反模式，<code>isMounted()</code>起到作用的时候也就是组件被卸载之后还有异步操作在进行的时候，这就意味着一个被销毁的组件还持有着一些资源的引用，这会导致系统性能降低甚至内存溢出。      </p><p>React 在设计的时候通过<code>setState()</code>被调用时做了一些检查，来帮助开发者发现被卸载的组件还持有一些资源的引用的情况。如何你使用了<code>isMounted()</code>，也就是跳过的React的检查，也就无法发现被卸载的组件还持有资源的问题。       </p><p>既然isMounted()是反模式，那么有没有可替代方案呢？<br>我们可以通过在设置一个变量来表示组件的装载和卸载的状态，当<code>componentDidMount</code>被调用时该变量为true，当<br><code>componentWillUnmount</code>被调用时，该变量为false，这样该变量就可以当<code>isMounted()</code>来使用。但还不够，到目前为止，我们只是通过变量来替代<code>isMounted()</code>，还没有做任何的优化，接下来我们需要在<code>componentWillUnmount</code>被调用时取消所有的异步回调，主动释放所有资源，这样就能避免被卸载的组件还持有资源的引用的情况，从而减少了内存溢出等情况的发生。   </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    mydatastore.subscribe(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    mydatastore.unsubscribe(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用可取消的Promise做异步操作。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cancelablePromise = makeCancelable(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> component.setState(&#123;...&#125;&#125;))</span><br><span class="line">);</span><br><span class="line">cancelablePromise</span><br><span class="line">  .promise</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'resolved'</span>))</span><br><span class="line">  .catch(<span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'isCanceled'</span>, reason.isCanceled));</span><br><span class="line">cancelablePromise.cancel(); <span class="comment">// Cancel the promise</span></span><br></pre></td></tr></table></figure><p>可取消的Promise。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> makeCancelable = <span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> hasCanceled_ = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> wrappedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span></span><br><span class="line">      hasCanceled_ ? reject(&#123;<span class="attr">isCanceled</span>: <span class="literal">true</span>&#125;) : resolve(val)</span><br><span class="line">    );</span><br><span class="line">    promise.catch(<span class="function">(<span class="params">error</span>) =&gt;</span></span><br><span class="line">      hasCanceled_ ? reject(&#123;<span class="attr">isCanceled</span>: <span class="literal">true</span>&#125;) : reject(error)</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    promise: wrappedPromise,</span><br><span class="line">    cancel() &#123;</span><br><span class="line">      hasCanceled_ = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React’s official site</a><br><a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" target="_blank" rel="noopener">React on ES6+</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSON</title>
      <link href="/2017/07/05/JSON/"/>
      <url>/2017/07/05/JSON/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON的两种方法小记"><a href="#JSON的两种方法小记" class="headerlink" title="JSON的两种方法小记"></a>JSON的两种方法小记</h2><h3 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h3><p>JSON的全称是：JavaScript Object Notation，意思是JavaScript对象表示法，是一种轻量级的数据交换格式。JSON的语法是JavaScript语法的子集，与js中对象和数组的语法十分相近。</p><p>JSON是一种数据序列化格式，基于JavaScript的直接量，可以表示null、Boolean、Number、String、array以及Object对象。</p><p>JSON里不可以表示undefined、NaN与Infinity、函数、日期以及正则。</p><p>在JSON中，有两种结构：数组与对象</p><blockquote><p>JSON中没有变量的概念，因为JSON不是JavaScript语句，所以末尾不需要加分号。且对象属性必须加双引号，不能是单引号。</p></blockquote><h2 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h2><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON.parse(s,func):解析json格式中的字符串，返回该字符串表示的JavaScript值。s:需要解析的字符串；func:用来转换解析值的可选函数。返回值：一个对象、数组或者原始值。</p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p>JSON.stringify(o,func,indet):序列化对象、数组或者原始值。o:需要转换成JSON字符串的对象、数组或者原始值；func:对字符串化前对值做一些替换；indet：指定字符串缩进字符的空格个数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JSON对象</span></span><br><span class="line"><span class="keyword">var</span> JSON_obj = &#123;<span class="string">"name"</span>:<span class="string">"zlstory"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"sfydx"</span>:<span class="string">"yes"</span>&#125;; <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON数组</span></span><br><span class="line"><span class="keyword">var</span> JSON_arr = [&#123;<span class="string">"name"</span>:<span class="string">"Crystal"</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"Sinsle"</span>&#125;]; <span class="comment">//array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> JSON_str = <span class="string">'&#123;"name":"zlstory","age":"23","sfydx":"yes"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(JSON_str)); <span class="comment">//转换成JSON_obj</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(JSON_obj)); <span class="comment">//由object转换成string类型</span></span><br><span class="line"><span class="comment">//&#123;"name":"zlstory","age":"23","sfydx":"yes"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(JSON_arr));  <span class="comment">//由array转换成string类型</span></span><br><span class="line"><span class="comment">//[&#123;"name":"Crystal"&#125;,&#123;"name":"Sinsle"&#125;]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">o = &#123;<span class="string">"info"</span>:[&#123;</span><br><span class="line">        <span class="string">"t"</span>: <span class="string">"兰蔻根源补养气色水凝乳液15ml*2"</span>,</span><br><span class="line">        <span class="string">"pcp"</span>: <span class="string">"48"</span>,</span><br><span class="line">        <span class="string">"img"</span>: <span class="string">"img/pic0.jpg"</span>,</span><br><span class="line">        <span class="string">"sid"</span>: <span class="string">"1"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">JSON</span>.stringify(o);  <span class="comment">//转换成字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">//&#123;"info":[&#123;"t":"兰蔻根源补养气色水凝乳液15ml*2","pcp":"48","img":"img/pic0.jpg","sid":"1"&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">JSON</span>.parse(a);  <span class="comment">//还原成对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">//&#123;"info":[&#123;</span></span><br><span class="line"><span class="comment">//       "t": "兰蔻根源补养气色水凝乳液15ml*2",</span></span><br><span class="line"><span class="comment">//        "pcp": "48",</span></span><br><span class="line"><span class="comment">//        "img": "img/pic0.jpg",</span></span><br><span class="line"><span class="comment">//        "sid": "1"</span></span><br><span class="line"><span class="comment">//    &#125;]</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用代码片段</title>
      <link href="/2017/07/03/javascript%20demo/"/>
      <url>/2017/07/03/javascript%20demo/</url>
      
        <content type="html"><![CDATA[<h2 id="常用js代码片段整理"><a href="#常用js代码片段整理" class="headerlink" title="常用js代码片段整理"></a>常用js代码片段整理</h2><p>收集了一些在项目中遇见的一些实用代码片段，以便加快开发速度，提高工作效率。将持续更新</p><h3 id="全选操作"><a href="#全选操作" class="headerlink" title="全选操作"></a>全选操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAll</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> selectall = documnent.getElementById(<span class="string">"selectall"</span>);</span><br><span class="line">    <span class="keyword">var</span> allbox = <span class="built_in">document</span>.getElementsByName(<span class="string">"allbox"</span>);</span><br><span class="line">    <span class="keyword">if</span>(selectall.checked)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++)&#123;</span><br><span class="line">            allbox[i].checked = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++)&#123;</span><br><span class="line">            allbox[i].checked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tab效果"><a href="#tab效果" class="headerlink" title="tab效果"></a>tab效果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Change</span>(<span class="params">btn, active, div</span>) </span>&#123;</span><br><span class="line">    $(btn).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(active).siblings(<span class="string">'li'</span>).removeClass(active);</span><br><span class="line">        $(div).eq($(<span class="keyword">this</span>).index()).css(<span class="string">'display'</span>, <span class="string">'block'</span>).siblings().css(<span class="string">'display'</span>, <span class="string">'none'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="禁止页面右键菜单"><a href="#禁止页面右键菜单" class="headerlink" title="禁止页面右键菜单"></a>禁止页面右键菜单</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(docunment).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="新窗口打开页面"><a href="#新窗口打开页面" class="headerlink" title="新窗口打开页面"></a>新窗口打开页面</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"a[href^='http://']"</span>).attr(<span class="string">"target"</span>,<span class="string">"_blank"</span>);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"a[rel $= 'extrenal']"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = <span class="string">"_blank"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.fn.scrollTo = <span class="function"><span class="keyword">function</span> (<span class="params">speed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> targetOffset = $(<span class="keyword">this</span>).offset().top;</span><br><span class="line">    $(<span class="string">'html body'</span>).stop().animate(&#123;<span class="attr">scrollTop</span>:targetOffset&#125;,speed);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use</span></span><br><span class="line">$(<span class="string">"goToHeader"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"body"</span>).scrollTo(<span class="number">500</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取鼠标位置"><a href="#获取鼠标位置" class="headerlink" title="获取鼠标位置"></a>获取鼠标位置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(docunment).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).html(<span class="string">"X："</span>+e.pageX + <span class="string">"| Y"</span> + e.pageY);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="判断div在屏幕中央"><a href="#判断div在屏幕中央" class="headerlink" title="判断div在屏幕中央"></a>判断div在屏幕中央</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.fn.center = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">"position"</span>,<span class="string">"absolute"</span>);</span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">"top"</span>,($(<span class="built_in">window</span>).height() - <span class="keyword">this</span>.height()) / <span class="number">2</span>+$(<span class="built_in">window</span>).scrollTop()+<span class="string">"px"</span>);</span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">"left"</span>,($(<span class="built_in">window</span>).width() - <span class="keyword">this</span>.width()) / <span class="number">2</span>+$(<span class="built_in">window</span>).scrollLeft()+<span class="string">"px"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line">$(<span class="string">"div"</span>).center();</span><br></pre></td></tr></table></figure><h3 id="关闭所有动画"><a href="#关闭所有动画" class="headerlink" title="关闭所有动画"></a>关闭所有动画</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    jQuery.fx.off = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="设置全局ajax参数"><a href="#设置全局ajax参数" class="headerlink" title="设置全局ajax参数"></a>设置全局ajax参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#load"</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    showLoading();  <span class="comment">// 显示loading</span></span><br><span class="line">    disableBUttons();   <span class="comment">// 禁用按钮</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#load"</span>).ajaxComplete(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    hideLoading();  </span><br><span class="line">    enableBUttons();   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取选中的下拉框"><a href="#获取选中的下拉框" class="headerlink" title="获取选中的下拉框"></a>获取选中的下拉框</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#ele"</span>).find(<span class="string">"option:selected"</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#ele option:selected"</span>);</span><br></pre></td></tr></table></figure><h3 id="综合动画"><a href="#综合动画" class="headerlink" title="综合动画"></a>综合动画</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".myImg"</span>).css(<span class="string">"opacity"</span>,<span class="string">"0.5"</span>);</span><br><span class="line">    $(<span class="string">".myInmg"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"400px"</span>,<span class="attr">height</span>:<span class="string">"200px"</span>,<span class="attr">opacity</span>:<span class="string">"1"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .animate(&#123;<span class="attr">top</span>:<span class="string">"200px"</span>,<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .fadeOut(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="给页面中的每个p标签加事件"><a href="#给页面中的每个p标签加事件" class="headerlink" title="给页面中的每个p标签加事件"></a>给页面中的每个p标签加事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">    items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断复选框是否选中"><a href="#判断复选框是否选中" class="headerlink" title="判断复选框是否选中"></a>判断复选框是否选中</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $checkbox = $(<span class="string">"#checkbox"</span>);</span><br><span class="line">    $checkbox.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($checkbox.is(<span class="string">":checked"</span>))&#123;</span><br><span class="line">            alert(<span class="string">"已选中"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//添加cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCookie</span>(<span class="params">key, value, day</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">       date.setDate(date.getDate() + day);</span><br><span class="line">       <span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + <span class="built_in">encodeURI</span>(value) + <span class="string">';expires='</span> + date;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取cookie</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(<span class="built_in">document</span>.cookie);</span><br><span class="line">     <span class="keyword">var</span> arr = str.split(<span class="string">'; '</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> arr1 = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">           <span class="keyword">if</span> (key == arr1[<span class="number">0</span>]) &#123;</span><br><span class="line">               <span class="keyword">return</span> arr1[<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line"> addCookie(key, value, <span class="number">-1</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="返回顶部-1"><a href="#返回顶部-1" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backToTop</span>(<span class="params">btnId</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = set;</span><br><span class="line">    btn.style.display = <span class="string">"none"</span>;</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        btn.style.display = <span class="string">"none"</span>;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop+b.scrollTop)*<span class="number">0.1</span>);</span><br><span class="line">            b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop+b.scrollTop)*<span class="number">0.1</span>);</span><br><span class="line">            <span class="keyword">if</span>((d.scrollTop+b.scrollTop) == <span class="number">0</span>)&#123;</span><br><span class="line">                clearInterval(btn.timer,<span class="built_in">window</span>.onscroll = set);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        btn.style.display = (d.scrollTop+b.scrollTop&gt;<span class="number">100</span>)?<span class="string">"block"</span>:<span class="string">"none"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line">backToTop(<span class="string">'goTop'</span>);</span><br></pre></td></tr></table></figure><h3 id="获取复选框的值"><a href="#获取复选框的值" class="headerlink" title="获取复选框的值"></a>获取复选框的值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_value</span>(<span class="params">field</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(field$$field.length)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(field[i].checked &amp;&amp; !field[i].disable)&#123;</span><br><span class="line">                <span class="keyword">return</span> field[i].value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="窗体改变事件"><a href="#窗体改变事件" class="headerlink" title="窗体改变事件"></a>窗体改变事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement ? <span class="built_in">document</span>.documentElement.clientWidth : documnent.body.clientWidth,</span><br><span class="line">            r = <span class="number">1255</span>,</span><br><span class="line">            b = Element.extend(<span class="built_in">document</span>.body),</span><br><span class="line">            classname = b.className;</span><br><span class="line">        <span class="keyword">if</span>(w &lt; r)&#123;</span><br><span class="line">            <span class="comment">//当窗体的宽度小于1255的时候执行相应操作</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//当窗体的宽度大于1255的时候执行相应操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'onresize'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>selector</title>
      <link href="/2017/06/29/selector/"/>
      <url>/2017/06/29/selector/</url>
      
        <content type="html"><![CDATA[<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><p>在css中，选择器是一种模式，用来实现对html页面中的元素实现一对一，一对多或者多对一的控制。</p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>1.通用选择器  *</p><p>2.class选择器</p><p>3.id选择器</p><p>4.标签选择器</p><h3 id="多元素组合选择器"><a href="#多元素组合选择器" class="headerlink" title="多元素组合选择器"></a>多元素组合选择器</h3><p>1.E,F 多元素选择器，同时选择两个元素 中间用逗号隔开</p><p>2.E F 后代元素选择器，用空格隔开</p><p>3.E&gt;F 子元素选择器</p><p>4.E+F 毗邻元素选择器</p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>1.E[attr] 匹配所有具有attr属性的元素</p><p>2.E[att=val] 匹配所有具有attr属性等于val的元素</p><p>3.E[att~=val] 匹配所有具有attr属性中含有val的元素</p><p>4.E[att|=val] 匹配所有具有attr属性具有多个连字号分隔的值、其中有一个值以为val开头的元素，主要用于lang属性</p><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>1.E:first-child 父元素的第一个子元素</p><p>2.E:link 所有未被点击的连接</p><p>3.E:visited 所有已被点击的连接</p><p>4.E:lactive 正在点击的连接</p><p>5.E:hover 鼠标悬停的元素</p><p>6.E:focus 获得当前焦点的元素</p><p>7.E:enable 匹配表单中激活的元素</p><p>8.E:disabled 匹配表单中被禁用的元素</p><p>9.E:checked 匹配单选框复选框选中的元素</p><p>10.E:selection 匹配当前选中的元素</p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><p>1.E:first-line  匹配元素的第一行</p><p>2.E:first-letter 匹配元素的第一个字母</p><p>3.E:before 在元素之前插入生成的内容</p><p>4.E:after 在元素插入之后生成的内容</p><h3 id="同级元素选择器"><a href="#同级元素选择器" class="headerlink" title="同级元素选择器"></a>同级元素选择器</h3><p>1.E~F 匹配任何在E元素之后的同级F元素</p><h3 id="属性选择器-1"><a href="#属性选择器-1" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>1.E[att^=”val”] 属性attr是以val开头的元素</p><p>2.E[att$=”val”] 属性attr是以val结尾的元素</p><p>3.E[att*=”val”] 属性attr是以包含val的元素</p><h3 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h3><p>1.E:nth-child(n) 匹配父元素的第n个元素 第一个是1</p><p>2.E:nth-last-child（n） 匹配父元素的倒数第n个元素 第一个是1</p><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h3><ol><li><p>$(“*”)  所有元素</p></li><li><p>$(“#info”) id是info的元素</p></li><li><p>$(“.info”)  class是info的元素</p></li><li><p>$(“p”)  所有p标签</p></li><li><p>$(“.info1.info2”)  class是info1且info2的元素</p></li><li><p>$(“p:first”)   第一个p元素</p></li><li><p>$(“p:last”)   最后一个p元素</p></li><li><p>$(“tr:even”)   所有偶数</p></li><li><p>$(“tr:odd”)   所有奇数</p></li><li><p>$(“li:eq(3)”)   第四个li（index从0开始）</p></li><li><p>$(“li:gt(3)”)   index大于3的元素</p></li><li><p>$(“li:lt(3)”)   index小于3的元素</p></li><li><p>$(“input:not(:empty)”)  所有不为空的input元素</p></li><li><p>$(“:header”)  所有标题元素 即h1-h6</p></li><li><p>$(“:animated”)  所有动画元素</p></li><li><p>$(“:contains(‘W3School’)”)  包含指定字符串的所有元素</p></li><li><p>$(“:empty”)   无子元素或子节点的所有元素</p></li><li><p>$(“:hidden”)   所有隐藏的p元素</p></li><li><p>$(“table:visible”)   所有可见的表格</p></li><li><p>$(“[href]”)  所有带有href属性的元素</p></li><li><p>$(“[href=‘#’]”)  所有href属性等于#的元素</p></li><li><p>$(“[href!=‘#’]”)  所有href属性不等于#的元素</p></li><li><p>$(“[href$=‘.jpg’]”)  所有href属性以.jpg结尾的元素</p></li><li><p>$(“:input”)  所有input元素</p></li><li><p>$(“:text”)   所有type=text的input元素</p></li><li><p>$(“:password”)   所有type=password的input元素</p></li><li><p>$(“:radio”)   所有type=radio的input元素</p></li><li><p>$(“:checkbox”)   所有type=checkbox的input元素</p></li><li><p>$(“:submit”)   所有type=submit的input元素</p></li><li><p>$(“:reset”)   所有type=reset的input元素</p></li><li><p>$(“:button”)   所有type=button的input元素</p></li><li><p>$(“:image”)   所有type=image的input元素</p></li><li><p>$(“:file”)   所有type=file的input元素</p></li><li><p>$(“:enable”)  所有激活的input元素</p></li><li><p>$(“:disable”)  所有禁用的input元素</p></li><li><p>$(“:selected”)  所有被选取的input元素</p></li><li><p>$(“:checked”)  所有被选中的input元素</p></li><li><p>$(“p.intro”) 选取所有 class=”intro” 的 </p><p> 元素</p></li><li><p>$(“[href$=’.jpg’]”) 所有带有以 “.jpg” 结尾的属性值的 href 属性</p></li></ol><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><ol><li><p>$(“A B”) 选取A元素的子孙元素中匹配到B的元素</p></li><li><p>$(“A &gt; B”) 选择A元素的子元素中匹配到B的元素</p></li><li><p>$(“A + B”) 选择A元素的下一个兄弟元素中匹配到B的元素</p></li><li><p>$(“A ~ B”) 选择A元素的后面的兄弟元素中匹配到B的元素</p></li></ol><h2 id="jquery选取方法"><a href="#jquery选取方法" class="headerlink" title="jquery选取方法"></a>jquery选取方法</h2><ol><li><p>first(): 返回对象仅包含选中元素中的第一个元素</p></li><li><p>last(): 返回对象仅包含选中元素中的最后一个元素</p></li><li><p>eq(): 返回的对象只包含指定序号的单个选中元素</p></li><li><p>slice(): 参数为开始和结束序号，返回对象包含从开始到结束序号（不包括结束位置）之间的元素集</p></li><li><p>not(): 返回除了显示排除的元素之外的所有选中元素</p></li><li><p>has(): 返回包含特定后代的元素</p></li><li><p>find(): 返回当前选中元素的子孙元素与选择器相匹配的元素</p></li><li><p>children(): 返回每一个选中元素的直接子元素</p></li><li><p>next(): 返回每一个选中元素的的下一个兄弟元素</p></li><li><p>prev(): 返回每一个选中元素的的上一个兄弟元素</p></li><li><p>silbings(): 返回每一个选中元素的所有兄弟元素</p></li><li><p>parent(): 返回每一个选中元素的父节点</p></li><li><p>parents(): 返回每一个选中元素的祖先节点</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Array</title>
      <link href="/2017/06/22/array/"/>
      <url>/2017/06/22/array/</url>
      
        <content type="html"><![CDATA[<h3 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h3><p>1.调用构造函数Array()</p><p>(1)调用时没有参数,即创建一个空数组。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></p><p>(2)调用时有一个参数且为数字，该数字表示数组长度。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>(3)调用时有一个或多个非数值元素、数组元素为参数，此时参数即是该数组的元素。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"crystal"</span>,<span class="string">"zilan"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>2.数组字面量</p><p>使用数组直接量是创建数组最简单的方法，在方括号中将数组元素用逗号隔开即可。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [];    </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"crystal"</span>,<span class="string">"zilan"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></p><h3 id="数组的特点"><a href="#数组的特点" class="headerlink" title="数组的特点"></a>数组的特点</h3><p>1.读写属性</p><p>使用[ ]操作符来读写数组元素,数组索引(下标)从0开始。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>2.length属性</p><p>每个数组都有一个length属性，代表的是数组中元素的个数。通过此属性可以向数组的末尾移除项或者向数组中添加新项。lengfth值 = 索引值+1</p><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>1.push()与pop()</p><p>push()方法：在数组的尾部添加一个或者多个元素，返回值：新数组长度。</p><p>pop()方法：删除数组的最后一个元素，返回值：被删除的元素。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.push(<span class="string">"last"</span>));     <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">// [1, 2, 3, 4, 5, "last"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.pop());    <span class="comment">// last</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>2.shift()与unshift()</p><p>unshift():在数组的头部添加一个或多个元素，返回值：新数组长度。</p><p>shift():删除数组的第一个元素，返回值：被删除的元素。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.unshift(<span class="string">"first"</span>));     <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">// ["first",1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.pop());    <span class="comment">// first</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>3.join()</p><p>join():将数组中所有元素都转化为字符串并拼接在一起，返回值：最后生成的字符串。此方法不修改原数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">" "</span>)); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"-"</span>)); <span class="comment">// 1-2-3-4-5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>4.reverse()</p><p>reverse():将数组中的元素颠倒顺序,返回值：逆序的数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse()); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>5.sort()</p><p>sort():将数组中的元素排序并返回排序后的数组，返回值：排序后的数组。</p><p>(1)没有参数时：按照字母表顺序排列</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Travel"</span>,<span class="string">"on"</span>,<span class="string">"beyond"</span>,<span class="string">"the"</span>,<span class="string">"dawn"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>(2)为了按照其他方式排序，需要给sort()中传入一个比较函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(compare)); <span class="comment">//  [1, 2, 3, 5, 6, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 5, 6, 8, 9]</span></span><br></pre></td></tr></table></figure><p>6.concat()</p><p>concat():创建一个新的数组，返回值：新的数组，包括原始数组以及concat()中的参数,但是不会扁平化数组。注：此方法不会修改原数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.concat(<span class="number">5</span>,<span class="number">6</span>)); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.concat([<span class="number">7</span>,<span class="number">8</span>]));   <span class="comment">// [1, 2, 3, 4, 7, 8]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.concat([<span class="number">9</span>,[<span class="number">10</span>,<span class="number">11</span>]])); <span class="comment">//  [1, 2, 3, 4, 9, [10,11]]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>7.slice()</p><p>slice():返回指定数组的一个子数组,第一个参数表示开始的位置，第二个参数表示结束的位置。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">3</span>));   <span class="comment">// [4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>,<span class="number">-1</span>)); <span class="comment">//  [2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">-3</span>,<span class="number">-2</span>)); <span class="comment">//[3]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>8.splice()</p><p>splice():在数组中插入或者删除元素，第一个参数表示操作起始位置，第二个参数表示删除元素的个数，其后的参数都是插入到原数组的元素。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">4</span>)); <span class="comment">// [5,6,7,8]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">2</span>));   <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">//  [4]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"a"</span>,<span class="string">"b"</span>)); <span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, "a", "b"]</span></span><br></pre></td></tr></table></figure></p><h3 id="ECMAScript5中的数组方法"><a href="#ECMAScript5中的数组方法" class="headerlink" title="ECMAScript5中的数组方法"></a>ECMAScript5中的数组方法</h3><p>ECMAScript5中新定义了9个新的数组方法来遍历、映射、过滤、检测、简化和所搜数组，第一个参数为函数，且数组中的每个元素都调用该函数。</p><p>1.forEach()</p><p>forEach():从头至尾遍历数组，为每个元素调用指定的函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    sum += value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);   <span class="comment">// 28</span></span><br></pre></td></tr></table></figure><p>函数中可有三个参数：数组元素value、索引i、数组本身arr。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,i,arr</span>)</span>&#123;</span><br><span class="line">    arr[i] = value + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>2.map()</p><p>map()：将调用的数组的每个元素传递给指定的函数，返回值：一个包含该函数返回值的数组;不修改原数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//  [1, 4, 9, 16, 25, 36, 49]</span></span><br></pre></td></tr></table></figure><p>3.filter()</p><p>filter():过滤，返回的数组元素是原数组的子集。传递的函数作为筛选的条件，返回true和false。注：不改变原数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> <span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//  [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">//  [4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p>4.every()和some()</p><p>every():当数组中所有元素调用判定函数返回值都为true时，才返回true；</p><p>some():当数组中存在元素调用判定函数返回值为true时，即返回true。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> <span class="keyword">var</span> arr2 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//  false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//  [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p>5.reduce()和reduceRight()</p><p>reduce()和reduceRight()使用指定的函数将数组元素进行组合，第一个参数是执行简单操作的函数，第二个参数是初始值(可选)，传递的函数有四个参数：前一个参数prev、当前值cur、索引i、数组本身arr。reduceRight()表示执行顺序从右到左。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,i,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;y)?x:y;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(sum);  <span class="comment">//  16</span></span><br><span class="line"> <span class="built_in">console</span>.log(max);  <span class="comment">//  5</span></span><br></pre></td></tr></table></figure><p>6.indexOf()和lastIndexOf()</p><p>indexOf()和lastIndexOf():找到返回第一个符合条件元素的索引，找不到返回-1，第一个参数表示需要搜索的值，第二个是索引，指定从哪开始搜索。lastIndexOf()是从后往前搜索。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.indexOf(<span class="number">5</span>);  <span class="comment">//  4</span></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.indexOf(<span class="number">8</span>);   <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.lastIndexOf(<span class="number">5</span>);  <span class="comment">//  4</span></span><br><span class="line"><span class="keyword">var</span> arr4 = arr.lastIndexOf(<span class="number">9</span>);  <span class="comment">//  -1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
