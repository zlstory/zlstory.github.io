<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zlstory</title>
  
  <subtitle>若独学而无友，则孤陋且寡闻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zlstory.com/"/>
  <updated>2019-02-20T06:58:12.066Z</updated>
  <id>http://zlstory.com/</id>
  
  <author>
    <name>Crystal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用element-ui搭建后台管理系统问题汇总</title>
    <link href="http://zlstory.com/2019/02/20/vue-manage-tips/"/>
    <id>http://zlstory.com/2019/02/20/vue-manage-tips/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-02-20T06:58:12.066Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间插件"><a href="#时间插件" class="headerlink" title="时间插件"></a>时间插件</h4><ol><li>两个输入框，限制结束日期不能大于开始日期</li></ol><p>注意此时input框中不能使用value-format，这会使日期变成字符串从而不能比较大小<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-date-picker</span></span><br><span class="line"><span class="regexp">    type="date"</span></span><br><span class="line"><span class="regexp">    placeholder="结束日期"</span></span><br><span class="line"><span class="regexp">    v-model="dayEndTime"</span></span><br><span class="line"><span class="regexp">    :picker-options="pickerOptions1"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-date-picker&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        pickerOptions0: &#123;</span><br><span class="line">          disabledDate: <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.dayEndTime != <span class="string">""</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now() || time.getTime() &gt; <span class="keyword">this</span>.dayEndTime;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        pickerOptions1: &#123;</span><br><span class="line">          disabledDate: <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> time.getTime() &lt; <span class="keyword">this</span>.dayStartTime || time.getTime() &gt; <span class="built_in">Date</span>.now();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        dayStartTime: <span class="string">''</span>,</span><br><span class="line">        dayEndTime:<span class="string">''</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其他的时间限制：<a href="http://www.cnblogs.com/xjcjcsy/p/7977966.html" target="_blank" rel="noopener">更多限制</a></p><ol start="2"><li>获取到的日期与选中的日期相隔一天</li></ol><p>一般情况下使用value-format即可解决这个问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    value-format=<span class="string">"yyyy-MM-dd"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br></pre></td></tr></table></figure><p>但是在比较大小的时候不能使用value-format，所以使用change事件获取到值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    @change=<span class="string">"getStartTime"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">      getStartTime(time)&#123;</span></span><br><span class="line"><span class="regexp">        this.dayStartTime = time</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="通过id跳转到不同的详情页"><a href="#通过id跳转到不同的详情页" class="headerlink" title="通过id跳转到不同的详情页"></a>通过id跳转到不同的详情页</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">const</span> dataID=<span class="keyword">this</span>.$route.query.id</span><br><span class="line">    request(&#123;</span><br><span class="line">        method:<span class="string">'get'</span>,</span><br><span class="line">        url:<span class="string">`/web/admin/downstream/merchantList/<span class="subst">$&#123;dataID&#125;</span>`</span></span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = res.data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="背景图片打包后找不到路径问题"><a href="#背景图片打包后找不到路径问题" class="headerlink" title="背景图片打包后找不到路径问题"></a>背景图片打包后找不到路径问题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style lang=<span class="string">"stylus"</span> scoped&gt;</span><br><span class="line">.bg</span><br><span class="line">  background url(<span class="string">"~@/assets/psdBg.png"</span>) no-repeat</span><br><span class="line">  background-size <span class="number">100</span>% <span class="number">100</span>%</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 在build/u</span>tils.js</span><br><span class="line">   <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">      <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        publicPath:<span class="string">'../../'</span>,   <span class="comment">//添加此行</span></span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;时间插件&quot;&gt;&lt;a href=&quot;#时间插件&quot; class=&quot;headerlink&quot; title=&quot;时间插件&quot;&gt;&lt;/a&gt;时间插件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;两个输入框，限制结束日期不能大于开始日期&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意此时input框中不能使用value-
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>面试题汇总</title>
    <link href="http://zlstory.com/2018/12/26/interviewQuestion/"/>
    <id>http://zlstory.com/2018/12/26/interviewQuestion/</id>
    <published>2018-12-25T16:00:00.000Z</published>
    <updated>2019-02-20T07:20:53.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h3><ol><li>使以下代码正常运行<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.multiply()</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1,2,3,4,5,1,4,9,16,25</span></span><br></pre></td></tr></table></figure></li></ol><p>答案为<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.multiply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            arr1 = arr[i] * arr[i];</span><br><span class="line">        &#125;)()</span><br><span class="line">        arr.push(arr1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.multiply());<span class="comment">//1, 2, 3, 4, 5, 1, 4, 9, 16, 25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.multiply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.forEach( <span class="function">(<span class="params">item,index,arr</span>) =&gt;</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.push(arr[index] ** <span class="number">2</span>) </span><br><span class="line">        &#125;) </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] </span><br><span class="line">    a.multiply() </span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//[1, 2, 3, 4, 5, 1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>为什么在js中<code>0.2+0.1 == 0.3</code>返回false？</li></ol><p>回答：在js进行数字运算时，会有<strong>精度缺失</strong>的问题，简单的来说，由于0.1转换成二进制时是无限循环的，所以在计算机中只能存储一个近似值，0.1与0.2都是取得近似值，所以返回的是false。但是这并非绝对，有时两个近似值在进行计算的时候，得到的值在js的近似范围内，就可以返回true。</p><p>规避方法：为了避免小数计算的精度问题，最常用的方式是将浮点数转化成整数去进行计算。</p><ol start="3"><li>JavaScript 中有哪些不同的数据类型？</li></ol><p>回答： 有两种：主要数据类型和引用类型（也称原始类型和对象类型）</p><p>主要数据类型为：Number（数字）、String（字符串） 、Boolean（布尔值）、Null（空）和Undefined（未定义）<br>引用类型为： Object（对象）</p><ol start="4"><li>使用proxy实现数据绑定</li></ol><p>答：proxy可以理解为在目标对象之前设置一层”拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript篇&quot;&gt;&lt;a href=&quot;#JavaScript篇&quot; class=&quot;headerlink&quot; title=&quot;JavaScript篇&quot;&gt;&lt;/a&gt;JavaScript篇&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使以下代码正常运行&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="面试" scheme="http://zlstory.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>重装系统之后的一系列操作</title>
    <link href="http://zlstory.com/2018/11/19/environment/"/>
    <id>http://zlstory.com/2018/11/19/environment/</id>
    <published>2018-11-18T16:00:00.000Z</published>
    <updated>2018-11-19T07:54:26.923Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node环境</a></h5><h5 id="安装git环境"><a href="#安装git环境" class="headerlink" title="安装git环境"></a>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git环境</a></h5><p> 下载安装之后，执行以下命令<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;zlstory&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global user.email &quot;13968106594@163.com&quot;</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;13968106594@163.com&quot;</span><br></pre></td></tr></table></figure></p><p> 创建ssh密钥之后，将github中setting中的SSH and GPG keys新增。title随便填，下面的把刚才生成的id_rsa.pub（目录：C:\Users\Crystal.ssh）用记事本打开把内容贴进去。</p><h5 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h5> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;13968106594@163.com&quot;</span><br></pre></td></tr></table></figure><p> 将之前保存的hexo压缩包解压之后，直接<code>npm install</code>即可本地预览。</p><h5 id="host文件地址"><a href="#host文件地址" class="headerlink" title="host文件地址"></a>host文件地址</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;安装node环境&quot;&gt;&lt;a href=&quot;#安装node环境&quot; class=&quot;headerlink&quot; title=&quot;安装node环境&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://nodejs.org/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="environment" scheme="http://zlstory.com/tags/environment/"/>
    
  </entry>
  
  <entry>
    <title>VUE去哪儿网学习笔记3</title>
    <link href="http://zlstory.com/2018/11/06/vue-note4/"/>
    <id>http://zlstory.com/2018/11/06/vue-note4/</id>
    <published>2018-11-05T16:00:00.000Z</published>
    <updated>2018-11-06T00:01:15.492Z</updated>
    
    <content type="html"><![CDATA[<p>进行项目实战环节</p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ol><li><p>安装node webpack github等环境</p></li><li><p>全局安装脚手架vue-cli</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure></li><li><p>使用vue-cli构建项目</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack travel</span><br></pre></td></tr></table></figure></li></ol><p>之后会出现一系列的问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Project name y</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author zlstory &lt;13968106594@163.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? No</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) npm</span><br></pre></td></tr></table></figure></p><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><ol><li><p>路由<br>路由就是根据网址不同，返回不同的内容给用户</p></li><li><p>@符号表示src目录下</p></li><li><p>路由的配置文件放在router文件夹下的index.js中</p></li><li><p>多页应用：页面之间的跳转，返回的是html，优点是首屏时间快，seo效果好。缺点是：页面之间切换慢。</p><p>单页应用：页面跳转并不是跳转到另一个html，而是通过js删除本页面的dom，加载新的dom。优点是页面切换快，缺点是首屏时间稍慢，seo差。</p></li></ol><h1 id="禁用eslint"><a href="#禁用eslint" class="headerlink" title="禁用eslint"></a>禁用eslint</h1><p>在webpack.base.conf.js注释代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createLintingRule = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">  loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">  enforce: <span class="string">'pre'</span>,</span><br><span class="line">  include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)],</span><br><span class="line">  options: &#123;</span><br><span class="line">    formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>),</span><br><span class="line">    emitWarning: !config.dev.showEslintErrorsInOverlay</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>或者在index.js中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEslint: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure></p><h1 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h1><ol><li><p>改变meta标签，使其适配于移动端</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用reset.css清除浏览器默认样式。在assets文件夹中放入静态资源。在main.js中import进去。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import './assets/styles/reset.css'</span><br></pre></td></tr></table></figure></li><li><p>为了解决1像素问题，引入文件：border.css</p></li><li><p>解决移动端点击延迟问题：引入fastclick.js<br>使用<code>npm install fastclick --save</code><br>在mian.js中引入并使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line">fastClick.attach(<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure></li><li><p>在index.js中配置页面路由</p><p>src目录下新建pages文件夹，在index.js中按需引入</p></li><li><p>在项目中使用stylus：<code>npm install stylus --save</code>、<code>npm install stylus-loader --save</code>。<br> 然后在style中定义<code>lang=stylus</code>即可</p></li></ol><ol start="7"><li><p>在pages/home的文件夹中新建components文件夹，放入Header.vue。是home顶部的组件，然后在Home.vue中使用Header.vue:先引入再注册后使用(注意大小写问题)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;home-header&gt;<span class="xml"><span class="tag">&lt;/<span class="name">home-header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> HomeHeader <span class="keyword">from</span> <span class="string">'./components/Header'</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      components:&#123;</span><br><span class="line">          HomeHeader</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>开发HomeHeader组件。<br> 使用rem布局：在reset.css中定义html为50px，所以header本来为43px的高度，则为0.86rem</p></li><li><p>使用iconfont，在main.js中import入iconfont.css(因为多个页面都需要引入iconfont)</p></li><li><p>为主题颜色写一个公用的css：varibles.styl 为css主题色定义变量，在所需页面中引入即可，方便以后改变主题颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在varibles.styl */</span></span><br><span class="line">$bgColor = #00bcd4</span><br><span class="line">$darkTextColor = #333</span><br><span class="line">$headerHeight = .86rem</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在所需页面中先引入再使用 */</span></span><br><span class="line">&lt;style lang="stylus" scoped&gt;</span><br><span class="line">    @<span class="keyword">import</span> <span class="string">'../../../assets/styles/varibles'</span></span><br><span class="line">    .header</span><br><span class="line">        display flex</span><br><span class="line">        height <span class="number">0.86rem</span></span><br><span class="line">        line-height <span class="number">0.86rem</span></span><br><span class="line">        color #fff</span><br><span class="line">        background $bgColor</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>由于上面的路径太长了，所以我们可以使用@符号(代表src目录)，需要注意的是在css中引入其他的css，想用@符号时，需在@符号或者别名前面加一个~<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'~@/assets/styles/varibles'</span></span><br></pre></td></tr></table></figure></p><p>也可以自定义一个别名来代表assets的styles目录,在webpack.base.conf.js中进行配置<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">   alias: &#123;</span><br><span class="line">     <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">     <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">     <span class="string">'styles'</span>: resolve(<span class="string">'src/assets/styles'</span>),</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ol start="11"><li>使用插件进行首页轮播图的开发：github上搜索：vue-awesome-swiper<br>先安装再看文档后使用(全局使用)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-awesome-swiper@2.6.7 --save</span><br></pre></td></tr></table></figure></li></ol><p>遇见的坑：在import中引入时出现找不到该模块的声明文件。</p><ol start="12"><li><p>新建swiper.vue进行开发</p><p>优化：当网速较慢，图片未加载完成的时候，页面会有抖动。解决办法：swiper外层加一个div.wrapper。再使用css：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper</span><br><span class="line">    overflow hidden</span><br><span class="line">    width 100%</span><br><span class="line">    height 0</span><br><span class="line">    padding-bottom 26.67%</span><br><span class="line">or</span><br><span class="line"> .wrapper</span><br><span class="line">    overflow hidden</span><br><span class="line">    height 26.67vw</span><br></pre></td></tr></table></figure><p>数值是轮播图片的高除以宽得到的</p></li><li><p>改变swiper的pagination默认样式：&gt;&gt;&gt; 样式穿透  为了不受scoped的限制</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt;&gt;&gt; <span class="selector-class">.swiper-pagination-bullet-active</span>&#123;</span><br><span class="line">    background #ffffff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为了使icons能够左右滑动，需要借用computed来计算icon是否需要第二页显示。直接在computed中计算就好。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    pages() &#123;</span><br><span class="line">        <span class="keyword">const</span> pages = []</span><br><span class="line">        <span class="keyword">this</span>.iconList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> page = <span class="built_in">Math</span>.floor(index / <span class="number">8</span>) <span class="comment">//看数据到底展示在哪一页,从0开始</span></span><br><span class="line">            <span class="keyword">if</span> (!pages[page]) &#123; <span class="comment">//如果不存在(一开始的情况)</span></span><br><span class="line">                pages[page] = []</span><br><span class="line">            &#125;</span><br><span class="line">            pages[page].push(item)<span class="comment">//将item放入pages中</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> pages</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这段代码是为了将data中的iconlists拆分成两个数组。使用vue.js devTools插件可以看得更加清楚<br>然后在template中循环pages相关内容就完成了。</p><ol start="15"><li>使用minxin封装一个 内容太多显示…的css<br>在mixins.styl中<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ellipsis</span>()</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span></span><br><span class="line">  <span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span></span><br><span class="line">  <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span></span><br></pre></td></tr></table></figure></li></ol><p>使用：先引入该文件 再在所需的样式表中<code>ellipsis()</code>即可</p><ol start="16"><li><p>在stylus中，通过@import引入的必须是.styl文件，.css文件在index.html中引入，否则报错</p></li><li><p>开发recommend模板以及weekend模板</p></li><li><p>由于很多子组件中都需要数据，需要发送ajax请求，而子组件都是显示在home.vue中，所以可以直接在home.vue中发送ajax请求。</p></li></ol><p>将json文件放在static文件夹中，因为在vue-cli生成的所有文件夹中只有static可以被外部(浏览器中输入路径)访问到。</p><ol start="19"><li>本地将所有模拟数据都是放在mock文件夹中的，所以axios的请求路径是’/static/mock/index.json’,但是线上版本应该是’/api/index.json’,当我们在本地模拟的时候与上线路径不一致，而在上线前改变代码也是一件非常危险的事情，所以我们需要使用vue代理将请求路径保持一致。</li></ol><p>打开config文件夹中的index.js(此功能由webpack-dev-server提供)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:8080'</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">'/static/mock'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更改配置文件之后，需要重新启动服务器。</p><ol start="20"><li><p>在home.vue中通过axios得到所有数据，现在需要通过父子组件传值来将数据传到各个子组件中</p></li><li><p>进行城市选择开发页面，需要配置index.js中的路由信息.</p><p>当我们在头部(home/header.vue)中点击城市选择的时候，会调到city组件，所以在header.vue的header-right部分使用router-link</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-right"</span>&gt;</span>&#123;&#123;this.city&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont arrow-icon"</span>&gt;</span>&amp;#xe64a;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="22"><li><p>开发city组件时，新建<code>page/city/city.vue</code>，然后开发<code>page/city/components/CityHeader.vue</code>。(较为简单无技巧)</p></li><li><p>开发city中的搜索框界面:当给input给左右内边距时，需要设置</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.search-input</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>控制页面上的1像素边框问题</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-topbottom</span></span><br><span class="line">   &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">       <span class="selector-tag">border-color</span> <span class="selector-id">#ccc</span></span><br><span class="line">   &amp;<span class="selector-pseudo">:after</span></span><br><span class="line">       <span class="selector-tag">border-color</span> <span class="selector-id">#ccc</span></span><br></pre></td></tr></table></figure></li><li><p>开始列表布局(复杂项)，新建list.vue<br>(1) 新建三个area，分别是当前城市，热门城市，以A开头的城市，完善布局之后，使用better-scroll</p></li></ol><p>(2) 安装better-scroll</p><pre><code>使用的时候首先要符合bs规定的dom结构(不一定是ul标签)</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- you can put some other DOMs here, it won't affect the scrolling --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>然后引入Bscroll,在页面挂载成功之后使用(wrapper是最外层dom的ref)</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的滚动完成</p><ol start="26"><li><p>开发左边字母表组件(alphabet.vue)</p></li><li><p>动态渲染city组件啦！<br>在city.vue组件中，使用axios.get获取城市列表，然后父子组件传值到city-list组件中。</p></li></ol><p>循环中再循环了解一下:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area"</span> <span class="attr">v-for</span>=<span class="string">"(item,key) of cities"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title border-topbottom"</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item border-bottom"</span> <span class="attr">v-for</span>=<span class="string">"innerItem of item"</span> <span class="attr">:key</span>=<span class="string">"innerItem.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;innerItem.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="28"><li><p>兄弟组件联动：点击右边字母表，左边滑动到对应的位置</p><p>思路：将alphabet.vue中的字母通过点击事件拿到对应的innerText，将其传值给兄弟组件list.vue(先将alphabet.vue中的值传递给父组件city.vue,再将数据从city.vue中传递给list.vue)</p><p>alphabet.vue:在字母表的item中绑定一个点击事件,向外触发事件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> handleLetterClick(e)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'change'</span>,e.target.innerText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>city.vue：监听子组件传递过来的change事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">city-alphabet</span> <span class="attr">:cities</span>=<span class="string">"cities"</span> @<span class="attr">change</span>=<span class="string">"handleLetterChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">city-alphabet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在methods中定义<code>handleLetterChange</code>事件,然后将letter传值给list.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleLetterChange(letter) &#123;</span><br><span class="line">       <span class="comment">//拿到alphabet.vue中的字母值。</span></span><br><span class="line">       <span class="built_in">console</span>.log(letter)</span><br><span class="line">       <span class="keyword">this</span>.letter = letter</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当list.vue拿到点击的letter值时，思路：当letter改变时，我们需要找到对应字母的列表。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    letter: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">watch: &#123;</span><br><span class="line">    letter() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.letter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过调用better-scroll提供的<code>scrollToElement()</code>方法控制左边列表滚动到对应的列表上面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area"</span> <span class="attr">v-for</span>=<span class="string">"(item,key) of cities"</span> <span class="attr">:key</span>=<span class="string">"key"</span> <span class="attr">:ref</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title border-topbottom"</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item border-bottom"</span> <span class="attr">v-for</span>=<span class="string">"innerItem of item"</span> <span class="attr">:key</span>=<span class="string">"innerItem.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;innerItem.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    letter() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.letter) &#123;</span><br><span class="line">            <span class="keyword">const</span> element = <span class="keyword">this</span>.$refs[<span class="keyword">this</span>.letter][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">this</span>.scroll.scrollToElement(element,<span class="number">400</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>右侧字母表监听滚动事件<br>思路:获得字母A到顶部的距离，当滑动的时候获取手指距离顶部的高度，得到差值之后除以字母之间的高度。这样就知道当前是第几个字母了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touchStatus) &#123;</span><br><span class="line">        <span class="keyword">const</span> startY = <span class="keyword">this</span>.$refs[<span class="string">'A'</span>][<span class="number">0</span>].offsetTop</span><br><span class="line">        <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY - <span class="number">79</span></span><br><span class="line">        <span class="keyword">const</span> index = Math.floor((touchY - startY) / <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.letters.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.letters[index])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述写法是比较耗性能的，因为offsetTop一直在改变。所以使用updated钩子函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">       <span class="keyword">this</span>.startY = <span class="keyword">this</span>.$refs[<span class="string">'A'</span>][<span class="number">0</span>].offsetTop</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>再进行函数节流：延迟16毫秒去执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touchStatus) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.timer) &#123;</span><br><span class="line">            clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY - <span class="number">79</span></span><br><span class="line">            <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor((touchY - <span class="keyword">this</span>.startY) / <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.letters.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.letters[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">16</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在城市选择的时候，点击搜索框，根据用户输入信息实时显示所匹配的信息。</p><p>首先通过父子组件之间传值获取到所有cities的数据，然后通过v-model的双向数据绑定去获取到用户的值，再与cities中的数据进行匹配</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>.cities) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cities[i].forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.spell.indexOf(<span class="keyword">this</span>.keyword) &gt; <span class="number">-1</span> || value.name.indexOf(<span class="keyword">this</span>.keyword) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            result.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.list = result</span><br></pre></td></tr></table></figure><ol start="31"><li><p>熟悉vuex</p><p>因为city.vue与home.vue之间是没有共同父组件的，如果要进行两个组件之间的通信的话，可以使用vue官方推荐的vuex(数据框架)</p><p>为什么需要vuex(设计理念)：</p><p>当我们的项目中有多个页面或者是多个组件之间进行复杂的数据传值很困难的时候，可以将公用的数据放在公共的存储空间去存储，当我们在某一个组件中改变数据的时候，其他组件就可以感知到数据的变化。</p><p>图解：<br>vuex由哪几部分组成：</p><p>state：存储公用数据，需要公用数据的时候，直接调用state就好了</p><pre><code>当我们需要改变数据的时候,我们不能用组件(Vue components)直接改变数据，需要走一个流程：    (1)如果有异步操作、复杂的同步操作、批量的同步操作，我们将异步操作放在actions中，    Vue components -&gt; Actions -&gt; Mutations -&gt; Satate    或者 Vue components -&gt; Mutations -&gt; Satate</code></pre></li><li><p>在项目中使用vuex<br>本应该在main.js中引入vuex的，但是为了更方便管理，我们将其放在新的位置<br>在src目录下新建store文件夹，在该文件夹下新建index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'北京'</span>  <span class="comment">//在city组件和home组件中关联起来的一个值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>然后在main.js中<code>import store from &#39;./store&#39;</code><br>并在根组件中注册store</p><ol start="33"><li>注册store之后，现在开始使用store中的数据</li></ol><p>home.vue中以前home-header组件中的city值是由外部传入进去的，现在我们并不需要后端传值给我们了，而是由前端存储的，所以删掉<code>:city = &quot;city&quot;</code>以及data中的city默认值</p><p>header.vue中之前关于接收city的props也可以删掉了，而使用<code></code>拿到我们刚刚在store中存储的值</p><ol start="34"><li><p>改变state：在城市选择的列表里，点击哪个城市，state值就为哪个城市。</p><p>在list.vue中给热门城市的item绑定一个handleCityClick事件，使用dispatch方法改变actions</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> methods: &#123;</span><br><span class="line">    handleCityClick(city) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p>又因为改变的actions，所以我们需要在刚刚的store/index中添加一个actions，并接收两个参数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeCity(ctx, city)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>actions又通过commit方法来调用mutations去改变公共数据，所以又需要新建一个mutations<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeCity(ctx, city)&#123;</span><br><span class="line">        ctx.commit(<span class="string">'changeCity'</span>,city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">        state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>正常流程是以上步骤，但是由于本项目开发是没有异步数据也没有批量处理同步数据，所以我们可以不走actions这一步，那么做出的改变就是<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list.vue</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    handleCityClick(city) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">        state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在所需点击地方加入对应的方法即可。</p><ol start="35"><li><p>在点击对应的城市完毕时，返回首页内容(vue-router)，使用router.push</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> handleCityClick(city) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vuex的高级使用以及localstorage</p></li></ol><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p><p>当我们选择城市时，在进行一次刷新操作，页面又变成了默认的城市，所以我们需要用localstorage去存储数据，这样子我们下一次进入该网站时也是上一次选择的城市。</p><p>需要改变index.js中的内容(比较简单),直接使用localstorage就可以了<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: localStorage.city || <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      localStorage.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当某一些用户使用隐身模式或者禁用了本地存储功能，为了使代码正常运行，我们需要在所有localstorage外层包裹一层try catch<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">'上海'</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.city) &#123;</span><br><span class="line">    defaultCity = localStorage.city</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        localStorage.city = city</span><br><span class="line">      &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在实际项目中，为了使代码更加规范易懂以及更方便维护，所以我们会再建立state.js与mutations.js,然后将index.js代码拆分出来<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//state.js</span></span><br><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">'上海'</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.city) &#123;</span><br><span class="line">    defaultCity = localStorage.city</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mutations.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  changeCity(state, city) &#123;</span><br><span class="line">    state.city = city</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      localStorage.city = city</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol start="37"><li>mapState<br>由于页面中的<code>this.$store.state.city</code>太长了，所以我们可以使用vuex提供的api<code>mapState</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'HomeHeader'</span>,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState([<span class="string">'city'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样在页面中使用<code></code>即可</p><p>同理{mapMutations}也是先引入再使用，使代码看起来更加简洁。</p><ol start="38"><li>使用keep-alive优化性能<br>由于切换路由的时候，组件都会被重新渲染，导致mouted()钩子会重新执行，所以每一次都会发送请求。</li></ol><p>但是项目中的json数据并无改变，所以我们可以在app.vue中使用keep-alive</p><p>使用keep-alive之后，monted()不会执行，但是actived()会执行，所以需要处理什么，可以放在actived钩子函数之中</p><p>actived():当页面重新被显示的时候执行</p><ol start="39"><li>开发详情页</li></ol><p>在recommend.vue中使用router-link标签来进行页面跳转并进行参数的传递<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/detail' + item.id"</span> <span class="attr">tag</span>=<span class="string">'li'</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="40"><li><p>在src目录下新建common文件夹，放入的是公用的组件,并在webpack.base.config.js中为此目录创建一个别名</p></li><li><p>在vue开发时，需要注意的是解绑全局事件。如果是对某个标签的事件进行绑定，那么将不会造成影响。但是如果事件是window事件的话将会对其他页面造成一定的影响，所以我们需要进行全局事件的解绑<br>当在组件中使用keep-alive时，此组件会多出一个actived()钩子函数，在每次页面展示的时候会执行。与之对应的会有另一个生命钩子函数叫做deactivated(),在页面即将被隐藏的时候执行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> activated() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</span><br><span class="line">&#125;,</span><br><span class="line">deactivated() &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用递归组件：在组件自身调用组件自身<br>数据格式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list: [&#123;</span><br><span class="line">        title: <span class="string">"成人票"</span>,</span><br><span class="line">        children:[&#123;</span><br><span class="line">            title:<span class="string">"成人三馆联票"</span>,</span><br><span class="line">            children:[&#123;</span><br><span class="line">                title:<span class="string">"成人三馆联票-某连锁销售"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            title:<span class="string">"成人五馆联票"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"学生票"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"特惠票"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"儿童票"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) of list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-title border-bottom"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-title-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"item.children"</span> <span class="attr">class</span>=<span class="string">"item-children"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">detail-list</span> <span class="attr">:list</span>=<span class="string">"item.children"</span>&gt;</span><span class="tag">&lt;/<span class="name">detail-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="43"><li>通过不同id值传参给后端</li></ol><p>在index.js中设置动态路由的时候，会将动态的id以参数的形式设置好<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/city'</span>,</span><br><span class="line">      name: <span class="string">'City'</span>,</span><br><span class="line">      component: City</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/detail/:id'</span>,</span><br><span class="line">      name: <span class="string">'Detail'</span>,</span><br><span class="line">      component: Detail</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在发送请求的时候</p><p>传统方式是通过字符串拼接：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  getDetailInfo()&#123;</span><br><span class="line">    axios.get(<span class="string">'/api/detail.json?id='</span>+<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更为直观的传参方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getDetailInfo() &#123;</span><br><span class="line">   axios.get(<span class="string">'/api/detail.json'</span>, &#123;</span><br><span class="line">           params: &#123;</span><br><span class="line">               id: <span class="keyword">this</span>.$route.params.id</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行项目实战环节&lt;/p&gt;
&lt;h1 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装node webpack github等环境&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE去哪儿网学习笔记2</title>
    <link href="http://zlstory.com/2018/10/18/vue-note3/"/>
    <id>http://zlstory.com/2018/10/18/vue-note3/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2018-11-06T00:01:33.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue组件中的细节"><a href="#vue组件中的细节" class="headerlink" title="vue组件中的细节"></a>vue组件中的细节</h3><p>在table中使用tr作为全局组件注入到table时，会发生问题：tr并没有按照预期所想放在tbody中，而是与table同级。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;row&gt;<span class="xml"><span class="tag">&lt;/<span class="name">row</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    Vue.component("</span>row<span class="string">",&#123;</span></span><br><span class="line"><span class="string">        template:"</span>&lt;tr&gt;<span class="keyword">this</span> is tr&lt;<span class="regexp">/tr&gt;"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#root"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;div id="root"&gt;</span></span><br><span class="line"><span class="comment">//     &lt;tr&gt;this is tr&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//     &lt;table&gt;</span></span><br><span class="line"><span class="comment">//         &lt;tbody&gt;&lt;/tbody&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/table&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，可以使用在tr标签中使用vue中的is，这样写既能保证组件的数据时正确的，又能保证符合h5的规范。同ul li</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr is=<span class="string">"row"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子组件的data问题"><a href="#子组件的data问题" class="headerlink" title="子组件的data问题"></a>子组件的data问题</h4><p>在子组件中定义data时必须是一个函数形式 使用return返回数据，而不能是一个对象，因为根组件只会被调用一次，而子组件可能会被不同得地方中调用多次，避免各个地方得同一个子组件中得数据混淆(避免公用数据)，使用函数的return一个对象可以保证子组件拥有独立的数据存储。</p><h4 id="在vue中获取dom"><a href="#在vue中获取dom" class="headerlink" title="在vue中获取dom"></a>在vue中获取dom</h4><p>虽然vue不建议在dom上面操作事件，但是当你需要操作dom的时候，可以使用ref来获取。</p><h4 id="父子组件之间传值问题"><a href="#父子组件之间传值问题" class="headerlink" title="父子组件之间传值问题"></a>父子组件之间传值问题</h4><p>父组件向子组件传递数据是通过属性的方式</p><p>父组件可以向子组件传递参数，但是子组件不能修改父组件中的变量</p><h4 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h4><p>一般父组件向子组件之间进行传值是通过prop的形式，但是当我们需要向子组件传递html文本的时候，发现prop并不好用，如:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;child content=<span class="string">"&lt;p&gt;通过prop向子组件中传值：&lt;/p&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  var child = &#123;</span></span><br><span class="line"><span class="regexp">    template:`</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div v-html = "this.content"&gt;&lt;/</span>div&gt;</span><br><span class="line">            <span class="keyword">this</span> is child</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    `,</span></span><br><span class="line"><span class="regexp">    props:['content']</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el:"#root",</span></span><br><span class="line"><span class="regexp">    components:&#123;</span></span><br><span class="line"><span class="regexp">        child:child</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>此时我们浏览器解析出来的dom结构为：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span>通过prop向子组件中传值：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        this is child</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以发现p标签是被一个div包裹着的，这并不是我们所需要的，而且当我们需要向子组件传递大量html的时候，content中需要写入大量的代码，所以slot(插槽)的作用就可以体现出来了。</p><p>slot：父组件向子组件中优雅的传递dom</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue组件中的细节&quot;&gt;&lt;a href=&quot;#vue组件中的细节&quot; class=&quot;headerlink&quot; title=&quot;vue组件中的细节&quot;&gt;&lt;/a&gt;vue组件中的细节&lt;/h3&gt;&lt;p&gt;在table中使用tr作为全局组件注入到table时，会发生问题：tr并没有按照预期
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE去哪儿网学习笔记1</title>
    <link href="http://zlstory.com/2018/09/27/vue-note2/"/>
    <id>http://zlstory.com/2018/09/27/vue-note2/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2018-11-06T00:01:42.497Z</updated>
    
    <content type="html"><![CDATA[<p>知识点：</p><pre><code>1. 使用axios进行ajax数据的获取2. 使用vue-router来进行多页面之间的路由跳转3. 使用vuex各个组件之间的数据共享4. 使用异步组件来优化性能5. 使用stylus编写样式6. 使用递归组件来实现组件调用自身组件7. 各种插件的调用：如swiper8. 自己对公用组件的拆分</code></pre><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="查看vue-js的官方文档"><a href="#查看vue-js的官方文档" class="headerlink" title="查看vue.js的官方文档"></a>查看vue.js的官方文档</h2><ol><li><p>使用vue.js实现todoList的功能，体现了vue的编程思想是MVVM：不改变DOM，而是只操作数据，最后dom随着数据的改变而改变</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"text"</span> v-model = <span class="string">"inputValue"</span>&gt;</span><br><span class="line">       &lt;button @click = <span class="string">"handleBtnClick"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">       &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">           &lt;li v-for="item in list"&gt;</span></span><br><span class="line"><span class="regexp">               &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>li&gt;</span><br><span class="line">       &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           el:<span class="string">"#app"</span>,</span><br><span class="line">           data:&#123;</span><br><span class="line">               list:[],</span><br><span class="line">               inputValue:<span class="string">''</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//  console.log(this.inputValue)</span></span><br><span class="line">                 <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span><br><span class="line">                 <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   </span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用JavaScript实现todolist的功能，体现的是MVP的编程思想：M是模型层（此段代码并没有体现），dom是V层，P(核心层)是js部分，指的是控制器，当点击按钮的时候，控制器里面的代码会执行，负责了所有的逻辑部分，控制器可以调用模型层来发起ajax请求，也可以操作dom改变视图。   Presenter层是View层以及Model层的中转站</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"input"</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul id="list"&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/code.jquery.com/</span>jquery<span class="number">-1.11</span><span class="number">.3</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    function Page() &#123;  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $.extend(Page.prototype,&#123;</span></span><br><span class="line"><span class="string">        init:function()&#123;</span></span><br><span class="line"><span class="string">            this.bindEvents()</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        bindEvents:function()&#123;</span></span><br><span class="line">            var btn = $("#btn");</span><br><span class="line">            btn.on(<span class="string">"click"</span>,$.proxy(<span class="keyword">this</span>.handleBtnClick,<span class="keyword">this</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> inputValue = $(<span class="string">"#input"</span>).val();</span><br><span class="line">            <span class="keyword">var</span> ulElem = $(<span class="string">"#list"</span>)</span><br><span class="line">            ulElem.append(<span class="string">"&lt;li&gt;"</span>+inputValue+<span class="string">"&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="string">"#input"</span>).val(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line">    page.init()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MVP与MVVM设计模式<br>MVVM:  View - ViewModel - Model</p></li></ol><p>Model:负责存储数据<br>View:视图层，负责显示数据<br>ViewModel:vue自带的一层(内置))，不需要我们去关心怎么实现的。<br>当我们使用MVVM设计模式的时候，我们只需要关心view和model。</p><p>在mvp设计模式开发的时候是面向DOM，mvvm设计模式面向数据进行编程，大大的简化了DOM的操作，可以节约代码量</p><ol start="4"><li>前端组件化</li></ol><p>使用Vue.component创建全局组件<br>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"TodoItem"</span>,&#123;</span><br><span class="line">    props:[<span class="string">"content"</span>],</span><br><span class="line">    template:<span class="string">"&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注册局部组件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> TodoItem = &#123;</span><br><span class="line">    props:[<span class="string">"content"</span>],</span><br><span class="line">    template:<span class="string">"&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在根部注册</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#root"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        TodoItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>子组件向父组件传值<br>在子组件的模板中定义事件<code>deleteSelf</code>，并在methods中使用$emit()向外触发事件，并且可以传值;<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在子组件中的methods中</span></span><br><span class="line"> <span class="keyword">var</span> TodoItem = &#123;</span><br><span class="line">    props:[<span class="string">"content"</span>,<span class="string">'index'</span>],</span><br><span class="line">    template:<span class="string">"&lt;li @click='deleteSelf'&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        deleteSelf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'delete'</span>,<span class="keyword">this</span>.index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在局部组件中，动态的监听刚刚在子组件中定义的事件<code>delete</code>，并将其动态的绑定到父组件的事件中 <code>deleteSon</code>,此时需要父组件改变数据，则DOM树会相应改变。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;todo-item v-<span class="keyword">for</span>=<span class="string">"(item,index) in list "</span> </span><br><span class="line">          v-bind:index=<span class="string">"index"</span>  </span><br><span class="line">          v-bind:content=<span class="string">"item"</span>   </span><br><span class="line">          v-on:<span class="keyword">delete</span> = <span class="string">"deleteSon"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/todo-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el:"#root",</span></span><br><span class="line"><span class="regexp">      components:&#123;</span></span><br><span class="line"><span class="regexp">          TodoItem</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      data:&#123;</span></span><br><span class="line"><span class="regexp">          todoValue:"",</span></span><br><span class="line"><span class="regexp">          list:[]</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods:&#123;</span></span><br><span class="line"><span class="regexp">          deleteSon:function(index)&#123;</span></span><br><span class="line"><span class="regexp">              this.list.splice(index,1)</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br></pre></td></tr></table></figure></p><ol start="6"><li>生命周期函数</li></ol><p>生命周期函数就是vue实例在某一个时间点会自动执行的函数,可以直接在vue实例中执行，不需要在methods中定义。</p><p>常用的八种生命周期函数</p><p>(1) beforeCreate:创建vue实例并且实例进行了基础的初始化之后就会执行。<br>(2) created：接着vue会继续处理一些外部的注入以及双向绑定的相关内容，完成之后触发created函数。<br>(3) beforeMount：vue实例中有了数据并定义了template之后，在页面渲染之前会触发beforeMount函数<br>(4) mounted: vue中的dom挂载在页面之后，执行mounted函数<br>(5) beforeDestroy：当destory()方法调用时，当组件即将被销毁时触发该函数。<br>(6) destroyed:当组件完全被销毁时，会触发destroyed<br>(7) beforeUpdate:当数据发生改变的时候，触发beforeUpdate函数。<br>(8) updated:虚拟dom重新渲染之后，执行updated函数</p><ol start="7"><li>computed、watch与methods</li></ol><p>computed与watch具有缓存机制，如果涉及的变量不改变，则不会执行。</p><p>methods是任何变量改变都会触发methods函数。</p><ol start="8"><li>样式绑定</li></ol><p>(1) class的对象绑定<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleColor"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active : isActive&#125;"</span>&gt;样式改变&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            isActive: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2) class的数组绑定</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleColor"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive]"</span>&gt;样式改变&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#root"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isActive: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isActive = <span class="keyword">this</span>.isActive == <span class="string">"active"</span> ? <span class="string">""</span> : <span class="string">"active"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>(3) style的内联样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div :style=<span class="string">"styleObj"</span> @click=<span class="string">"handleColor"</span>&gt;</span><br><span class="line">        hello world</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleObj:&#123;</span><br><span class="line">                color : <span class="string">"black"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.styleObj.color = <span class="keyword">this</span>.styleObj.color == <span class="string">'black'</span> ? <span class="string">"red"</span> : <span class="string">"black"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>(4) style的数组样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div :style=<span class="string">"[styleArr,&#123;fontSize:'20px'&#125;]"</span> @click=<span class="string">"handleColor"</span>&gt;</span><br><span class="line">        hello world</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleArr:&#123;</span><br><span class="line">                color : <span class="string">"black"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.styleArr.color = <span class="keyword">this</span>.styleArr.color == <span class="string">'black'</span> ? <span class="string">"red"</span> : <span class="string">"black"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>v-if 与 v-show<br>v-if 与 v-show 都能控制模板标签是否在页面中显示，但是条件是false时，v-if对应的标签不存在于dom中，而v-show是在标签内加入display：none隐藏dom；所以v-show的性能更高一点，因为他不会频繁的去操作dom。</p></li><li><p>key值：Vue提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key 属性即可。<br>在v-for循环时可以使用key值来提高性能，需注意key尽量唯一且不要用index来标识key。</p></li><li><p>当我们要改变数据操作数组时，必须要用vue已经定义的七种方法来操作数组数据，不能够直接通过数组下标来操作(数据改变但是页面并不会改变)。</p></li></ol><p>数组的变异方法：</p><p>pop push shift unshift splice sort reverse</p><ol start="12"><li>set方法</li></ol><p>因为 Vue 无法探测普通的新增属性，所以直接向vue中数组以及对象中直接添加数据虽然改变了数据但是并不会改变页面中的视图。</p><p>set方法用于向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">for</span> = <span class="string">"(item,key,index) of userInfo"</span>&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            userInfo:&#123;</span><br><span class="line">                name:<span class="string">"张三"</span>,</span><br><span class="line">                age:<span class="string">"23"</span>,</span><br><span class="line">                gender:<span class="string">"male"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.set(vm.userInfo,<span class="string">"address"</span>,<span class="string">"hangzhou"</span>);</span><br><span class="line">    <span class="comment">// vm.set(vm.userInfo,"address","hangzhou");</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>总结：改变数组并实时触发视图更新有三种方法<br>(1) 使用vue提供的数组变异方法</p><p>(2) 直接改变应用数据</p><p>(3) 使用Vue.set()方法或者实例</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知识点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 使用axios进行ajax数据的获取
2. 使用vue-router来进行多页面之间的路由跳转
3. 使用vuex各个组件之间的数据共享
4. 使用异步组件来优化性能
5. 使用stylus编写样式
6. 使用递归组件来实现组件
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>常用css汇总</title>
    <link href="http://zlstory.com/2018/09/11/css/"/>
    <id>http://zlstory.com/2018/09/11/css/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-09-11T01:26:52.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="改变placeholder颜色"><a href="#改变placeholder颜色" class="headerlink" title="改变placeholder颜色"></a>改变placeholder颜色</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Internet Explorer 10-11 */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换背景图改变checkbox样式"><a href="#替换背景图改变checkbox样式" class="headerlink" title="替换背景图改变checkbox样式"></a>替换背景图改变checkbox样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"spot"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>我已阅读并接受《芒果用户服务协议》</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">label</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:left;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">label</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"><span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.spot</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"../images/uncheck.png"</span>) no-repeat;  <span class="comment">/*未选中的样式图片*/</span></span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">12px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>:<span class="number">5</span>;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.spot</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"../images/checked.png"</span>) no-repeat;  <span class="comment">/*选中后的样式图片*/</span></span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;改变placeholder颜色&quot;&gt;&lt;a href=&quot;#改变placeholder颜色&quot; class=&quot;headerlink&quot; title=&quot;改变placeholder颜色&quot;&gt;&lt;/a&gt;改变placeholder颜色&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>axios传参报错400问题总结</title>
    <link href="http://zlstory.com/2018/08/09/muse1/"/>
    <id>http://zlstory.com/2018/08/09/muse1/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2018-08-10T08:51:47.243Z</updated>
    
    <content type="html"><![CDATA[<p>在使用axios传参的时候，发现只用post方法的时候，默认请求方式为payload，</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180810163720.png" alt=" "></p><p>百度了各种操作之后，试过以下几种方法：</p><ol><li>改变headers</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">headers: &#123;  <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808101637202.png" alt=" "><br>这种操作虽然将payload改为了formData形式，但是依旧报400错</p><ol start="2"><li>Json.stringify()</li></ol><p>请求头问题排除之后，开始研究参数自身问题，使用<code>json.stringify()</code>格式化参数之后，依旧不见效。</p><ol start="3"><li>qs.stringify()</li></ol><p>之前没有接触过qs.stringify，发现他与json.stringify转换成最后的格式并不相同，所以对参数进行qs.stringify(data)之后，即使不设置headers也没有出现问题。成功。</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808101637201.png" alt=" "></p><ol start="4"><li>两者区别</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'hehe'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a) <span class="comment">// "&#123;"a":"hehe","age":10&#125;"</span></span><br><span class="line"></span><br><span class="line">qs.stringify(a) <span class="comment">// name=hehe&amp;age=10</span></span><br></pre></td></tr></table></figure><p>总结：(1)axios在使用post方法出现400问题时，不能直接传递一个js对象，而需要通过qs.stringify()将参数格式转换一下，注意：不能使用json.stringify（）。</p><p>(2)axios请求头是随你的请求方式改变而改变的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用axios传参的时候，发现只用post方法的时候，默认请求方式为payload，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue知识小结</title>
    <link href="http://zlstory.com/2018/07/20/vue-tips/"/>
    <id>http://zlstory.com/2018/07/20/vue-tips/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-08-10T09:31:07.939Z</updated>
    
    <content type="html"><![CDATA[<h4 id="computed、watch与methods"><a href="#computed、watch与methods" class="headerlink" title="computed、watch与methods"></a>computed、watch与methods</h4><p>computed与watch具有缓存机制，如果涉及的变量不改变，则不会执行。</p><p>methods是任何变量改变都会触发methods函数。</p><h4 id="v-if-与-v-show"><a href="#v-if-与-v-show" class="headerlink" title="v-if 与 v-show"></a>v-if 与 v-show</h4><p>v-if 与 v-show 都能控制模板标签是否在页面中显示，但是条件是false时，v-if对应的标签不存在于dom中，而v-show是在标签内加入display：none隐藏dom；所以v-show的性能更高一点，因为他不会频繁的去操作dom。</p><h4 id="key值"><a href="#key值" class="headerlink" title="key值"></a>key值</h4><p>Vue提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key 属性即可。</p><p>在v-for循环时可以使用key值来提高性能，需注意key尽量唯一且不要用index来标识key。</p><h4 id="改变数组并实时触发视图更新有三种方法"><a href="#改变数组并实时触发视图更新有三种方法" class="headerlink" title="改变数组并实时触发视图更新有三种方法"></a>改变数组并实时触发视图更新有三种方法</h4><ol><li><p>使用vue提供的数组变异方法</p><p> pop push shift unshift splice sort reverse</p></li><li><p>直接改变引用数据</p></li><li><p>使用Vue.set()方法或者实例</p><p>因为 Vue 无法探测普通的新增属性，所以直接向vue中数组以及对象中直接添加数据虽然改变了数据但是并不会改变页面中的视图。</p><p>set方法用于向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;computed、watch与methods&quot;&gt;&lt;a href=&quot;#computed、watch与methods&quot; class=&quot;headerlink&quot; title=&quot;computed、watch与methods&quot;&gt;&lt;/a&gt;computed、watch与metho
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue常用的八种生命周期函数</title>
    <link href="http://zlstory.com/2018/07/20/vueLife/"/>
    <id>http://zlstory.com/2018/07/20/vueLife/</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-07-24T03:48:37.708Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期函数就是vue实例在某一个时间点会自动执行的函数,可以直接在vue实例中执行，不需要在methods中定义。</p><p>常用的八种生命周期函数</p><p>(1) beforeCreate:创建vue实例并且实例进行了基础的初始化之后就会执行。<br>(2) created：接着vue会继续处理一些外部的注入以及双向绑定的相关内容，完成之后触发created函数。<br>(3) beforeMount：vue实例中有了数据并定义了template之后，在页面渲染之前会触发beforeMount函数<br>(4) mounted: vue中的dom挂载在页面之后，执行mounted函数<br>(5) beforeDestroy：当destory()方法调用时，当组件即将被销毁时触发该函数。<br>(6) destroyed:当组件完全被销毁时，会触发destroyed<br>(7) beforeUpdate:当数据发生改变的时候，触发beforeUpdate函数。<br>(8) updated:虚拟dom重新渲染之后，执行updated函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        template:<span class="string">"&lt;div&gt;&#123;&#123;test&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            test:<span class="string">"hello world"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'beforeCreate'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"created"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);<span class="comment">//&lt;div id="root"&gt;&lt;/div&gt;</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);<span class="comment">//&lt;div&gt;hello world&lt;/div&gt;</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"mounted"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"beforeDestory"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"destoryed"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"updated"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生命周期函数就是vue实例在某一个时间点会自动执行的函数,可以直接在vue实例中执行，不需要在methods中定义。&lt;/p&gt;
&lt;p&gt;常用的八种生命周期函数&lt;/p&gt;
&lt;p&gt;(1) beforeCreate:创建vue实例并且实例进行了基础的初始化之后就会执行。&lt;br&gt;(2) 
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>通过todolist简单了解vue的mvvm模式</title>
    <link href="http://zlstory.com/2018/07/19/mvvm/"/>
    <id>http://zlstory.com/2018/07/19/mvvm/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2018-07-19T09:10:43.216Z</updated>
    
    <content type="html"><![CDATA[<ol><li>使用vue.js实现todoList的功能，体现了vue的编程思想是MVVM：不改变DOM，而是只操作数据，最后dom随着数据的改变而改变</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"text"</span> v-model = <span class="string">"inputValue"</span>&gt;</span><br><span class="line">       &lt;button @click = <span class="string">"handleBtnClick"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">       &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">           &lt;li v-for="item in list"&gt;</span></span><br><span class="line"><span class="regexp">               &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>li&gt;</span><br><span class="line">       &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           el:<span class="string">"#app"</span>,</span><br><span class="line">           data:&#123;</span><br><span class="line">               list:[],</span><br><span class="line">               inputValue:<span class="string">''</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//  console.log(this.inputValue)</span></span><br><span class="line">                 <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span><br><span class="line">                 <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   </span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用JavaScript实现todolist的功能，体现的是MVP的编程思想</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"input"</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul id="list"&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/code.jquery.com/</span>jquery<span class="number">-1.11</span><span class="number">.3</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    function Page() &#123;  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $.extend(Page.prototype,&#123;</span></span><br><span class="line"><span class="string">        init:function()&#123;</span></span><br><span class="line"><span class="string">            this.bindEvents()</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        bindEvents:function()&#123;</span></span><br><span class="line">            var btn = $("#btn");</span><br><span class="line">            btn.on(<span class="string">"click"</span>,$.proxy(<span class="keyword">this</span>.handleBtnClick,<span class="keyword">this</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> inputValue = $(<span class="string">"#input"</span>).val();</span><br><span class="line">            <span class="keyword">var</span> ulElem = $(<span class="string">"#list"</span>)</span><br><span class="line">            ulElem.append(<span class="string">"&lt;li&gt;"</span>+inputValue+<span class="string">"&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="string">"#input"</span>).val(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line">    page.init()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MVP与MVVM设计模式<br>(1) MVP: Model - View - Presenter</p></li></ol><p>M是模型层（上段代码并没有体现）</p><p>V是DOM</p><p>P是View层以及Model层的中转站(js部分)，当点击按钮的时候，控制器里面的代码会执行，负责了所有的逻辑部分，控制器可以调用模型层来发起ajax请求，也可以操作dom改变视图。</p><p>(2) MVVM:  View - ViewModel - Model</p><p>Model:负责存储数据<br>View:视图层，负责显示数据<br>ViewModel:vue自带的一层(内置)，不需要我们去关心怎么实现的。<br>当我们使用MVVM设计模式的时候，我们只需要关心view和model。</p><p>(3) 总结：在mvp设计模式开发的时候是面向DOM进行操作，mvvm设计模式面向数据进行编程，大大的简化了DOM的操作，可以节约代码量，提高代码性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;使用vue.js实现todoList的功能，体现了vue的编程思想是MVVM：不改变DOM，而是只操作数据，最后dom随着数据的改变而改变&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://zlstory.com/2018/07/13/git/"/>
    <id>http://zlstory.com/2018/07/13/git/</id>
    <published>2018-07-12T16:00:00.000Z</published>
    <updated>2018-07-30T01:23:04.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h3><p>版本控制系统分为集中式和分布式。</p><h4 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h4><p>工具：SVN、CVS</p><p>工作模式：先从中央服务器获得最新版本，然后开始写代码，最后把自己的代码再推送给中央服务器。</p><p>缺点：必须联网才可工作（可以是局域网）。</p><h4 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h4><p>工具：git</p><p>工作模式：没有中央服务器，每个人的电脑上都是一个完整的版本库，共同开发的时候，只需将各自的修改推送给彼此就好了。为了更加方便开发者交换修改内容，分布式也会有一台电脑充当中央服务器。</p><p>优点：比集中式更加安全、不比联网也可以工作、强大的分支管理</p><h3 id="安装git–windows"><a href="#安装git–windows" class="headerlink" title="安装git–windows"></a>安装git–windows</h3><p>首先去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网下载</a>按照默认选项安装即可。</p><p>安装完成之后，在Git Bash中’自报家门’：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注： 使用–global参数表示电脑上的所有仓库都用这个配置。</p><h3 id="git操作的基本命令"><a href="#git操作的基本命令" class="headerlink" title="git操作的基本命令"></a>git操作的基本命令</h3><ol><li><p>初始化git： 在所需的文件夹中使用<code>git init</code>命令可以将该文件夹变成git管理仓库。</p></li><li><p>当文件夹新增文件之后 使用<code>git add</code>命令来将文件添加至版本库，如修改了demo1.html：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add demo1.html</span><br></pre></td></tr></table></figure></li><li><p>添加至版本库之后，使用<code>git commit</code>命令将文件提交到仓库。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a demo1 file&quot;</span><br></pre></td></tr></table></figure><p>注： -m参数后面是本次提交时的备注。</p><h3 id="git操作的删除命令"><a href="#git操作的删除命令" class="headerlink" title="git操作的删除命令"></a>git操作的删除命令</h3><ol><li><code>rm demo.html</code>：删除文件</li><li><code>git rm demo.html</code> <code>git commit -m &#39;confirm delete&#39;</code>：确认删除文件</li><li><code>git checkout -- demo.html</code>：将删除的文件恢复到最新版本</li></ol><h3 id="git操作常用命令"><a href="#git操作常用命令" class="headerlink" title="git操作常用命令"></a>git操作常用命令</h3><ol><li><p><code>git  status</code>：查看仓库当前的状态</p></li><li><p><code>git diff demo.html</code> ：查看某文件具体修改了什么内容</p></li><li><p><code>git log</code>：查看从最近到最远的提交日志</p><p> <code>git log --pretty=oneline</code>：查看从最近到最远提交时的备注，可以看到版本号</p></li><li><p><code>git reset --hard HEAD^</code>：使当前版本回归到上一个版本</p><p><code>git reset --hard commit_id</code>：hard后面加特定版本号（前几位就好），则回到特定版本</p></li><li><p><code>git reflog</code>：查看每次操作的命令</p></li></ol><h3 id="工作中遇见的问题及解决方案"><a href="#工作中遇见的问题及解决方案" class="headerlink" title="工作中遇见的问题及解决方案"></a>工作中遇见的问题及解决方案</h3><p>修改或新增文件后，没有<code>git pull -f --all</code></p><p>然后<code>git add .  | git commit -am &quot;init&quot;</code></p><p>导致github上的版本里有文件和本地版本冲突，下面给出冲突原因：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: failed to push some refs to &apos;https://gitee.com/junyaokeji/quanzidaihuan.git&apos;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure><p>解决办法是<code>git push -u origin master -f</code>强制覆盖已有的分支（可能会丢失改动）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;版本控制系统&quot;&gt;&lt;a href=&quot;#版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;版本控制系统&quot;&gt;&lt;/a&gt;版本控制系统&lt;/h3&gt;&lt;p&gt;版本控制系统分为集中式和分布式。&lt;/p&gt;
&lt;h4 id=&quot;集中式版本控制系统&quot;&gt;&lt;a href=&quot;#集中式版
      
    
    </summary>
    
    
      <category term="git" scheme="http://zlstory.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo-BlueLake主题</title>
    <link href="http://zlstory.com/2018/07/12/hexo2/"/>
    <id>http://zlstory.com/2018/07/12/hexo2/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-08-09T02:30:31.677Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写博客了，突然收到阿里云的信息，问我是否需要续费域名，觉得还是继续吧。</p><p>虽然很喜欢之前的maupassant主题，但是发现这个主题出现了某种问题，所以换成了<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a>;</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span></span><br><span class="line">$ npm install hexo-renderer-jade@<span class="number">0.3</span><span class="number">.0</span> --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="配置fileName文件下的-config-yml主要参数，其他地方默认即可"><a href="#配置fileName文件下的-config-yml主要参数，其他地方默认即可" class="headerlink" title="配置fileName文件下的_config.yml主要参数，其他地方默认即可"></a>配置fileName文件下的_config.yml主要参数，其他地方默认即可</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">zlstory</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">个人学习小结</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">zilan</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://zlstory.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span> <span class="string">BlueLake</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">git@github.com:zlstory/zlstory.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h3 id="配置BlueLake目录下的-config-yml文件"><a href="#配置BlueLake目录下的-config-yml文件" class="headerlink" title="配置BlueLake目录下的_config.yml文件"></a>配置BlueLake目录下的_config.yml文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">about/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">recent_posts</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">category</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tag</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#- weibo</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">links</span></span><br><span class="line"></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  number:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date_formats:</span></span><br><span class="line"><span class="attr">  archive:</span> <span class="string">"MM月DD日"</span></span><br><span class="line"><span class="attr">  category:</span> <span class="string">"YYYY/MM/DD"</span></span><br><span class="line"><span class="attr">  post:</span> <span class="string">"MMM DD, YYYY"</span></span><br><span class="line"><span class="attr">  tag:</span> <span class="string">"YYYY/MM/DD"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line">  <span class="string">hexo-generator-sitemap</span></span><br><span class="line">  <span class="string">hexo-generator-baidu-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Local search</span></span><br><span class="line"><span class="attr">local_search:</span> <span class="literal">true</span> <span class="comment">## Use a javascript-based local search engine, true/false.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Cmments</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line"><span class="attr">  duoshuo:</span> <span class="comment">#chaooo ## duoshuo_shortname</span></span><br><span class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></span><br><span class="line"><span class="attr">  livere:</span> <span class="comment">## 来必力(data-uid)</span></span><br><span class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></span><br><span class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></span><br><span class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></span><br><span class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></span><br><span class="line"><span class="attr">  gitment:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span> <span class="comment">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">zlstory</span> <span class="comment">## Your GitHub ID, e.g. username</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">zlstory.github.io</span> <span class="comment">## The repository to store your comments, make sure you're the repo's owner, e.g. imsun.github.io</span></span><br><span class="line"><span class="attr">    client_id:</span> <span class="number">2</span><span class="string">beb49205958bc8a66be</span> <span class="comment">## GitHub client ID, e.g. 75752dafe7907a897619</span></span><br><span class="line"><span class="attr">    client_secret:</span> <span class="number">1e8</span><span class="string">e5079085aa3df305c2e00d0ba45a326992962</span> <span class="comment">## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Share</span></span><br><span class="line"><span class="attr">baidu_share:</span> <span class="literal">false</span> <span class="comment">## 百度分享</span></span><br><span class="line"><span class="attr">JiaThis_share:</span> <span class="comment">##true ##JiaThis分享</span></span><br><span class="line"><span class="attr">duoshuo_share:</span> <span class="comment">#true ##true 多说分享必须和多说评论一起使用。</span></span><br><span class="line"><span class="attr">addToAny_share:</span> <span class="comment"># AddToAny share. Empty list hides. List items are service name at url. For ex: email for '&lt;a href="https://www.addtoany.com/add_to/email?linkurl=...'</span></span><br><span class="line"><span class="comment">#  - twitter</span></span><br><span class="line"><span class="comment">#  - baidu</span></span><br><span class="line"><span class="comment">#  - facebook</span></span><br><span class="line"><span class="comment">#  - google_plus</span></span><br><span class="line"><span class="comment">#  - linkedin</span></span><br><span class="line"><span class="comment">#  - email</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span>  <span class="string">UA-111606593-1</span> <span class="comment">## Your Google Analytics tracking id, e.g. UA-42025684-2</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="number">68</span><span class="string">cb98bd2a475f71ad8508d14ad906ba</span> <span class="comment">## Your Baidu Analytics tracking id, e.g. 1006843030519956000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Miscellaneous</span></span><br><span class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> <span class="comment">## If you want to show the count of categories in the sidebar widget please set the value to true.</span></span><br><span class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">true</span> <span class="comment">## Set to true to enable widgets on small screens.</span></span><br><span class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span> <span class="comment">## If you want to use Busuanzi page views please set the value to true.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># About page</span></span><br><span class="line"><span class="attr">about:</span></span><br><span class="line"><span class="attr">  photo_url:</span> <span class="string">/img/avatar.png</span> <span class="comment">## Your photo e.g. http://obzf7z93c.bkt.clouddn.com/themeauthor.jpg</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">  - label:</span> <span class="string">email</span></span><br><span class="line"><span class="attr">    url:</span> <span class="comment">## Your email with mailto: e.g.  mailto:zhenggchaoo@gmail.com</span></span><br><span class="line"><span class="attr">    title:</span> <span class="comment">## Your email e.g.  zhenggchaoo@gmail.com</span></span><br><span class="line"><span class="attr">  - label:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">    url:</span>  <span class="attr">https://github.com/zlstory</span> <span class="comment">## Your github'url e.g.  https://github.com/chaooo</span></span><br><span class="line"><span class="attr">    title:</span> <span class="string">zlstory</span> <span class="comment">## Your github'name e.g.  chaooo</span></span><br></pre></td></tr></table></figure><p>我用的是本地搜索，即self_search:true,需要在fileName中安装一个jq的插件， npm install hexo-generator-search –save</p><h3 id="将hexo与github相连接"><a href="#将hexo与github相连接" class="headerlink" title="将hexo与github相连接"></a>将hexo与github相连接</h3><p>就是为了hexo d的时候，能直接更新github中的内容，首先<a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank" rel="noopener">配置ssh</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>然后一直按enter，然后生成三个文件，默认目录是C:\Users\Administrator.ssh，将id_rsa.pub放在github的SSH和GPG密钥中。再配置git的用户名和密码<br>在使用hexo -d之前 要安装一个插件：npm install hexo-deployer-git –save</p><p>ssh是可以绑定多个的。</p><h3 id="域名的绑定"><a href="#域名的绑定" class="headerlink" title="域名的绑定"></a>域名的绑定</h3><p>新建一个CNAME文件，内容就是<a href="http://www.zlstory.com,放在source文件夹下，不能放在fileName文件夹中，否则hexo" target="_blank" rel="noopener">www.zlstory.com,放在source文件夹下，不能放在fileName文件夹中，否则hexo</a> d的时候会消失，神奇。还有要安装rss插件，虽然我不知道有什么用这个东西，虽然有人解释过，但是他出现了，那就装一下吧：npm install hexo-generator-feed –save，然后再theme的配置文件中加入rss: /atom.xml。</p><p>备注：此网址更详细的介绍了 BlueLake主题的配置：<a href="http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没写博客了，突然收到阿里云的信息，问我是否需要续费域名，觉得还是继续吧。&lt;/p&gt;
&lt;p&gt;虽然很喜欢之前的maupassant主题，但是发现这个主题出现了某种问题，所以换成了&lt;a href=&quot;https://github.com/chaooo/hexo-theme-Blu
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://zlstory.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://zlstory.com/2018/04/17/vue-base/"/>
    <id>http://zlstory.com/2018/04/17/vue-base/</id>
    <published>2018-04-17T07:38:59.547Z</published>
    <updated>2018-07-04T08:33:47.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h3><p>版本控制系统分为集中式和分布式。</p><h4 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h4><p>工具：SVN、CVS</p><p>工作模式：先从中央服务器获得最新版本，然后开始写代码，最后把自己的代码再推送给中央服务器。</p><p>缺点：必须联网才可工作（可以是局域网）。</p><h4 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h4><p>工具：git</p><p>工作模式：没有中央服务器，每个人的电脑上都是一个完整的版本库，共同开发的时候，只需将各自的修改推送给彼此就好了。为了更加方便开发者交换修改内容，分布式也会有一台电脑充当中央服务器。</p><p>优点：比集中式更加安全、不比联网也可以工作、强大的分支管理</p><h3 id="安装git–windows"><a href="#安装git–windows" class="headerlink" title="安装git–windows"></a>安装git–windows</h3><p>首先去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网下载</a>按照默认选项安装即可。</p><p>安装完成之后，在Git Bash中’自报家门’：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注： 使用–global参数表示电脑上的所有仓库都用这个配置。</p><h3 id="git操作的基本命令"><a href="#git操作的基本命令" class="headerlink" title="git操作的基本命令"></a>git操作的基本命令</h3><ol><li><p>初始化git： 在所需的文件夹中使用<code>git init</code>命令可以将该文件夹变成git管理仓库。</p></li><li><p>当文件夹新增文件之后 使用<code>git add</code>命令来将文件添加至版本库，如修改了demo1.html：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add demo1.html</span><br></pre></td></tr></table></figure></li><li><p>添加至版本库之后，使用<code>git commit</code>命令将文件提交到仓库。</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a demo1 file&quot;</span><br></pre></td></tr></table></figure><p>注： -m参数后面是本次提交时的备注。</p><h3 id="git操作的删除命令"><a href="#git操作的删除命令" class="headerlink" title="git操作的删除命令"></a>git操作的删除命令</h3><ol><li><code>rm demo.html</code>：删除文件</li><li><code>git rm demo.html</code> <code>git commit -m &#39;confirm delete&#39;</code>：确认删除文件</li><li><code>git checkout -- demo.html</code>：将删除的文件恢复到最新版本</li></ol><h3 id="git操作常用命令"><a href="#git操作常用命令" class="headerlink" title="git操作常用命令"></a>git操作常用命令</h3><ol><li><p><code>git  status</code>：查看仓库当前的状态</p></li><li><p><code>git diff demo.html</code> ：查看某文件具体修改了什么内容</p></li><li><p><code>git log</code>：查看从最近到最远的提交日志</p><p> <code>git log --pretty=oneline</code>：查看从最近到最远提交时的备注，可以看到版本号</p></li><li><p><code>git reset --hard HEAD^</code>：使当前版本回归到上一个版本</p><p><code>git reset --hard commit_id</code>：hard后面加特定版本号（前几位就好），则回到特定版本</p></li><li><p><code>git reflog</code>：查看每次操作的命令</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;版本控制系统&quot;&gt;&lt;a href=&quot;#版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;版本控制系统&quot;&gt;&lt;/a&gt;版本控制系统&lt;/h3&gt;&lt;p&gt;版本控制系统分为集中式和分布式。&lt;/p&gt;
&lt;h4 id=&quot;集中式版本控制系统&quot;&gt;&lt;a href=&quot;#集中式版
      
    
    </summary>
    
    
      <category term="git" scheme="http://zlstory.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ES6中一不注意就掉进去的那些坑</title>
    <link href="http://zlstory.com/2018/04/11/es6_demos/"/>
    <id>http://zlstory.com/2018/04/11/es6_demos/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2018-04-17T02:13:12.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>1.使用let、const与var的区别为前两者声明的变量不会被提升到作用域顶部</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span> value2) <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    alert(<span class="keyword">typeof</span> value1) <span class="comment">//undefined</span></span><br><span class="line">    alert(<span class="keyword">typeof</span> value2) <span class="comment">//value2 is not defined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value1 = <span class="number">111</span></span><br><span class="line">    <span class="keyword">let</span> value2 = <span class="number">222</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用const声明时，不允许修改绑定，但是允许修改绑定的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name : <span class="string">"Crystal"</span>,</span><br><span class="line">    age : <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改绑定的值</span></span><br><span class="line">person.name = <span class="string">"小懒"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接修改绑定会抛出语法错误</span></span><br><span class="line">person = &#123;</span><br><span class="line">    name : <span class="string">"Crystal"</span>,</span><br><span class="line">    age : <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//VM60:1 Uncaught TypeError: Assignment to constant variable. at &lt;anonymous&gt;:1:8</span></span><br></pre></td></tr></table></figure><p>3.在循环中创建的函数,使用var时，我们期望着输出0-9，但是最后只输出10。因为循环中的每次迭代都同时共享着变量i，循环内部引用的都是相同变量。而使用let每次循环都会创建一个新的i。此种情况下使用const时将在第二次赋值时报错。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)  <span class="comment">//0-9</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)  <span class="comment">//10</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i)()) <span class="comment">//结果为：0-9  使用闭包解决</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.var会覆盖已存在的全局变量，let与const不会覆盖全局变量，只能遮盖它;var创建新的全局变量时会将此作为window对象的属性，let与const不会将声明的变量添加为全局对象的属性,即不会破坏全局作用域。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Number</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>)<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.Number)<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Number</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>)<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.Number)<span class="comment">//ƒ Number() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h3&gt;&lt;p&gt;1.使用let、const与var的区别为前两者声明的变量不会被提升到作用域顶部&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
    
      <category term="es6" scheme="http://zlstory.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>VUE实战笔记1</title>
    <link href="http://zlstory.com/2018/01/16/vue-note1/"/>
    <id>http://zlstory.com/2018/01/16/vue-note1/</id>
    <published>2018-01-15T16:00:00.000Z</published>
    <updated>2018-04-13T01:20:52.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VUE核心功能"><a href="#VUE核心功能" class="headerlink" title="VUE核心功能"></a>VUE核心功能</h3><p>vue的核心功能是数据双向绑定</p><p>el用于指定一个页面中已经存在的DOM元素来挂载Vue实例，可以是html节点，也可以是CSS选择器。</p><p>通过VUE实例的data选项，可以声明应用内需要双向绑定的数据。建议所有会用到的数据都预先在data中声明，这样不至于将数据散落在业务逻辑中，难以维护。</p><p> VUE常见生命周期钩子<br>    created：实例创建完成之后调用，已经完成了数据的观测，但是尚未挂载，即$el不能用，需要初始化处理一些数据时比较有用<br>    mounted: el挂载到实例之后调用，一般第一个业务逻辑会在这里开始<br>    beforeDestroy：实例销毁之前调用，主要是解绑一些实用addEventListener监听的事件等</p><p>钩子函数中的this指向的是调用它的Vue实例.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:app,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            a:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el) &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123; &#123; something &#125; &#125;&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>在 { { } } 插值的尾部添加一个管道符 | 可对数据进行过滤，经常用于格式化文本，比如字母大小写、货币千位使用逗号分离等。过滤的规则是自定义的。</p><p>过滤器可以串联，也可以接受参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message | filterA(<span class="string">'arg1'</span>,<span class="string">'arg2'</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>例如对时间进行格式化处理：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'#app'</span>&gt;</span><br><span class="line">    &#123;&#123; date | formatDate &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    在小于10之前补0</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    var padDate = function(value)&#123;</span></span><br><span class="line"><span class="regexp">        return value &lt; 10 ? '0' + value : value;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            date:new Date()</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        filters:&#123;</span></span><br><span class="line"><span class="regexp">            formatDate:function(value)&#123;</span></span><br><span class="line"><span class="regexp">                var date = new Date(value);</span></span><br><span class="line"><span class="regexp">                var year =date.getFullYear();</span></span><br><span class="line"><span class="regexp">                var month =padDate(date.getMonth()+1);</span></span><br><span class="line"><span class="regexp">                var day =padDate(date.getDate());</span></span><br><span class="line"><span class="regexp">                var hours =padDate(date.getHours());</span></span><br><span class="line"><span class="regexp">                var minutes =padDate(date.getMinutes());</span></span><br><span class="line"><span class="regexp">                var second =padDate(date.getSeconds());</span></span><br><span class="line"><span class="regexp">                return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        mounted()&#123;</span></span><br><span class="line"><span class="regexp">            var _this = this;声明一个变量只想VUE实例的this，保证作用域一致</span></span><br><span class="line"><span class="regexp">            this.timer = setInterval(function()&#123;</span></span><br><span class="line"><span class="regexp">                _this.date = new Date()</span></span><br><span class="line"><span class="regexp">            &#125;,1000);</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        beforeDestroy:function()&#123;</span></span><br><span class="line"><span class="regexp">            if(this.timer)&#123;</span></span><br><span class="line"><span class="regexp">                clearInteral(this.timer)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令的作用就是当其表达式的值改变时，相应的将某些行为应用到DOM上</p><p>数据驱动是Vue.js的核心理念，所以不是万不得已的情况下，不要主动去操作DOM，只需维护好数据,DOM的事Vue自己本身会处理好。</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>v-bind的基本用途是动态更新HTML元素上的属性，当数据变化时，就会重新渲染</p><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>v-on:用来绑定事件监听器，事件的方法都是以函数的形式写在Vue实例的methods属性中，方法内的this也是指向Vue实例。</p><p>Vue将methods里的方法也代理了，所以可以像访问Vue数据那样来调用方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">"#app"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">if</span> = <span class="string">"show"</span>&gt;hello world &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button v-on:click = "handleClose"&gt;</span></span><br><span class="line"><span class="regexp">        点击隐藏</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            show:true</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods:&#123;</span></span><br><span class="line"><span class="regexp">            handleClose()&#123;</span></span><br><span class="line"><span class="regexp">                this.close(); /</span><span class="regexp">/可以像访问Vue数据那样来调用方法</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            close()&#123;</span></span><br><span class="line"><span class="regexp">                this.show = false;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>语法糖是指在不影响功能的情况下，添加某种方法实现同样的效果，从而方便程序开发。</p><p>比如v-bind简写为一个冒号:,v-on简写为一个@</p><h3 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h3><p>模板内的表达式常用于简单的运算，但是当其过长或逻辑复杂时，会变得难以维护，所以需要计算属性来解决此问题。所有的计算属性都是以函数的形式写在Vue实例中computed选项内，最终返回的是计算后的结果。</p><p>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只需要最后返回一个结果就可以了。如：通过计算展示购物车中的两个包裹的物品总价</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'app'</span>&gt;商品总价为：&#123;&#123; prices &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            package1:[</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    name:'iphone7',</span></span><br><span class="line"><span class="regexp">                    price:7000,</span></span><br><span class="line"><span class="regexp">                    count:2</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                 &#123;</span></span><br><span class="line"><span class="regexp">                    name:'iphone8',</span></span><br><span class="line"><span class="regexp">                    price:5888,</span></span><br><span class="line"><span class="regexp">                    count:1</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            ],</span></span><br><span class="line"><span class="regexp">            package2:[</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    name:'apple',</span></span><br><span class="line"><span class="regexp">                    price:3,</span></span><br><span class="line"><span class="regexp">                    count:3</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    name:'banana',</span></span><br><span class="line"><span class="regexp">                    price:1.5,</span></span><br><span class="line"><span class="regexp">                    count:4</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            ]</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        computed:&#123;</span></span><br><span class="line"><span class="regexp">            price()&#123;</span></span><br><span class="line"><span class="regexp">                var prices = 0;</span></span><br><span class="line"><span class="regexp">                for(var i = 0; i &lt; this.package1.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">                    price += this.package1[i].price * this.package1[i].count</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                for(var i = 0; i &lt; this.package2.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">                    price += this.package2[i].price * this.package2[i].count</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                return prices;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>每一个计算属性都包含一个getter与setter，上述例子只是计算属性的默认用法，用了getter来获取。</p><p>setter函数：当手动修改计算属性的值就像修改一个普通数据一样，会触发setter函数，执行一些自定义的操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">"app"</span>&gt;姓名：&#123;&#123; fullName &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            firstName:"Jack",</span></span><br><span class="line"><span class="regexp">            lastName:"Green"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        computed:&#123;</span></span><br><span class="line"><span class="regexp">            fullName:&#123;</span></span><br><span class="line"><span class="regexp">                get()&#123;</span></span><br><span class="line"><span class="regexp">                    return this.firstName + ' ' + this.lastName;</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                set(newValue)&#123;</span></span><br><span class="line"><span class="regexp">                    var names = newValue.split(' ');</span></span><br><span class="line"><span class="regexp">                    this.firstName = names[o];</span></span><br><span class="line"><span class="regexp">                    this.lastName = names[names.length - 1];</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     /</span><span class="regexp">/ use setter</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    app.fullName = 'John Doe';</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>计算属性的两个小技巧：</p><p>1 计算属性可以依赖其他计算属性</p><p>2 计算属性不仅可以依赖当前Vue实例的数据，还可以依赖其他实例的数据</p><p>computed与methods不同点：有些功能使用methods定义函数，也可以实现该功能，那为什么还要使用计算属性呢？原因是因为计算书型是基于依赖缓存的，即：当一个计算属性所依赖的数据发生变化时，才会重新取值。而methods不同，只要重新渲染就会被调用，函数就会被执行。</p><p>总结：当遍历大数组和做大量计算时，应当使用计算属性，除非是你不希望得到缓存。 </p><h3 id="绑定class的几种方式"><a href="#绑定class的几种方式" class="headerlink" title="绑定class的几种方式"></a>绑定class的几种方式</h3><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>给class设置一个对象，可以动态的切换class</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : <span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;'active':isActive,'error':isError&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            isActive: true,</span></span><br><span class="line"><span class="regexp">            isError: false</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>当需要应用多个class时，可以使用数组语法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : <span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;isActive,isError&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            isActive: 'active',</span></span><br><span class="line"><span class="regexp">            isError: 'error'</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>在写复用组件时，如果表达式较长或者逻辑较为复杂，应优先使用计算属性动态设置类名。</p><h4 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h4><p>当使用内联样式时，css属性需要使用驼峰命名或者短横分隔命名。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : style=<span class="string">"&#123;'color':color,'fontSize':size+'px'&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            color: 'green',</span></span><br><span class="line"><span class="regexp">            fontSize: 16</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>但是一般不会使用内联样式，都是写在data中或者computed里。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>   v-bind : style=<span class="string">"styles"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#app",</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">           styles:&#123;</span></span><br><span class="line"><span class="regexp">               color: "blue",</span></span><br><span class="line"><span class="regexp">               fontSize: 14+"px"</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>注意：使用:style时，vue.js会自动给特殊的css属性名称增加前缀，如transform。</p><h3 id="vue基本指令"><a href="#vue基本指令" class="headerlink" title="vue基本指令"></a>vue基本指令</h3><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>v-cloak与css结合可以解决当网速慢、vue.js未加载完成、屏幕出现闪动的问题。</p><p>使用方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span> v-cloak&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:'#app',</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">            message:" hello world"</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>v-cloak是一个解决初始化慢导致页面闪动的最佳实践，但是在有webpack与vue-router的大项目中，项目是通过路由挂载不同组件时，则不需要v-cloak。</p><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>将元素或者组件只渲染一次，渲染过后，包括子节点，都不再随着数据的改变而改变，将被视为静态内容，此指令在业务中很少使用，但是当你需要进一步优化性能时，可能会用到v-once。</p><h3 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h3><h4 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h4><p>这三个表达式的顺序不能改变：v-if后跟v-else-if(可省略)后跟v-else,表达式为真时，当前组件以及所有子节点会被渲染，为假时则会被移除。</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>改变的是元素的display属性。v-show不能在\<template>上使用。</template></p><p>v-if更适合条件不经常改变的场景，v-show适用于频繁切换条件。</p><h3 id="列表渲染指令-v-for"><a href="#列表渲染指令-v-for" class="headerlink" title="列表渲染指令 v-for"></a>列表渲染指令 v-for</h3><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p>v-for需要结合in来使用，并且支持一个可选参数作为当前项的索引。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">"(book,index) in books "</span>&gt;&#123;&#123;index&#125;&#125;---&#123;&#123;book&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><p>遍历对象属性的时候，支持两个可选参数：键名和索引</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id = <span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">"(value,key,index) in users "</span>&gt;&#123;&#123;index&#125;&#125;---&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组更新"><a href="#数组更新" class="headerlink" title="数组更新"></a>数组更新</h3><h4 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h4><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h4 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h4><ul><li>filter()</li><li>concat()</li><li>slice()</li></ul><p>与JavaScript数组方法不同的是，vue中使用arr[2]=1,或者arr.length=1时并不会触发视图的更新，如果需要实现同样的效果时，可以使用vue的set方法，或者是$set。</p><h4 id="过滤与排序"><a href="#过滤与排序" class="headerlink" title="过滤与排序"></a>过滤与排序</h4><p>不需要改变原数组，借助计算属性返回过滤或者排序后的数组。</p><h3 id="方法与事件"><a href="#方法与事件" class="headerlink" title="方法与事件"></a>方法与事件</h3><h4 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h4><p>@click的表达式可以是直接的JavaScript语句，也可以是在VUE实例中methods选项中的一个函数名。</p><p>在@click调用的函数名后可加可不加()，使用$event可以访问原生DOM事件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id = <span class="string">"#app"</span>&gt;</span><br><span class="line">     &lt;p v-<span class="keyword">if</span> = <span class="string">"show"</span>&gt;hello world &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">     &lt;button v-on:click = "handleClose"&gt;</span></span><br><span class="line"><span class="regexp">         点击隐藏</span></span><br><span class="line"><span class="regexp">     &lt;/</span>button&gt;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">         el:"#app",</span></span><br><span class="line"><span class="regexp">         data:&#123;</span></span><br><span class="line"><span class="regexp">             show:true</span></span><br><span class="line"><span class="regexp">         &#125;,</span></span><br><span class="line"><span class="regexp">         methods:&#123;</span></span><br><span class="line"><span class="regexp">             handleClose()&#123;</span></span><br><span class="line"><span class="regexp">                 this.close(); /</span><span class="regexp">/可以像访问Vue数据那样来调用方法</span></span><br><span class="line"><span class="regexp">             &#125;,</span></span><br><span class="line"><span class="regexp">             close()&#123;</span></span><br><span class="line"><span class="regexp">                 this.show = false;</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">     &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>在事件绑定的后面用圆点加一个后缀名来使用修饰符。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阻止事件冒泡</span></span><br><span class="line">&lt;a @ckick.stop = <span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事件不再重载页面</span></span><br><span class="line">&lt;form @submit.prevent = <span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加事件侦听器时使用事件捕获模式</span></span><br><span class="line">&lt;div @click.capture = <span class="string">"handle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自身触发(不在子元素触发)</span></span><br><span class="line">&lt;div @click.self = <span class="string">"handle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//事件只触发一次</span></span><br><span class="line">&lt;div @click.once = <span class="string">"handle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听键盘事件</span></span><br><span class="line">&lt;div @keyup<span class="number">.13</span> = <span class="string">"submit"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="表单与v-model"><a href="#表单与v-model" class="headerlink" title="表单与v-model"></a>表单与v-model</h3><p>Vue的核心功能就是实现数据绑定，vue提供平v-model用于在表单中进行双向数据绑定。</p><p>如希望实时更新，可以使用@input事件来代替v-model。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"message"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> @input = <span class="string">"handleInput"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&#123;&#123;message1&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">         el:"#app",</span></span><br><span class="line"><span class="regexp">         data:&#123;</span></span><br><span class="line"><span class="regexp">           message:'',</span></span><br><span class="line"><span class="regexp">           message1:''</span></span><br><span class="line"><span class="regexp">         &#125;,</span></span><br><span class="line"><span class="regexp">         computed:&#123;</span></span><br><span class="line"><span class="regexp">             handleInput(e)&#123;</span></span><br><span class="line"><span class="regexp">                 this.message1 = e.target.value</span></span><br><span class="line"><span class="regexp">             &#125;</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">     &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>当只有一个radio时，可以使用v-bind，不需要使用v-model</p><p>当radio组合使用实现互斥选择时，需要v-model配合value实现，不需要使用相同name属性值</p><p>当checkbox使用v-model时，绑定的是一个布尔值,v-model=”checked”</p><p>当checkbox组合使用v-model时，选中的value值 会自动push到数组中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">        &lt;p&gt;单选框使用v-model：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&lt;input type="radio" v-model="picked" value="html" id="html"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;lable for="html"&gt;HTML&lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">value</span>=<span class="string">"js"</span> <span class="attr">id</span>=<span class="string">"js"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"js"</span>&gt;</span>JAVAScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">value</span>=<span class="string">"css"</span> <span class="attr">id</span>=<span class="string">"css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;选中input的value值是：&#123;&#123;picked&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;复选框使用v-model：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">         &lt;p&gt;&lt;input type="checkbox" v-model="checked" value="html" id="html"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;lable for="html"&gt;HTML&lt;/</span>label&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"js"</span> <span class="attr">id</span>=<span class="string">"js"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"js"</span>&gt;</span>JAVAScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"css"</span> <span class="attr">id</span>=<span class="string">"css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"css"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        &lt;p&gt;选中input的value值是：&#123;&#123;checked&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">         el:"#app",</span></span><br><span class="line"><span class="regexp">         data:&#123;</span></span><br><span class="line"><span class="regexp">            picked:'html',</span></span><br><span class="line"><span class="regexp">            checked:['html','js']</span></span><br><span class="line"><span class="regexp">         &#125;</span></span><br><span class="line"><span class="regexp">     &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>v-model也可以绑定动态的value值，即在input中使用v-bind:value</p><h4 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h4><ul><li><p>v-model.lazy：不是实时改变，而是失焦或者按回车时才会更新</p></li><li><p>v-model.number：平时输入框输入数字时，value是string类型，使用此修饰符可以让其改为number类型。</p></li><li><p>v-model.trim：自动过滤首尾空格</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;VUE核心功能&quot;&gt;&lt;a href=&quot;#VUE核心功能&quot; class=&quot;headerlink&quot; title=&quot;VUE核心功能&quot;&gt;&lt;/a&gt;VUE核心功能&lt;/h3&gt;&lt;p&gt;vue的核心功能是数据双向绑定&lt;/p&gt;
&lt;p&gt;el用于指定一个页面中已经存在的DOM元素来挂载Vue
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>居中问题</title>
    <link href="http://zlstory.com/2018/01/15/center/"/>
    <id>http://zlstory.com/2018/01/15/center/</id>
    <published>2018-01-14T16:00:00.000Z</published>
    <updated>2018-04-13T01:18:55.959Z</updated>
    
    <content type="html"><![CDATA[<p>在有浮动时，使用定位解决div居中问题。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        overflow: hidden; position:</span></span><br><span class="line"><span class="undefined">        relative;padding-bottom: 10px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="undefined">        clear: left;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span>: 50%;<span class="comment">/*整个分页向右边移动宽度的50%*/</span></span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0 5px;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">right</span>: 50%;<span class="comment">/*将每个分页项向左边移动宽度的50%*/</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;<span class="attribute">width</span>: <span class="number">70px</span>;<span class="attribute">height</span>: <span class="number">40px</span>;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;<span class="attribute">width</span>: <span class="number">30px</span>;<span class="attribute">height</span>: <span class="number">30px</span>;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;<span class="attribute">width</span>: <span class="number">50px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在有浮动时，使用定位解决div居中问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://zlstory.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置</title>
    <link href="http://zlstory.com/2017/12/26/vscode/"/>
    <id>http://zlstory.com/2017/12/26/vscode/</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2018-04-13T01:20:45.799Z</updated>
    
    <content type="html"><![CDATA[<p>最近我的sublime好像傻了一样，准备将编辑器换成VSCode了，工欲善其事必先利其器，总结一下VSCode的所需插件以及常用快捷键，下次换电脑的时候可以直接安装了。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>VSC所有插件地址 <a href="https://marketplace.visualstudio.com/VSCode" target="_blank" rel="noopener">插件</a> <code>https://marketplace.visualstudio.com/VSCode</code></p><h3 id="主题插件"><a href="#主题插件" class="headerlink" title="主题插件"></a>主题插件</h3><p>颜色主题：One Dark Pro</p><p>文件图标主题：vscode-icons</p><p>备注：重启有效</p><p>Monokai-Midnight(好看是好看,但是在md中语法不高亮。)</p><h3 id="HCJ相关插件"><a href="#HCJ相关插件" class="headerlink" title="HCJ相关插件"></a>HCJ相关插件</h3><p>初级的H5代码片段以及提示：HTML Snippets</p><p>html中关于CSS的class提示： IntelliSense for CSS class names</p><p>关于ES6的快捷键：JavaScript (ES6) code snippets</p><p>提示文件路径: Path Autocomplete</p><p>CSS中代码提示：HTML CSS Support</p><p>支持sass：sass</p><p>支持stylus：language-stylus</p><p>自动修改相匹配的HTML标签: Auto Rename Tag</p><p>颜色高亮显示：Color Highlight</p><p>package.json文件显示模块当前版本和最新版本: Version Lens</p><p>单词拼写检查：Spell Checker(这个插件太恶心了，还是不要装了，只支持英文，导致我写中文md文档时全是红色波浪下划线，惹不起惹不起)</p><p>格式化文件：beauty(可自定义快捷键，在文章底部)</p><p>浏览器预览页面：open In Browser</p><p>jq自动提示：jQuery Code Snippets</p><h3 id="VUE相关插件"><a href="#VUE相关插件" class="headerlink" title="VUE相关插件"></a>VUE相关插件</h3><p>格式化VUE文件：wpy-beautify</p><p>VUE代码高亮：Vetur</p><p>安装完成之后在 设置- 用户设置 中加入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为指定的语法定义配置文件或使用带有特定规则的配置文件。</span></span><br><span class="line"><span class="string">"emmet.syntaxProfiles"</span>: &#123;</span><br><span class="line">    <span class="string">"vue-html"</span>: <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MD插件"><a href="#MD插件" class="headerlink" title="MD插件"></a>MD插件</h3><p>MD文档格式检查: markdownlint(感觉离卸载不远了，跟lint在一起的都不是什么好用的东西)</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>VSCode的所有快捷键可以在 文件-首选项-键盘快捷方式 中查看，以下是常用快捷键。</p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>Ctrl + N 新建文件</p><p>Ctrl + R 打开最近的项目文件夹</p><p>Ctrl + P 打开本项目中的文件</p><p>Ctrl + o 在windows中打开文件</p><p>Ctrl + K Ctrl + o 在windows中打开文件夹</p><p>Ctrl + K R 打开文件所在windows中的目录位置(英文输入法状态下)</p><p>Alt + B 在浏览器中打开文件(所需插件open In Browser)</p><h3 id="文件中查找"><a href="#文件中查找" class="headerlink" title="文件中查找"></a>文件中查找</h3><p>Ctrl + G可以让你导航到文件中的特定行</p><p>Ctrl + Shift + F 在文当前工作目录所有文件中查找</p><p>Ctrl + Shift + H 在文当前工作目录所有文件中查找替换</p><p>Ctrl + F 在当前文件中查找</p><p>Ctrl + H 在当前文件中查找替换</p><p>Ctrl + Shift + O 查找文件中的特定符号</p><h3 id="切换文件"><a href="#切换文件" class="headerlink" title="切换文件"></a>切换文件</h3><p>Ctrl + Shift + Tab 切换打开的文件</p><p>Ctrl + PageDown转到右侧的编辑器。</p><p>Ctrl + PageUp转到左侧的编辑器。</p><p>Ctrl + Shift + Tab 可切换打开的文件</p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>Ctrl + F4 关闭活动的编辑器。</p><p>Ctrl + K + W 关闭编辑组中的所有编辑器。</p><p>Ctrl + B 切换显示左边侧边栏</p><h3 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h3><p>Ctrl + Shift + B 格式化HCJ文件(个人自定义快捷键，所需插件beauty，并不会删除文件中多余的空白行)</p><p>Ctrl + Shift + 6 格式化vue文件(所需插件wpy-beautify)</p><p>Alt + Shift + F 格式化文件(VSC自带快捷键)</p><h3 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h3><p>Ctrl + / 注释</p><p>Ctrl + Alt + / 多行注释(自定义)</p><p>Ctrl + \ 将活动编辑器分成两部分。</p><p>Ctrl + Shift + P可以访问VS Code的所有功能，包括最常见操作的键盘快捷键。</p><p>Ctrl + Shift + [ 折叠</p><p>Ctrl + Shift + ] 展开</p><p>Ctrl + Shift + K 删除当前行</p><p>Ctrl + Shift + C 打开CMD命令行</p><h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><p>文件-首选项-键盘快捷方式-keybindings.json中：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">//ctrl+shift+/多行注释</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"ctrl+alt+/"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.blockComment"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></span><br><span class="line">&#125;,</span><br><span class="line">//快捷键ctrl+shift+b格式化</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+b"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"HookyQR.beautify"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近我的sublime好像傻了一样，准备将编辑器换成VSCode了，工欲善其事必先利其器，总结一下VSCode的所需插件以及常用快捷键，下次换电脑的时候可以直接安装了。&lt;/p&gt;
&lt;h2 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="编辑器" scheme="http://zlstory.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>互联网常见名词解释</title>
    <link href="http://zlstory.com/2017/12/18/seo/"/>
    <id>http://zlstory.com/2017/12/18/seo/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2018-04-13T01:20:40.519Z</updated>
    
    <content type="html"><![CDATA[<p>网站三要素：服务器、主机、空间</p><h3 id="服务器知识"><a href="#服务器知识" class="headerlink" title="服务器知识"></a>服务器知识</h3><h4 id="服务器概念"><a href="#服务器概念" class="headerlink" title="服务器概念"></a>服务器概念</h4><p>放在机房提供公共性或者商业性服务的电脑就称之为服务器，服务器需要24小时运行。</p><h4 id="服务器分类"><a href="#服务器分类" class="headerlink" title="服务器分类"></a>服务器分类</h4><p>按照服务器的外观可以分为台式服务器和机架式服务器，机架式服务器包括普通机架式和刀片式服务器</p><h4 id="服务器系统概念"><a href="#服务器系统概念" class="headerlink" title="服务器系统概念"></a>服务器系统概念</h4><p>定义在服务器上的操作系统</p><h4 id="服务器系统分类"><a href="#服务器系统分类" class="headerlink" title="服务器系统分类"></a>服务器系统分类</h4><p>window 、Linux、Unix</p><h4 id="服务器对网站的重要性"><a href="#服务器对网站的重要性" class="headerlink" title="服务器对网站的重要性"></a>服务器对网站的重要性</h4><ol><li><p>确保网站持续稳定：网站24小时都可以访问</p><p> 影响因素：硬件配置、操作系统、应用软件    </p></li><li><p>确保网站速度够快：网站可以瞬间打开</p><p> 影响因素：避免流量大的机房、独立IP、带宽</p></li></ol><h3 id="主机知识"><a href="#主机知识" class="headerlink" title="主机知识"></a>主机知识</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>主机（也叫空间）是存放网站程序和数据的地方，是搭建网站的三要素之一。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>按照地域分类：国内主机(较贵，需要备案，但是速度快)、国外主机(比较便宜，不需备案，速度较慢)</p><p>按照程序语言分类：PHP主机、ASP主机、全能主机</p><p>按操作系统分类：Linux主机、Windows主机</p><h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><p>数据库大小、FTP、流量计算</p><p>我们搭建网站的时候，只需要购买相应配置的主机就行，不需要自己搭建服务器</p><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>为了确保访问者访问你域名的时候会打开你存放在该空间的网页，在服务器上设置该域名有权限访问的过程叫做绑定域名</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>域名解析就是把域名解析到空间ip上，绑定域名就是在空间上绑定域名允许域名访问空间的内容。域名解析与域名绑定这两个工作都需要，才能让网站正常访问。</p><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><p>在网络上有成千上万台主机，为了区分这些主机，人们给每台主机都分配了一个专门的地址，这个地址就是IP，IP的地址由4位数组成，每部分都不大于256，各部分之间由小数点分开，，每个ip地址都是唯一的。如：192.168.0.1</p><h4 id="IP与域名"><a href="#IP与域名" class="headerlink" title="IP与域名"></a>IP与域名</h4><p> 由于要访问网络时，记IP地址比较麻烦，从而给IP转换了一种比较简单易记的名称：域名。由于ip是唯一的，所以域名也是唯一的。</p><h4 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h4><p> 在公用网络上建立专用网络的技术，允许特定的用户访问公用网络的内部资源，那么这个虚拟专用网络就是VPN。</p><h4 id="VPN作用"><a href="#VPN作用" class="headerlink" title="VPN作用"></a>VPN作用</h4><p> VPN作用：传输数据安全可靠，连接方便灵活，完全控制可扩充性，专用网络</p><h4 id="网络日志"><a href="#网络日志" class="headerlink" title="网络日志"></a>网络日志</h4><p> 服务器日志的统称，它是记录web服务器接收处理请求以及运行时错误等各种原始信息的、以.log结尾的文件</p><p>日志内容：服务器错误信息+用户访问信息+蜘蛛爬行信息。</p><p>通过网络日志可以清楚的得知访客的详细的信息，比如IP、时间、操作系统、是否成功访问某页面等。</p><p>由于网络日志可以记录各搜索引擎蜘蛛机器人在网站爬行的详细情况，所以网站管理员可以通过日志了解网站在搜索引擎中的表现，从而根据日志分析结果来调整seo策略。</p><h3 id="网站类别"><a href="#网站类别" class="headerlink" title="网站类别"></a>网站类别</h3><h4 id="企业网站"><a href="#企业网站" class="headerlink" title="企业网站"></a>企业网站</h4><p>企业网站就是企业在互联网上进行网络建设和形象宣传的电子商务平台</p><p>分为：</p><ol><li><p>电子商务类型：以网络销售为主要目的的企业网站类型</p></li><li><p>多媒体广告型：用来展示企业形象，打造企业品牌</p></li><li><p>产品展示型：针对定向用户展示企业产品详细参数，提供服务咨询的企业网站类型</p></li></ol><h4 id="商城网站"><a href="#商城网站" class="headerlink" title="商城网站"></a>商城网站</h4><p>商城就是以电子商务软件来构建的大型商品电子交易平台，其主要作用就是通过商城交易平台向客户准确、快捷的销售产品</p><p>商城、消费者和物流构成了电子商务的核心三要素，其中商城是实现电子商务活动的载体</p><p>商城模式：</p><ol><li>B2B:Business-to-Business，代表：阿里巴巴 慧聪网</li><li>B2C:Business-to-Customer，代表：京东、当当、凡客</li><li>C2C:Customer-to-Customer，代表：淘宝</li></ol><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>SEO真正的价值是带来定向客户，定向客户是通过搜索一些词语来到我们网站的，这些客户要搜索的词语就叫做关键词。简单的来说，关键词就是潜在用户要搜的词，所有我们潜在客户在搜素引擎上面要搜索的词我们都可以称之为关键词。分为主关键词与长尾关键词。一般我们用最高权重页面去优化的词叫做主关键词。长尾关键词：搜索量没有主关键词打的一些词，一般用内页来优化。</p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>文章是一个网站必备的因素，是我们优化网站必要的手段，因为想要让一个网页排有名且转化一个很重要的前提就是我们要提供有价值的内容。页面内容对于搜索引擎来说最重要的就是文章，好的文章可以增强页面在整个网络上的权威，相反不好甚至作弊的文章可能回调整个网站在搜索引擎上积累的信任度。</p><p>原创：在seo行业里原创文章就是搜索引擎之前未见过的文章。各大搜索引擎的数据库是独立的，如果谷歌收录的一篇文章百度引擎没有见过的话， 也算作原创文章。</p><p>伪原创文章：在一些搜索引擎已经抓取过得文章基础上经过加工编辑成的文章。比如将原本网络中已经存在的文章交换段落，替换关键词就是一篇伪原创文章。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li>反向链接：任何一个链接都是某一个页面对另一个页面的反向链接，任何一个超链接都是一个页面对另外一个页面的信任投票。</li><li>锚文本：就是文本上加入超链接，如：<a href="https://sinsle.com/" target="_blank" rel="noopener">朽壳</a>，这是对另外一个页面最好的信任投票，直接的告诉了搜索引擎这个链接的属性</li><li>URL超链接：就是网址的超级链接，如：<a href="https://sinsle.com/" target="_blank" rel="noopener">https://sinsle.com/</a></li></ol><h4 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h4><p>内链是反向链接的一种形式，主要是指我们网站内部网页之间的相互超链接。</p><p>作用：可以让搜索引擎更多的抓取我们的页面，以及可以让网页之间进行”投票”。内链具有相关、稳定的特点。而这两个特点在反向链接中非常重要。</p><p>注意：内部链接虽然非常重要，但是我们在刚开始做一个网站的时候不要加太多内部链接，因为有过度优化的嫌疑。</p><h4 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h4><p>在同等条件下，外链数量较多，排名和稳定性越好。同等条件下，越是相关的页面给的外链越有价值。</p><p>外链是其他网站对本网站的信任投票，利于搜索引擎对我们网页权威性的评价。</p><p>注意：在建站初期时，建议大家不要建设太多外链。</p><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><p>我们在访问任何一个网页，服务器都会生成网站的日志，在日志里面会有一个3位数的数字代码，这三位数字diam就是记录了我们访问的动作，比如是“正常访问”还是“无法打开网页”等，这三位数字就是http状态码。</p><p>1xx:消息，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p><p>2xx:成功，代表请求已成功被服务器接收、理解、并接受。</p><p>3xx:重定向，代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p><p>4xx:客户端错误，代表了客户端看起来可能发生了错误，妨碍了服务器的处理。</p><p>5xx:服务器错误，表示服务器无法完成明显有效的请求。[56]这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。</p><p>http状态码是服务器与客户端交流信息的语言，这个客户端包括用户与爬虫。通过站长工具的http状态码查询可以查看网站的状态码信息</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/seo1.png" alt=" "></p><p>通过http状态码可以查看搜索引擎爬虫在你网站的爬取情况，也可以查看网站出现了什么问题。</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>网络爬虫(网络蜘蛛)是一种自动获取网页内容的程序，爬虫抓取的网页将会被搜索引擎系统存储，进行一定的分析、过滤并建立索引，一边之后的用户能够查询到这个页面，这个获取信息的程序就是爬虫。</p><p>爬虫为搜索引擎收集内容，搜索引擎展示的内容大部分是爬虫收集的。</p><p>爬虫通过漫游的形式进行抓取，爬虫爬到一个页面后，看到一个链接，然后顺着那个连接又爬到另外一个页面，爬虫是不听的从一个页面跳到另一个页面的，他一边下载这个网页，一边在提取这个网页中的链接，那个页面上所有的链接都放在一个公用的“待抓取列表”里。而且爬虫有个特点，就是在访问你网站之前不去做判断你这个网站本身是怎么样的，不对网页内容判断就抓取，但是会有优先级的划分，尽量不会抓重复的内容，尽量抓重要内容(比如网站的公共部分).搜索引擎同时会排出多个爬虫进行多线程的抓取。所有被爬虫抓取的网页将会被系统存储，进行一定的分析过滤，并建立索引，以便之后的查询和检索。</p><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>概念：搜索引擎对一个网站的信任度。</p><p>决定一个网站权重的因素包含很多方面，据谷歌数据调查至少有两百多个方面，且权重没有特定的工具可以测量出来。</p><h3 id="PR-Page-Rank-网页级别"><a href="#PR-Page-Rank-网页级别" class="headerlink" title="PR(Page Rank:网页级别)"></a>PR(Page Rank:网页级别)</h3><p>PR是Google用来标识网页的等级、重要性的一种方法，是Google用来衡量一个网站好坏的重要标准之一。</p><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>搜索引擎使用爬虫程序自动访问互联网上的网页并获取网页信息。爬虫在访问一个网站时，会首先检查该网站的根目录下是否有一个叫做robots.txt文件，这个文件是用于指定爬虫在网站上抓取范围。简单的来说就是网站通过robots协议来告诉搜索引擎哪些页面可以抓取，哪些页面不可以抓取。</p><p>因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。</p><p>用法：</p><ol><li><p>允许所有的机器人</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:*</span><br><span class="line">Disallow:</span><br><span class="line"></span><br><span class="line">User-agent:*</span><br><span class="line">Allow:/</span><br></pre></td></tr></table></figure></li><li><p>允许特定的机器人</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:some_spider</span><br><span class="line">Allow:</span><br></pre></td></tr></table></figure></li><li><p>仅禁止特定机器人访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:any_spider</span><br><span class="line">Disallow:/</span><br></pre></td></tr></table></figure></li><li><p>禁止所有的机器人</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent:*</span><br><span class="line">Disallow:/</span><br></pre></td></tr></table></figure></li><li><p>禁止所有机器人访问特定目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /cgi-bin/</span><br><span class="line">Disallow: /images/</span><br><span class="line">Disallow: /tmp/</span><br><span class="line">Disallow: /private/</span><br></pre></td></tr></table></figure></li><li><p>禁止所有机器人访问特定文件类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /*.php$</span><br><span class="line">Disallow: /*.js$</span><br><span class="line">Disallow: /*.inc$</span><br><span class="line">Disallow: /*.css$</span><br></pre></td></tr></table></figure></li><li><p>使用”*“来限制访问的url，如仅允许访问以”.html”为后缀的url</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /cgi-bin/*.htm</span><br></pre></td></tr></table></figure></li><li><p>禁止访问网站中所有的动态界面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /*?*</span><br></pre></td></tr></table></figure></li></ol><h3 id="查询网站收入量"><a href="#查询网站收入量" class="headerlink" title="查询网站收入量"></a>查询网站收入量</h3><p>浏览器中输入：site:<a href="http://www.zlstory.com" target="_blank" rel="noopener">www.zlstory.com</a></p><p>从新站录入的时刻来讲，google快于百度，百度关于新站不会马上录入，乃至适当长的时刻内都不会录入，只需经过百度的检测期后，百度才会许多录入该站点内容，这需求很长一段时刻。</p><h3 id="网页快照"><a href="#网页快照" class="headerlink" title="网页快照"></a>网页快照</h3><p>搜索引擎在收录网页中，对网页进行备份时，存在自己的服务器缓存里，当用户在搜索引擎中点击“网页快照”链接时，搜索引擎将蜘蛛系统当时所抓取并保存的网页内容展现出来，称为“网页快照”。</p><p>快照回档：指的是百度的快照被退回到之前日期的快照。</p><p>回档原因：</p><ol><li>主机空间不稳定，网站首页的改动、作弊等</li><li>服务器宕机</li></ol><h3 id="黑冒"><a href="#黑冒" class="headerlink" title="黑冒"></a>黑冒</h3><h4 id="黑冒与白冒"><a href="#黑冒与白冒" class="headerlink" title="黑冒与白冒"></a>黑冒与白冒</h4><p>黑冒：所有不符合引擎优化规范的优化技巧及方法</p><p>白冒：所有符合引擎优化规范的优化技巧及方法</p><h4 id="黑冒与白冒的区别"><a href="#黑冒与白冒的区别" class="headerlink" title="黑冒与白冒的区别"></a>黑冒与白冒的区别</h4><p>本质区别：是否站在了用户的角度去调整优化我们的网站，黑冒是纯粹站在搜索引擎的角度去做优化，几乎或者完全不考虑用户感受，甚至存在欺骗用户、欺骗搜素引擎的行为。</p><h4 id="黑冒优点"><a href="#黑冒优点" class="headerlink" title="黑冒优点"></a>黑冒优点</h4><p>好的黑冒是白冒seo的基础，是我们探索搜索引擎底线的工具。</p><h4 id="黑冒常用手段"><a href="#黑冒常用手段" class="headerlink" title="黑冒常用手段"></a>黑冒常用手段</h4><p>1.锚文本轰炸</p><p>一个页面并没有相关的内容，但是用大量的锚文本指向此页面。</p><p>2.采集</p><p>用一些程序在网络是哪个自动收集一些文字，经过简单的程序自动处理之后发布到网站上，用户体验极差。</p><p>3.群发</p><p>用软件把自己的链接发布到一些网站上，短时间获得大量的外链。</p><p>4.站群和链轮</p><p>为了快速得到排名，组织了相关站点，这些网站之间按照一定规则像车轮一样链接起来，并且每一个站点都指向我们要优化的网站，因为链轮往往涉及都的网页较多，只要其中一个网页获得搜索引擎的光顾，其他网页通过这个网页上的超链接增加其在搜索引擎面前的曝光量，对于站群和链轮来讲，网站的数量越多风险越大。</p><p>5.挂马</p><p>为了达到某种目的，通过一种手段，进入到一个网站并在该网站安装了木马程序，不但该网站被挂马，更重要的是该网站用户的电脑也有中毒的危险，导致用户体验极差。</p><p>6.黑链</p><p>不正当的链接，用户一般看不到，但是搜索引擎可以看到的链接，一般网站后台被入侵，挂上了对方网站的链接，这些链接虽然从页面中看不出来，但是搜索引擎是可以抓取的。</p><h4 id="惩罚"><a href="#惩罚" class="headerlink" title="惩罚"></a>惩罚</h4><p>如果滥用黑冒过度并且影响到正常的搜索秩序的时候，搜索引擎必然会做出调整。</p><ol><li>收录大量减少</li><li>排名全面下降</li><li>直接从搜索引擎数据库中删除该站</li></ol><p>(换个域名就解决)</p><h3 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h3><p>Pay Per Click：点击付费广告。</p><p>自然排名：不管任何关键词在百度搜索结果当中每页肯定会有十个网页是按照搜索引擎规则得出的顺序进行排列的，这些网站的排名就是自然排名。</p><p>而搜索引擎的PPC，就是给的钱越多则排名越靠前、排名靠前的时间也越长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网站三要素：服务器、主机、空间&lt;/p&gt;
&lt;h3 id=&quot;服务器知识&quot;&gt;&lt;a href=&quot;#服务器知识&quot; class=&quot;headerlink&quot; title=&quot;服务器知识&quot;&gt;&lt;/a&gt;服务器知识&lt;/h3&gt;&lt;h4 id=&quot;服务器概念&quot;&gt;&lt;a href=&quot;#服务器概念&quot; class=
      
    
    </summary>
    
    
      <category term="html" scheme="http://zlstory.com/tags/html/"/>
    
      <category term="seo" scheme="http://zlstory.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>浅谈前端项目模块化工具webpack</title>
    <link href="http://zlstory.com/2017/11/30/webpack/"/>
    <id>http://zlstory.com/2017/11/30/webpack/</id>
    <published>2017-11-29T16:00:00.000Z</published>
    <updated>2018-04-13T01:21:18.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h3><p>webpack是一个模块打包器，他可以将前端中的静态文件根据一定的规则打包成一个或多个文件。简单的来说，webpack就是一个代码打包工具。</p><h3 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h3><p>随着前端开发的越来越复杂，不可能将所有前端代码写在一个文件中，但是若写在多个文件中会在全局作用域下造成冲突、http请求次数增多且后期维护困难。为了方便管理及组织，我们需要给代码划分不同的模块及文件中，进行模块化开发。</p><p>另一方面，前端优化有两大方面：1.减少http请求 2.减小静态文件体积。</p><p>webpack可以同时支持CommonJs与AMD规范,不仅是针对于JavaScript，其他文件如css、图片、字体等一切前端文件皆可兼容，且都可以分模块打包(实现了按需加载)，且可以将es6的代码编译成浏览器识别的es5。</p><h3 id="commonJS-与-AMD-规范"><a href="#commonJS-与-AMD-规范" class="headerlink" title="commonJS 与 AMD 规范"></a>commonJS 与 AMD 规范</h3><h4 id="commonJS模块规范"><a href="#commonJS模块规范" class="headerlink" title="commonJS模块规范"></a>commonJS模块规范</h4><p>每一个文件都是一个模块，有着自己的作用域，在文件里定义的变量函数等都是私有的，对其他文件不可见。模块加载的顺序与其在代码中出现的顺序一致，即：不可异步加载。</p><p>模块之间必须通过module.exports进行自身文件的暴露，再其他文件中通过require()将暴露的模块引入到当前作用域中。</p><h4 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h4><p>由于commonJS只能同步加载，这样对浏览器来说很不友好，于是AMD定义了一套JavaScript模块以异步加载模块。</p><h3 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h3><p>安装webpack需要node支持（前端电脑中应该都有node环境吧！）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>安装完成之后，查看webpack的所有命令。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack -help</span><br></pre></td></tr></table></figure></p><p>cd进入目标文件之后，建立一个package.json文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><img src="http://p09xm7bj0.bkt.clouddn.com/webpack1.png" alt=" "></p><ul><li>name：这个包的名字</li><li>version：这个包的版本</li><li>description： 一句话描述这个包是做什么用的</li><li>entry point：入口文件，默认是index.js，你可以写成自己的文件</li><li>test command：测试命令</li><li>git repository：Git仓库地址，没有直接回车</li><li>keyword：作为搜索包的关键词</li><li>author：作者</li><li>license：开源文件</li></ul><p>填完这些信息之后，它会问你 Is this OK ？<br>回车之后，目标文件中就有新增一个package.json，内容就是刚刚填的那些信息。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"zlstory"</span>,</span><br><span class="line"><span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="string">"description"</span>: <span class="string">"a webpack demo"</span>,</span><br><span class="line"><span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"author"</span>: <span class="string">"zlstory"</span>,</span><br><span class="line"><span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装webpack的依赖，生成node_modules文件夹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure><p>若要安装指定版本的webpack版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.8.1 --save-dev</span><br></pre></td></tr></table></figure><h3 id="使用webpack打包js"><a href="#使用webpack打包js" class="headerlink" title="使用webpack打包js"></a>使用webpack打包js</h3><h4 id="单个入口文件"><a href="#单个入口文件" class="headerlink" title="单个入口文件"></a>单个入口文件</h4><p>在目标文件夹中建立index.html与entry.js文件，如下图所示：</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/webpack2.png" alt=" "></p><p>在entry.js中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"webpack works!"</span>);</span><br></pre></td></tr></table></figure><p>在index.html中<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意我们引入的是bundle.js，而并非是新建的entry.js，若直接在浏览器打开index.html一定是报错的，因为找不到bundle.js，那么webpack就是可以将entry.js打包成一个bundle.js，并生成bundle.js在指定目录中。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack entry.js bundle.js</span><br></pre></td></tr></table></figure></p><p>此时在浏览器中打开index.html会发现<span style="font-size:16px;">webpack works!<span></span></span></p><h4 id="多个入口文件"><a href="#多个入口文件" class="headerlink" title="多个入口文件"></a>多个入口文件</h4><p>通过require()可以将其他文件引入进来，如新建head.js文件。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require之前需要进行接口的暴露</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">"This is head.js"</span>;</span><br></pre></td></tr></table></figure></p><p>在entry.js中将head.js引入<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"webpack works!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">"./head.js"</span>));</span><br></pre></td></tr></table></figure></p><p>重新使用webpack entry.js bundle.js打包可以，成功后打开index.html，可以看出既有<span style="font-size:16px;">webpack works!<span>，也console出了 This is head.js,证明webpack将entry.js以及head.js都打包到了bundle.js中。</span></span></p><p>将之前生成的bundle.js删除，新建一个webpack.config.js文件：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"sourcemap"</span>,</span><br><span class="line">    entry: <span class="string">"./js/entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再使用cmd执行 webpack 命令也会生成bundle.js,同时会生成一个.map文件（错误信息文件）。</p><h3 id="使用不同的loader处理不同的静态文件"><a href="#使用不同的loader处理不同的静态文件" class="headerlink" title="使用不同的loader处理不同的静态文件"></a>使用不同的loader处理不同的静态文件</h3><p>webpack本身只能处理js文件，若需要模块化打包css、图片以及字体等文件，需要加载对应的loader。<br>loader是一个预处理函数，接受源文件作为参数，返回的是转换的结果。loader为JavaScript生态系统提供了更多的能力，例如压缩、打包、语言翻译等。</p><p>如css文件需要加载css-loader或style-loader：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install css-loader --save-dev</span><br><span class="line"></span><br><span class="line">npm install ts-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>在webpack.config.js(没有就新建)中指定loader。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123; <span class="attr">test</span>:<span class="regexp">/\.css$/</span>, <span class="attr">use</span>:<span class="string">"css-loader"</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单实现：</p><p>新建css文件，在entry.js中require该css文件，使用webpack entry.js bundle.js命令，发现css文件生效。</p><p>当然也可以使用内联方式来指定该文件需要使用什么的loader<br>如在entry.js中:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"!style-loader!css-loader!./style.css"</span>) <span class="comment">// 载入 style.css</span></span><br></pre></td></tr></table></figure></p><h3 id="使用webpack加载第三方库"><a href="#使用webpack加载第三方库" class="headerlink" title="使用webpack加载第三方库"></a>使用webpack加载第三方库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install jquery --save-dev</span><br></pre></td></tr></table></figure><p>在entry.js中，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"webpack works!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">"./head.js"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">"h1"</span>).html(<span class="string">"this is jquery"</span>);</span><br></pre></td></tr></table></figure><p>在index.html中<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在webpack.config.js中<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"sourcemap"</span>,</span><br><span class="line">    entry: <span class="string">"./entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用webpack 命令，打开浏览器即可看见页面中：</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/webpack3.jpg" alt=" "></p><h3 id="webpack与babel、vue"><a href="#webpack与babel、vue" class="headerlink" title="webpack与babel、vue"></a>webpack与babel、vue</h3><p><a href="https://babeljs.cn/" target="_blank" rel="noopener">babel中文网</a></p><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue官网</a></p><p>首先安装相关的loader：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> npm install babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage-0 babel-runtime --save-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install vue-loader vue-html-loader vue-style-loader --save-dev</span><br></pre></td></tr></table></figure><p>在webpack.config.js中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"sourcemap"</span>,</span><br><span class="line">    entry: <span class="string">"./js/entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader:<span class="string">"style!css"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader:<span class="string">"babel"</span>,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader:<span class="string">"vue"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    babel:&#123;</span><br><span class="line">        presets:[<span class="string">'es2015'</span>,<span class="string">'stage-0'</span>],</span><br><span class="line">        plugins:[<span class="string">'transform-runtime'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">        resolve: &#123;<span class="comment">//在使用npm构建vue环境的时候，需要在打包工具里配置一个别名</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span> <span class="comment">// 'vue/dist/vue.common.js' for webpack 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="webpack命令"><a href="#webpack命令" class="headerlink" title="webpack命令"></a>webpack命令</h4><p>安装全局的webpack服务器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g webpack-dev-server</span><br></pre></td></tr></table></figure></p><p>安装项目依赖的服务器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>查看所有打包文件以及在什么文件中调用了哪个文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack  --display-modules  --display-reasons</span><br></pre></td></tr></table></figure><p>实时监控<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack -watch</span><br></pre></td></tr></table></figure></p><p>热更新：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack-dev-server --content-base build --inline --hot</span><br></pre></td></tr></table></figure></p><p>配置服务器与热更新,在package.json中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack-dev-server --content-base build --inline --hot&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区分线上与线下环境</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>　debug = process.env.MODE_ENV != <span class="string">"production"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: debug ?  <span class="string">"sourcemap"</span> :<span class="literal">null</span>,</span><br><span class="line">    entry: <span class="string">"./js/entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader:<span class="string">"style!css"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:debug?[]:[</span><br><span class="line">        <span class="keyword">new</span> webpack.optiomize.DebugPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optiomize.OccurenceOrderPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    babel:&#123;</span><br><span class="line">        presets:[<span class="string">'es2015'</span>,<span class="string">'stage-0'</span>],</span><br><span class="line">        plugins:[<span class="string">'transform-runtime'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span> <span class="comment">// 'vue/dist/vue.common.js' for webpack 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webpack简介&quot;&gt;&lt;a href=&quot;#webpack简介&quot; class=&quot;headerlink&quot; title=&quot;webpack简介&quot;&gt;&lt;/a&gt;webpack简介&lt;/h3&gt;&lt;p&gt;webpack是一个模块打包器，他可以将前端中的静态文件根据一定的规则打包成一个或多
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://zlstory.com/tags/webpack/"/>
    
  </entry>
  
</feed>
