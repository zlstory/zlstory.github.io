<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zlstory</title>
  
  <subtitle>若独学而无友，则孤陋且寡闻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zlstory.com/"/>
  <updated>2019-12-17T06:30:46.333Z</updated>
  <id>http://zlstory.com/</id>
  
  <author>
    <name>Crystal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>canvas学习笔记——高级篇</title>
    <link href="http://zlstory.com/2019/12/17/canvas2/"/>
    <id>http://zlstory.com/2019/12/17/canvas2/</id>
    <published>2019-12-16T16:00:00.000Z</published>
    <updated>2019-12-17T06:30:46.333Z</updated>
    
    <content type="html"><![CDATA[<ol><li>阴影</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">context.shadowColor </span><br><span class="line"></span><br><span class="line">context.shadowOffsetX</span><br><span class="line">context.shadowOffsetY</span><br><span class="line"></span><br><span class="line">context.shadowBlur <span class="comment">//模糊程度</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>globalAlpha(默认为1):透明度设置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.globalAlpha = <span class="number">0.7</span></span><br></pre></td></tr></table></figure></li><li><p>globalCompositeOperation:互相遮盖时产生的效果（有十一种属性）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.globalCompositeOperation =  <span class="string">"source-over"</span></span><br></pre></td></tr></table></figure></li><li><p>剪辑区域 clip</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.beginPath()</span><br><span class="line">context.fillStyle =<span class="string">"black"</span></span><br><span class="line">context.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)           </span><br><span class="line"></span><br><span class="line">context.beginPath()</span><br><span class="line">context.arc(<span class="number">400</span>,<span class="number">400</span>,<span class="number">150</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>)</span><br><span class="line">context.fillStyle =<span class="string">"#fff"</span></span><br><span class="line">context.fill()</span><br><span class="line">context.clip()</span><br><span class="line"></span><br><span class="line">context.font = <span class="string">"bold 100px Arial"</span></span><br><span class="line">context.textAlign = <span class="string">"center"</span></span><br><span class="line">context.textBaseline = <span class="string">"middle"</span></span><br><span class="line">context.fillStyle = <span class="string">"pink"</span></span><br><span class="line">context.fillText(<span class="string">"CANVAS"</span> ,canvas.width/<span class="number">2</span>,canvas.height/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>canvas中获取鼠标坐标<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = event.clientX - canvas.getBoundingClientRect().left</span><br><span class="line"><span class="keyword">var</span> y = event.clientY - canvas.getBoundingClientRect().top</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;阴影&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://zlstory.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>git报错443</title>
    <link href="http://zlstory.com/2019/12/17/git443/"/>
    <id>http://zlstory.com/2019/12/17/git443/</id>
    <published>2019-12-16T16:00:00.000Z</published>
    <updated>2019-12-17T07:07:31.658Z</updated>
    
    <content type="html"><![CDATA[<p>提交代码，遇到git报错信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to connect to github.com port 443: Timed out</span><br></pre></td></tr></table></figure></p><p>解决方案：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><p>再次提交，成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提交代码，遇到git报错信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Failed to connect to github.com po
      
    
    </summary>
    
    
      <category term="git" scheme="http://zlstory.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>canvas学习笔记——基础篇</title>
    <link href="http://zlstory.com/2019/12/16/canvas/"/>
    <id>http://zlstory.com/2019/12/16/canvas/</id>
    <published>2019-12-15T16:00:00.000Z</published>
    <updated>2019-12-17T05:48:04.361Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建canvas以及初始化</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>)</span><br><span class="line">  <span class="keyword">if</span> (!canvas.getContext) &#123; <span class="comment">//判断浏览器是否支持canvas</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>绘制线条</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">context.moveTo(x,y) <span class="comment">//状态设置</span></span><br><span class="line"></span><br><span class="line">context.lineTo(x,y) <span class="comment">//状态设置</span></span><br><span class="line"></span><br><span class="line">context.stroke() <span class="comment">//绘制</span></span><br></pre></td></tr></table></figure><p>在定义路径的时候如果有多个路径，我们希望他们互不干扰，需要用到</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.beginPath() <span class="comment">//重新绘制，可以不用closePath结束</span></span><br><span class="line">context.closePath() <span class="comment">//会用一条线将不封闭的首尾连接起来</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定义样式<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.lineWidth <span class="comment">//线条的宽度</span></span><br><span class="line"></span><br><span class="line">context.strokeStyle <span class="comment">//线条的颜色</span></span><br><span class="line"></span><br><span class="line">context.stroke() <span class="comment">//绘制线条</span></span><br><span class="line"></span><br><span class="line">context.fillStyle <span class="comment">//填充的颜色</span></span><br><span class="line"></span><br><span class="line">context.fill() <span class="comment">//绘制填充颜色</span></span><br></pre></td></tr></table></figure></li></ol><p>先stroke()之后再fill() 填充会将linewidth的一半遮挡住，若先fill再stroke不会有这种问题</p><ol start="4"><li>绘制弧线</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.arc(</span><br><span class="line">    centerx,centery,radius, <span class="comment">//圆心坐标以及半径</span></span><br><span class="line">    startingAngle,endingAngle, <span class="comment">//开始与结束弧度值</span></span><br><span class="line">    anticlockwise = <span class="literal">false</span> <span class="comment">//可选，顺时针(false)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="5"><li>刷新画布操作</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</span><br></pre></td></tr></table></figure><ol start="6"><li>绘制矩形</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cxt.rect(x,y,width,height)</span><br><span class="line"></span><br><span class="line">ctx.fillRect(x,y,width,height) <span class="comment">//填充的矩形</span></span><br><span class="line"></span><br><span class="line">ctx.strokeRect(x,y,width,height) <span class="comment">//带边框的矩形</span></span><br></pre></td></tr></table></figure><ol start="7"><li>线条的属性</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lineCap：线条两边头突出的形状，默认无</span></span><br><span class="line"><span class="comment">//lineCap:butt,round,square</span></span><br><span class="line"></span><br><span class="line">context.lineCap = <span class="string">"butt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//lineJoin:线与线之间连接的部分</span></span><br><span class="line"><span class="comment">//lineJoin:miter,bevel,round</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//miterLimit:当lineJoin属性是miter时，内角与外角的之间长度是10（默认值），超过limit值是会用beveil形式显示</span></span><br><span class="line">context.lineJoin = <span class="string">"miter"</span></span><br><span class="line">context.miterLimit = <span class="number">10</span></span><br></pre></td></tr></table></figure><ol start="8"><li>图形变换</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">translate(x,y) <span class="comment">//位移</span></span><br><span class="line"></span><br><span class="line">rotate(deg) <span class="comment">//旋转</span></span><br><span class="line"></span><br><span class="line">scale(sx,sy) <span class="comment">//缩放</span></span><br></pre></td></tr></table></figure><p>图形变换会改变其他的图形位置，canvas为我们提供了两个接口用于保存状态和恢复</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需成对出现</span></span><br><span class="line">context.save() <span class="comment">//在图形变换前保存状态</span></span><br><span class="line">context.restore() <span class="comment">//返回在save()节点所有的状态</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>变换矩阵</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transform(a,b,c,d,e,f)</span><br><span class="line"><span class="comment">//a,d:水平、垂直缩放</span></span><br><span class="line"><span class="comment">//b,c:水平、垂直倾斜</span></span><br><span class="line"><span class="comment">//e,f:水平、垂直位移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//setTransform会让之前设置的transform失效</span></span><br><span class="line">setTransform(a,b,c,d,e,f)</span><br></pre></td></tr></table></figure></li><li><p>线性渐变fillStyle</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grd = context.createLinearGradient(xstart,ystart,xend,yend)</span><br><span class="line">grd.addColorStop(stop,color)</span><br></pre></td></tr></table></figure><p>demo:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>)</span><br><span class="line"></span><br><span class="line">    canvas.width = <span class="number">800</span></span><br><span class="line">    canvas.height = <span class="number">800</span></span><br><span class="line">    <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> linearGrad = context.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>)</span><br><span class="line">    linearGrad.addColorStop(<span class="number">0.0</span>,<span class="string">"#fff"</span>)</span><br><span class="line">    linearGrad.addColorStop(<span class="number">0.5</span>,<span class="string">"red"</span>)</span><br><span class="line">    linearGrad.addColorStop(<span class="number">1.0</span>,<span class="string">"#000"</span>)</span><br><span class="line">    </span><br><span class="line">    context.fillStyle=linearGrad</span><br><span class="line">    context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="11"><li><p>径向渐变Radial Gradient<br>用法与linearGradient相似</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grd = context.createRadialGradient(x0,y0,r0,x1,y1,r1)</span><br><span class="line">grd.addColorStop(stop,color)</span><br></pre></td></tr></table></figure></li><li><p>使用图片、画布或者video:createPattern</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createPattern(img,repeat-style)</span><br><span class="line">createPattern(canvas,repeat-style)</span><br><span class="line"><span class="comment">//repeat-style:no-repeat,repeat-x,repeat-y,repeat</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bg = <span class="keyword">new</span> Image()</span><br><span class="line">bg.src = <span class="string">"demo.png"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = context.createPattern(bg,<span class="string">"no-repeat"</span>)</span><br><span class="line">context.fillStyle = pattern</span><br><span class="line">context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>)</span><br></pre></td></tr></table></figure></li><li><p>绘制圆弧: arcTo（上面有arc的方式）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.moveTo(x0,y0) <span class="comment">// 开始点</span></span><br><span class="line"></span><br><span class="line"> context.arcTo(x1,y1,  <span class="comment">//控制点</span></span><br><span class="line">                x2,y2, <span class="comment">//结束点</span></span><br><span class="line">                radius)</span><br></pre></td></tr></table></figure></li><li><p>贝塞尔曲线：</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二次贝塞尔曲线</span></span><br><span class="line">context.moveTo(x0,y0) <span class="comment">// 曲线起始点</span></span><br><span class="line">context.quadraticCurveTo(</span><br><span class="line">    x1,y1, <span class="comment">//控制点</span></span><br><span class="line">    x2,y2 <span class="comment">//结束点</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//三次贝塞尔曲线</span></span><br><span class="line">context.bezeirCurveTo(</span><br><span class="line">    x1,y1, x2,y2, <span class="comment">//控制点</span></span><br><span class="line">    x3,y3 <span class="comment">//结束点</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="15"><li>文字渲染</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.font = <span class="string">"bold 30px Arial"</span></span><br><span class="line">context.fillText(string,x,y,[maxlen])</span><br><span class="line">context.strokeText(string,x,y,[maxlen])</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文本水平对齐</span></span><br><span class="line">context.textAlign = <span class="string">"left"</span> <span class="comment">//center right</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置文本垂直对齐</span></span><br><span class="line">context.textBaseline = <span class="string">"top"</span> <span class="comment">//middle bottom alphabetic(default) ideographic hanging</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取渲染后的文字度量</span></span><br><span class="line">context.measureText(string).width <span class="comment">//目前只能获取宽度</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;创建canvas以及初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://zlstory.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>在vue中使用iframe</title>
    <link href="http://zlstory.com/2019/10/21/iframeInVue/"/>
    <id>http://zlstory.com/2019/10/21/iframeInVue/</id>
    <published>2019-10-20T16:00:00.000Z</published>
    <updated>2019-11-21T03:14:29.384Z</updated>
    
    <content type="html"><![CDATA[<p>在vue-cli的项目中使用iframe引入html文件的方法：</p><ol><li>将需要引入的html文件及style文件放入在static文件夹中</li></ol><ol start="2"><li>在vue文件中<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:src</span>=<span class="string">"iframeUrl"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"440"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"position:absolute;top:100px;left: 0px;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        iframeUrl:<span class="string">"../../static/demo.html"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在vue-cli的项目中使用iframe引入html文件的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将需要引入的html文件及style文件放入在static文件夹中&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;在vue文件中&lt;figure class=&quot;highl
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>在vue-cli中使用websocket</title>
    <link href="http://zlstory.com/2019/10/03/websocket/"/>
    <id>http://zlstory.com/2019/10/03/websocket/</id>
    <published>2019-10-02T16:00:00.000Z</published>
    <updated>2019-11-21T03:07:17.043Z</updated>
    
    <content type="html"><![CDATA[<ol><li>什么是websocket</li></ol><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><ol start="2"><li>为什么要使用websocket</li></ol><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p><ol start="3"><li>在vue-cli项目中使用websocket</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      websock: <span class="literal">null</span>,</span><br><span class="line">      reconnectData: <span class="literal">null</span>,</span><br><span class="line">      lockReconnect: <span class="literal">false</span>, <span class="comment">//避免重复连接，因为onerror之后会立即触发 onclose</span></span><br><span class="line">      timeout: <span class="number">1000</span>, <span class="comment">//10s一次心跳检测</span></span><br><span class="line">      timeoutObj: <span class="literal">null</span>,</span><br><span class="line">      serverTimeoutObj: <span class="literal">null</span>,</span><br><span class="line">      socketData: &#123;</span><br><span class="line">        pageName: <span class="keyword">this</span>.GLOBAL.pageName,</span><br><span class="line">        futuresName: <span class="keyword">this</span>.GLOBAL.futuresName,</span><br><span class="line">        enterTime: <span class="keyword">this</span>.GLOBAL.enterTime,</span><br><span class="line">        leaveTime: <span class="keyword">this</span>.GLOBAL.leaveTime</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initWebSocket() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"启动中"</span>);</span><br><span class="line">      <span class="keyword">let</span> wsurl = <span class="string">`ws://47.56.99.230/api/websocket/<span class="subst">$&#123;<span class="keyword">this</span>.userId&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">this</span>.websock = <span class="keyword">new</span> WebSocket(wsurl);</span><br><span class="line">      <span class="keyword">this</span>.websock.onopen = <span class="keyword">this</span>.websocketonopen; <span class="comment">//连接成功</span></span><br><span class="line">      <span class="keyword">this</span>.websock.onmessage = <span class="keyword">this</span>.websocketonmessage; <span class="comment">//广播成功</span></span><br><span class="line">      <span class="keyword">this</span>.websock.onerror = <span class="keyword">this</span>.websocketonerror; <span class="comment">//连接断开，失败</span></span><br><span class="line">      <span class="keyword">this</span>.websock.onclose = <span class="keyword">this</span>.websocketclose; <span class="comment">//连接关闭</span></span><br><span class="line">    &#125;, <span class="comment">//初始化weosocket</span></span><br><span class="line">    websocketonopen() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接成功"</span>);</span><br><span class="line">      <span class="comment">// this.heatBeat();</span></span><br><span class="line">    &#125;, <span class="comment">//连接成功</span></span><br><span class="line">    websocketonerror() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"连接失败"</span>);</span><br><span class="line">      <span class="keyword">this</span>.reconnect();</span><br><span class="line">    &#125;, <span class="comment">//连接失败</span></span><br><span class="line">    websocketclose() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"断开连接"</span>);</span><br><span class="line">      <span class="keyword">this</span>.reconnect();</span><br><span class="line">    &#125;, <span class="comment">//各种问题导致的 连接关闭</span></span><br><span class="line">    websocketonmessage(data) &#123;</span><br><span class="line">      <span class="comment">// this.heatBeat(); //收到消息会刷新心跳检测，如果一直收到消息，就推迟心跳发送</span></span><br><span class="line">      <span class="keyword">const</span> messageType = <span class="built_in">JSON</span>.parse(data.data).type;</span><br><span class="line">      <span class="keyword">if</span> (messageType == <span class="string">"flush_user_message"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">"SET_USERMESSAGESTATUS"</span>, <span class="string">"true"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="comment">//数据接收</span></span><br><span class="line">    websocketsend(data) &#123;</span><br><span class="line">      <span class="keyword">this</span>.websock.send(</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          type: <span class="string">"add_browse_record"</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">            pageName: <span class="keyword">this</span>.GLOBAL.pageName,</span><br><span class="line">            futuresName: <span class="keyword">this</span>.GLOBAL.futuresName,</span><br><span class="line">            enterTime: <span class="keyword">this</span>.GLOBAL.enterTime,</span><br><span class="line">            leaveTime: <span class="keyword">this</span>.GLOBAL.leaveTime</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;,  <span class="comment">//数据发送</span></span><br><span class="line">   </span><br><span class="line">    reconnect() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.lockReconnect || !<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">        <span class="comment">//这里很关键，因为连接失败之后之后会相继触发 连接关闭，不然会连接上两个 WebSocket</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.lockReconnect = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.reconnectData &amp;&amp; clearTimeout(<span class="keyword">this</span>.reconnectData);</span><br><span class="line">      <span class="keyword">this</span>.reconnectData = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.initWebSocket();</span><br><span class="line">        <span class="keyword">this</span>.lockReconnect = <span class="literal">false</span>;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="comment">//socket重连</span></span><br><span class="line">    heatBeat() &#123;</span><br><span class="line">      <span class="keyword">this</span>.timeoutObj &amp;&amp; clearTimeout(<span class="keyword">this</span>.timeoutObj);</span><br><span class="line">      <span class="keyword">this</span>.serverTimeoutObj &amp;&amp; clearTimeout(<span class="keyword">this</span>.serverTimeoutObj);</span><br><span class="line">      <span class="keyword">this</span>.timeoutObj = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this.websocketsend(&#123;</span></span><br><span class="line">        <span class="comment">//   type: "add_browse_record",</span></span><br><span class="line">        <span class="comment">//   data: this.socketData</span></span><br><span class="line">        <span class="comment">// &#125;); //根据后台要求发送</span></span><br><span class="line">        <span class="keyword">this</span>.serverTimeoutObj = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.websock.close(); <span class="comment">//如果  5秒之后我们没有收到 后台返回的心跳检测数据 断开socket，断开后会启动重连机制</span></span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">      &#125;, <span class="keyword">this</span>.timeout);</span><br><span class="line">    &#125;,</span><br><span class="line">    fetchData() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log;</span><br><span class="line">        <span class="keyword">this</span>.websocketsend(&#123;</span><br><span class="line">          type: <span class="string">"add_browse_record"</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">            pageName: <span class="keyword">this</span>.GLOBAL.pageName,</span><br><span class="line">            futuresName: <span class="keyword">this</span>.GLOBAL.futuresName,</span><br><span class="line">            enterTime: <span class="keyword">this</span>.GLOBAL.enterTime,</span><br><span class="line">            leaveTime: <span class="keyword">this</span>.GLOBAL.leaveTime</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.userId) &#123; <span class="comment">//如果是登陆状态再触发websocket</span></span><br><span class="line">      <span class="keyword">this</span>.initWebSocket();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (to.path == <span class="string">"/"</span> &amp;&amp; <span class="keyword">from</span>.path == <span class="string">"/login"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.initWebSocket();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    <span class="keyword">this</span>.lockReconnect = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// this.websock.close(); //离开路由之后断开websocket连接</span></span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.reconnectData); <span class="comment">//离开清除 timeout</span></span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.timeoutObj); <span class="comment">//离开清除 timeout</span></span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.serverTimeoutObj); <span class="comment">//离开清除 timeout</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;什么是websocket&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。&lt;/p&gt;
&lt;p&gt;WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。
      
    
    </summary>
    
    
      <category term="vue，websocket" scheme="http://zlstory.com/tags/vue%EF%BC%8Cwebsocket/"/>
    
  </entry>
  
  <entry>
    <title> Vue组件中eventBus使用</title>
    <link href="http://zlstory.com/2019/09/17/eventBus/"/>
    <id>http://zlstory.com/2019/09/17/eventBus/</id>
    <published>2019-09-16T16:00:00.000Z</published>
    <updated>2019-11-21T03:48:36.631Z</updated>
    
    <content type="html"><![CDATA[<p>作用：在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p><p>实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建 bus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sender</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">"@/utils/bus.js"</span>;</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    Bus.$emit(<span class="string">"getChannleMsg"</span>, msg);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Receiver</span></span><br><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">"@/utils/bus.js"</span>;</span><br><span class="line">  created() &#123;</span><br><span class="line">    Bus.$off(<span class="string">"getChannleMsg"</span>);</span><br><span class="line">    Bus.$on(<span class="string">"getChannleMsg"</span>, <span class="keyword">this</span>.getMsg);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods:&#123;</span><br><span class="line">    getMsg(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data = val;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用：在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。&lt;/p&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;c
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中父子组件传值的几种方式</title>
    <link href="http://zlstory.com/2019/07/21/vue-parent-child/"/>
    <id>http://zlstory.com/2019/07/21/vue-parent-child/</id>
    <published>2019-07-20T16:00:00.000Z</published>
    <updated>2019-11-22T09:29:05.258Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vuex的学习总结</title>
    <link href="http://zlstory.com/2019/05/20/vuex/"/>
    <id>http://zlstory.com/2019/05/20/vuex/</id>
    <published>2019-05-19T16:00:00.000Z</published>
    <updated>2019-10-28T13:42:51.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是vuex"><a href="#什么是vuex" class="headerlink" title="什么是vuex"></a>什么是vuex</h2><p> vuex：专门为vue.js应用程序开发的状态管理模式</p><h2 id="为什么用vuex"><a href="#为什么用vuex" class="headerlink" title="为什么用vuex"></a>为什么用vuex</h2><p> 当我们构建一个中大型的单页面应用程序时，vuex可以更好的帮助我们在组建外部统一管理状态</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="state-必须"><a href="#state-必须" class="headerlink" title="state(必须)"></a>state(必须)</h3><ol><li><p>state是唯一的数据源</p></li><li><p>单一状态树，即没有层级</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p> 通过getters可以基于state派生出一些新的状态</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        todos:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">"111"</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">"222"</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        doneTodos: <span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mutations-必须"><a href="#mutations-必须" class="headerlink" title="mutations(必须)"></a>mutations(必须)</h3><p>更改vuex的store中状态唯一的方法就是提交mutation</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        count:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123; <span class="comment">//唯一的方法去改变</span></span><br><span class="line">        increment(state)&#123;</span><br><span class="line">            state.count ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用increment方法</span></span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">"increment"</span>)</span><br></pre></td></tr></table></figure><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>action提交的是mutation，而不是直接变更状态</p><p>action可以包含任意异步操作</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        count:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123; <span class="comment">//只能进行同步操作</span></span><br><span class="line">        increment(state)&#123;</span><br><span class="line">            state.count ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        increment(context)&#123; <span class="comment">//可以执行异步操作</span></span><br><span class="line">            context.commit(<span class="string">"increment"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>面对复杂的应用程序，当管理的状态比较多的时候，我们需要将vuex的store对象分割成模块（modules）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state : &#123; ... &#125;,</span><br><span class="line">    mutation : &#123; ... &#125;,</span><br><span class="line">    actions : &#123; ... &#125;,</span><br><span class="line">    getters : &#123; ... &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    state : &#123; ... &#125;,</span><br><span class="line">    mutation : &#123; ... &#125;,</span><br><span class="line">    actions : &#123; ... &#125;,</span><br><span class="line">    getters : &#123; ... &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        a:moduleA,</span><br><span class="line">        b:moduleB </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是vuex&quot;&gt;&lt;a href=&quot;#什么是vuex&quot; class=&quot;headerlink&quot; title=&quot;什么是vuex&quot;&gt;&lt;/a&gt;什么是vuex&lt;/h2&gt;&lt;p&gt; vuex：专门为vue.js应用程序开发的状态管理模式&lt;/p&gt;
&lt;h2 id=&quot;为什么用vuex&quot;
      
    
    </summary>
    
    
      <category term="vue，vuex" scheme="http://zlstory.com/tags/vue%EF%BC%8Cvuex/"/>
    
  </entry>
  
  <entry>
    <title>mintLogin</title>
    <link href="http://zlstory.com/2019/04/26/mint-ui-login/"/>
    <id>http://zlstory.com/2019/04/26/mint-ui-login/</id>
    <published>2019-04-25T16:00:00.000Z</published>
    <updated>2019-11-21T06:14:06.801Z</updated>
    
    <content type="html"><![CDATA[<p> 使用vue+axios+vuex+mint-ui从0开始实现一个用户登录功能</p><h3 id="安装所有环境"><a href="#安装所有环境" class="headerlink" title="安装所有环境"></a>安装所有环境</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">vue init webpack login</span><br><span class="line"></span><br><span class="line">cd login</span><br><span class="line"></span><br><span class="line">npm i mint-ui -S</span><br><span class="line"></span><br><span class="line">npm install axios</span><br><span class="line"></span><br><span class="line">npm install vuex --save</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>使用sass</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm install node-sass  sass-loader --save-dev</span><br></pre></td></tr></table></figure><p>使用vee-validate</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install vee-validate --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VeeValidate <span class="keyword">from</span> <span class="string">'vee-validate'</span>;</span><br><span class="line">Vue.use(VeeValidate);</span><br></pre></td></tr></table></figure><h3 id="使用mint-ui"><a href="#使用mint-ui" class="headerlink" title="使用mint-ui"></a>使用mint-ui</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> MintUI <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'mint-ui/lib/style.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(MintUI)</span><br></pre></td></tr></table></figure><h3 id="页面逻辑"><a href="#页面逻辑" class="headerlink" title="页面逻辑"></a>页面逻辑</h3><ol><li>components新建login.vue搭一个简单的登录、注册、忘记密码页面,并设置好路由</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">   &#123;</span><br><span class="line">     path: <span class="string">'/'</span>,</span><br><span class="line">     name: <span class="string">'Login'</span>,</span><br><span class="line">     component: Login</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><ol start="2"><li>封装axios</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Indicator &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span>;</span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service=axios.create(&#123;</span><br><span class="line">  <span class="comment">//baseURL:'',</span></span><br><span class="line">  timeout:<span class="number">100000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    Indicator.open();</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * status为非0是抛错 可结合自己业务进行修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Indicator.close();</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line">    <span class="keyword">if</span> (res.status !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 6:身份过期;</span></span><br><span class="line">      <span class="keyword">if</span> (res.status === <span class="number">6</span>) &#123;</span><br><span class="line">        MessageBox(&#123;</span><br><span class="line">          title: <span class="string">'提示'</span>,</span><br><span class="line">          message: <span class="string">'你已被登出,重新登录?'</span>,</span><br><span class="line">          showCancelButton: <span class="literal">true</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'LogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 为了重新实例化vue-router对象 避免bug</span></span><br><span class="line">            location.reload()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast(&#123;</span><br><span class="line">          message: res.msg,</span><br><span class="line">          iconClass: <span class="string">'icon icon-error'</span>,</span><br><span class="line">          duration: <span class="number">5</span>*<span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> response.data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    Toast(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      iconClass: <span class="string">'icon icon-success'</span>,</span><br><span class="line">      duration: <span class="number">5</span>*<span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>使用axios,新建login.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">  formData.append(<span class="string">'username'</span>, username);</span><br><span class="line">  formData.append(<span class="string">'password'</span>, password);</span><br><span class="line">  <span class="comment">//登录请求</span></span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/user/login'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    headers:&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;,</span><br><span class="line">    data: Qs.stringify(&#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sendVerifyCode</span>(<span class="params">type, phone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/smsVerify'</span>,</span><br><span class="line">    method: <span class="string">"post"</span>,</span><br><span class="line">    data: Qs.stringify(&#123;</span><br><span class="line">      smsType: type,</span><br><span class="line">      mobile: phone</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">username,password,vCode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">"/api/register"</span>,</span><br><span class="line">    method:<span class="string">"post"</span>,</span><br><span class="line">    data:Qs.stringify(&#123;</span><br><span class="line">      username:username,</span><br><span class="line">      password:password,</span><br><span class="line">      vCode:vCode</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的/api是在webpack的config/index.js中的proxyTable配置好的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">     <span class="string">'/api'</span>: &#123;</span><br><span class="line">       target: <span class="string">'http://xxx.xxx.xx'</span>,</span><br><span class="line">       changeOrigin: <span class="literal">true</span>,</span><br><span class="line">       pathRewrite: &#123;</span><br><span class="line">         <span class="string">'^/api'</span>: <span class="string">'/api'</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vuex</li></ol><p>新建store文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── service</span><br><span class="line">│   └── ...               # 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── getter.js        # 根级别的 action</span><br><span class="line">    └── modules</span><br><span class="line">        └── user.js      # 登录模块</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  login,</span><br><span class="line">  logout</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@/api/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_USERINFO_DATA(state, userInfo) &#123;</span><br><span class="line">      <span class="comment">//在登录时需要存储的信息</span></span><br><span class="line">      state.userInfo = userInfo</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    Login(&#123;</span><br><span class="line">      commit</span><br><span class="line">    &#125;, userInfo) &#123;</span><br><span class="line">      <span class="keyword">const</span> username = userInfo.username.trim()</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        login(username, userInfo.password).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> data = response.data</span><br><span class="line">          commit (<span class="string">"SET_USERINFO_DATA"</span>,data);</span><br><span class="line">          <span class="built_in">window</span>.localStorage.setItem(<span class="string">'user'</span>, <span class="built_in">JSON</span>.stringify(user.state));</span><br><span class="line">          resolve(response)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line"><span class="keyword">const</span> getters=&#123;</span><br><span class="line">  userInfo:<span class="function"><span class="params">state</span>=&gt;</span>state.user.userInfo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br><span class="line"><span class="comment">//index</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    user</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol start="4"><li>在页面中调用方法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  loginSubmit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$validator.validateAll(<span class="string">"login"</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.dispatch(<span class="string">'Login'</span>, <span class="keyword">this</span>.userLogin).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">                    path: <span class="keyword">this</span>.redirect || <span class="string">'/'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">          <span class="built_in">window</span>.localStorage.setItem(<span class="string">"userPhone"</span>,<span class="keyword">this</span>.userLogin.username)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>进行路由拦截</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//白名单路由</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>, <span class="string">'/forgetPsd'</span>, <span class="string">"/"</span>]</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//需要登录</span></span><br><span class="line">  <span class="keyword">let</span> userInfoId = store.getters.userInfo;</span><br><span class="line">  <span class="comment">// console.log(userInfoId)</span></span><br><span class="line">  <span class="comment">//需要登录</span></span><br><span class="line">  <span class="keyword">if</span> (userInfoId === <span class="literal">null</span> ||userInfoId===<span class="string">''</span>|| <span class="keyword">typeof</span> userInfoId === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(whiteList.indexOf(to.path)!==<span class="number">-1</span>)&#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 使用vue+axios+vuex+mint-ui从0开始实现一个用户登录功能&lt;/p&gt;
&lt;h3 id=&quot;安装所有环境&quot;&gt;&lt;a href=&quot;#安装所有环境&quot; class=&quot;headerlink&quot; title=&quot;安装所有环境&quot;&gt;&lt;/a&gt;安装所有环境&lt;/h3&gt;&lt;figure cl
      
    
    </summary>
    
    
      <category term="vue mint-ui" scheme="http://zlstory.com/tags/vue-mint-ui/"/>
    
  </entry>
  
  <entry>
    <title>vue的知识点</title>
    <link href="http://zlstory.com/2019/04/12/vueTheory/"/>
    <id>http://zlstory.com/2019/04/12/vueTheory/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-11-22T08:25:30.340Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>nextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。</p></li><li><p>生命周期函数就是组件在初始化或者数据更新时会触发的钩子函数。</p></li></ol><p>主要注意的几点：</p><p>a. beforeCreate调用的时候，是获取不到props或者data中的数据。</p><p>b. beforeMount是在挂载前执行的，然后开始创建VDOM并替换成真实DOM，最后执行mounted钩子。</p><p>c. activated和deactivated 是keep-alive组件独有的。</p><p>d. 在执行销毁操作前调用beforeDestory钩子函数，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕之后才会执行根组件的destroyed钩子函数</p><ol start="3"><li>computed和watch的区别与使用场景</li></ol><p>区别：</p><pre><code>watch：监听属性的变化；需要在数据变化时执行异步或者开销较大的操作时使用；computed：通过属性计算儿的来的属性;值有缓存；需要用return来返回最终结果。</code></pre><p>场景：</p><p>   computed：当一个属性收到多个属性影响的时候</p><p>   watch：当一条数据影响多条数据的时候 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;nextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生命周期函数就是组件在初始化或者数据更新时会触发的钩子函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要注意的几点：&lt;/
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title> 模块化</title>
    <link href="http://zlstory.com/2019/03/13/concepts/"/>
    <id>http://zlstory.com/2019/03/13/concepts/</id>
    <published>2019-03-12T16:00:00.000Z</published>
    <updated>2019-11-21T03:26:35.472Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么需要模块化："><a href="#为什么需要模块化：" class="headerlink" title="为什么需要模块化："></a>为什么需要模块化：</h4><p>首先前端复杂程度有限，没有模块也会死可以的。但是 2009 年出现 node.js，将 JavaScript 语言用于服务端编程，在服务端一定要有模块来与操作系统和其他应用程序互动，node 编程中的核心思想就是模块，由此模块化编程在 js 中流行。</p><h4 id="模块化分类"><a href="#模块化分类" class="headerlink" title="模块化分类"></a>模块化分类</h4><p>在 es6 以前，通用的 JavaScript 模块规范有两种：CommonJS 和 AMD</p><ol><li>CommonJS 规范（服务端模块）</li></ol><p>代表：requireJS、seaJS</p><p>加载模块：require()</p><p>暴露模块：module.exports 和 exports</p><p>如使用 math.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">"math"</span>);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">math.add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>commonJS 是用于服务端编程，所有的模块都放在本地硬盘中，可以同步加载完成，等待的时间就是硬盘读取的时间。</p><ol start="2"><li>AMD 规范（客户端模块）</li></ol><p>因为模块放在服务端，commonJS 不支持异步操作，所以并不适用于浏览器环境。所以出现了 AMD 规范：异步模块定义。</p><p>代表：require.js和curl.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公式</span></span><br><span class="line">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure><p>定义模块：define()</p><p>载入模块：dependencies(数组格式)</p><p>工厂方法：factory(返回模块函数)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不依赖其他模块：直接定义</span></span><br><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>（）</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add:add</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖其他模块：define()第一个参数为数组格式，指定所需模块</span></span><br><span class="line">define([<span class="string">'Lib'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">lib</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Lib.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo:foo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用require加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"math"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</span><br><span class="line">    math.add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>CMD规范（客户端模块）</li></ol><p>代表：seajs</p><p>特点：依赖就近</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公式</span></span><br><span class="line">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure><p>定义模块：define()</p><p>载入模块：dependencies(数组格式)</p><p>工厂方法：factory(返回模块函数)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>AMD与CMD的异同</p><p>异：对依赖模块的执行时机处理不同</p><p>AMD依赖前置，js可以知道模块是谁，立即加载；CMD就近依赖，需要把模块转换成字符串再解析一边才知道依赖哪些模块。</p><p>同：都是异步加载模块</p></li></ol><ol start="5"><li>module（ES6发布之后）</li></ol><p>引入模块：import</p><p>导出模块：export</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;为什么需要模块化：&quot;&gt;&lt;a href=&quot;#为什么需要模块化：&quot; class=&quot;headerlink&quot; title=&quot;为什么需要模块化：&quot;&gt;&lt;/a&gt;为什么需要模块化：&lt;/h4&gt;&lt;p&gt;首先前端复杂程度有限，没有模块也会死可以的。但是 2009 年出现 node.js，
      
    
    </summary>
    
    
      <category term="理论" scheme="http://zlstory.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用element-ui搭建后台管理系统问题汇总</title>
    <link href="http://zlstory.com/2019/02/20/vue-manage-tips/"/>
    <id>http://zlstory.com/2019/02/20/vue-manage-tips/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-02-20T06:58:12.066Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间插件"><a href="#时间插件" class="headerlink" title="时间插件"></a>时间插件</h4><ol><li>两个输入框，限制结束日期不能大于开始日期</li></ol><p>注意此时input框中不能使用value-format，这会使日期变成字符串从而不能比较大小<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-date-picker</span></span><br><span class="line"><span class="regexp">    type="date"</span></span><br><span class="line"><span class="regexp">    placeholder="结束日期"</span></span><br><span class="line"><span class="regexp">    v-model="dayEndTime"</span></span><br><span class="line"><span class="regexp">    :picker-options="pickerOptions1"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-date-picker&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        pickerOptions0: &#123;</span><br><span class="line">          disabledDate: <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.dayEndTime != <span class="string">""</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now() || time.getTime() &gt; <span class="keyword">this</span>.dayEndTime;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        pickerOptions1: &#123;</span><br><span class="line">          disabledDate: <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> time.getTime() &lt; <span class="keyword">this</span>.dayStartTime || time.getTime() &gt; <span class="built_in">Date</span>.now();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        dayStartTime: <span class="string">''</span>,</span><br><span class="line">        dayEndTime:<span class="string">''</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其他的时间限制：<a href="http://www.cnblogs.com/xjcjcsy/p/7977966.html" target="_blank" rel="noopener">更多限制</a></p><ol start="2"><li>获取到的日期与选中的日期相隔一天</li></ol><p>一般情况下使用value-format即可解决这个问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    value-format=<span class="string">"yyyy-MM-dd"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br></pre></td></tr></table></figure><p>但是在比较大小的时候不能使用value-format，所以使用change事件获取到值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;el-date-picker</span><br><span class="line">    type=<span class="string">"date"</span></span><br><span class="line">    placeholder=<span class="string">"开始日期"</span></span><br><span class="line">    v-model=<span class="string">"dayStartTime"</span></span><br><span class="line">    @change=<span class="string">"getStartTime"</span></span><br><span class="line">    :picker-options=<span class="string">"pickerOptions0"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">methods: &#123;</span></span><br><span class="line"><span class="regexp">      getStartTime(time)&#123;</span></span><br><span class="line"><span class="regexp">        this.dayStartTime = time</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="通过id跳转到不同的详情页"><a href="#通过id跳转到不同的详情页" class="headerlink" title="通过id跳转到不同的详情页"></a>通过id跳转到不同的详情页</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">const</span> dataID=<span class="keyword">this</span>.$route.query.id</span><br><span class="line">    request(&#123;</span><br><span class="line">        method:<span class="string">'get'</span>,</span><br><span class="line">        url:<span class="string">`/web/admin/downstream/merchantList/<span class="subst">$&#123;dataID&#125;</span>`</span></span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = res.data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="背景图片打包后找不到路径问题"><a href="#背景图片打包后找不到路径问题" class="headerlink" title="背景图片打包后找不到路径问题"></a>背景图片打包后找不到路径问题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style lang=<span class="string">"stylus"</span> scoped&gt;</span><br><span class="line">.bg</span><br><span class="line">  background url(<span class="string">"~@/assets/psdBg.png"</span>) no-repeat</span><br><span class="line">  background-size <span class="number">100</span>% <span class="number">100</span>%</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 在build/u</span>tils.js</span><br><span class="line">   <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">      <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        publicPath:<span class="string">'../../'</span>,   <span class="comment">//添加此行</span></span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;时间插件&quot;&gt;&lt;a href=&quot;#时间插件&quot; class=&quot;headerlink&quot; title=&quot;时间插件&quot;&gt;&lt;/a&gt;时间插件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;两个输入框，限制结束日期不能大于开始日期&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意此时input框中不能使用value-
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>面试题汇总</title>
    <link href="http://zlstory.com/2018/12/26/interviewQuestion/"/>
    <id>http://zlstory.com/2018/12/26/interviewQuestion/</id>
    <published>2018-12-25T16:00:00.000Z</published>
    <updated>2019-11-21T03:18:50.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html-篇"><a href="#html-篇" class="headerlink" title="html 篇"></a>html 篇</h3><ol><li><p>HTML 标签的语义化：通过使用包含语义的标签（如 h1-h6）恰当地表示文档结构</p></li><li><p>css 命名的语义化是指：为 html 标签添加有意义的 class</p></li><li><p>Doctype 作用？标准模式与兼容模式各有什么区别?</p><p>a. &lt;!DOCTYPE&gt;声明位于位于 HTML 文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE 不存在或格式不正确会导致文档以兼容模式呈现</html></p><p>b.标准模式的排版 和 JS 运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作</p></li></ol><h3 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h3><ol><li>使以下代码正常运行<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a.multiply()</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1,2,3,4,5,1,4,9,16,25</span></span><br></pre></td></tr></table></figure></li></ol><p>答案为<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.multiply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            arr1 = arr[i] * arr[i];</span><br><span class="line">        &#125;)()</span><br><span class="line">        arr.push(arr1)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.multiply());<span class="comment">//1, 2, 3, 4, 5, 1, 4, 9, 16, 25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.multiply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.forEach( <span class="function">(<span class="params">item,index,arr</span>) =&gt;</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.push(arr[index] ** <span class="number">2</span>) </span><br><span class="line">        &#125;) </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] </span><br><span class="line">    a.multiply() </span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//[1, 2, 3, 4, 5, 1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>为什么在js中<code>0.2+0.1 == 0.3</code>返回false？</li></ol><p>回答：在js进行数字运算时，会有<strong>精度缺失</strong>的问题，简单的来说，由于0.1转换成二进制时是无限循环的，所以在计算机中只能存储一个近似值，0.1与0.2都是取得近似值，所以返回的是false。但是这并非绝对，有时两个近似值在进行计算的时候，得到的值在js的近似范围内，就可以返回true。</p><p>规避方法：为了避免小数计算的精度问题，最常用的方式是将浮点数转化成整数去进行计算。</p><ol start="3"><li>JavaScript 中有哪些不同的数据类型？</li></ol><p>回答： 有两种：主要数据类型和引用类型（也称原始类型和对象类型）</p><p>主要数据类型为：Number（数字）、String（字符串） 、Boolean（布尔值）、Null（空）和Undefined（未定义）<br>引用类型为： Object（对象）</p><ol start="4"><li>使用proxy实现数据绑定</li></ol><p>答：proxy可以理解为在目标对象之前设置一层”拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写</p><ol start="5"><li><p>new 关键字在 JavaScript 中有什么作用？</p><p>a.声明一个中间对象</p><p>b.将该中间对象的 proto 指向构造函数的原型</p><p>c.将构造函数的 this 通过 apply 指向中间对象</p><p>d.返回该中间对象,也就是返回了实例对象</p></li><li><p>解释单向数据流和双向数据绑定。</p><p>a. 单向数据绑定:指的是我们先把模板写好，然后把模板和数据（数据可能来自后台）整合到一起形成 HTML 代码，然后把这段 HTML 代码插入到文档流里面。 单向数据绑定缺点：HTML 代码一旦生成完以后，就没有办法再变了，如果有新的数据来了，那就必须把之前的 HTML 代码去掉，再重新把新的数据和模板一起整合后插入到文档流中。 简单的来说就是 DOM 操作直接改变</p><p>b.数据模型（Module）和视图（View）之间的双向绑定。 用户在视图上的修改会自动同步到数据模型中去，同样的，如果数据模型中的值发生了变化，也会立刻同步到视图中去。</p></li><li><p>解释 JavaScript 并发模型</p><p>JavaScript 是单线程的，这意味着在任何时候只能有一段代码执行。JavaScript 主线程在运行时，会建立一个执行同步代码的栈和执行异步代码的队列.JavaScript 主线程在执行时，如果遇到异步的代码，就会将这些代码加入到异步队列中，然后继续执行同步代码栈中的代码。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;html-篇&quot;&gt;&lt;a href=&quot;#html-篇&quot; class=&quot;headerlink&quot; title=&quot;html 篇&quot;&gt;&lt;/a&gt;html 篇&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;HTML 标签的语义化：通过使用包含语义的标签（如 h1-h6）恰当地表示文档结构&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="面试" scheme="http://zlstory.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>重装系统之后的一系列操作</title>
    <link href="http://zlstory.com/2018/11/19/environment/"/>
    <id>http://zlstory.com/2018/11/19/environment/</id>
    <published>2018-11-18T16:00:00.000Z</published>
    <updated>2018-11-19T07:54:26.923Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node环境</a></h5><h5 id="安装git环境"><a href="#安装git环境" class="headerlink" title="安装git环境"></a>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git环境</a></h5><p> 下载安装之后，执行以下命令<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;zlstory&quot;</span><br><span class="line"></span><br><span class="line">$ git config --global user.email &quot;13968106594@163.com&quot;</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;13968106594@163.com&quot;</span><br></pre></td></tr></table></figure></p><p> 创建ssh密钥之后，将github中setting中的SSH and GPG keys新增。title随便填，下面的把刚才生成的id_rsa.pub（目录：C:\Users\Crystal.ssh）用记事本打开把内容贴进去。</p><h5 id="安装hexo环境"><a href="#安装hexo环境" class="headerlink" title="安装hexo环境"></a>安装hexo环境</h5> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C &quot;13968106594@163.com&quot;</span><br></pre></td></tr></table></figure><p> 将之前保存的hexo压缩包解压之后，直接<code>npm install</code>即可本地预览。</p><h5 id="host文件地址"><a href="#host文件地址" class="headerlink" title="host文件地址"></a>host文件地址</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;安装node环境&quot;&gt;&lt;a href=&quot;#安装node环境&quot; class=&quot;headerlink&quot; title=&quot;安装node环境&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://nodejs.org/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="environment" scheme="http://zlstory.com/tags/environment/"/>
    
  </entry>
  
  <entry>
    <title>VUE去哪儿网学习笔记3</title>
    <link href="http://zlstory.com/2018/11/06/vue-note4/"/>
    <id>http://zlstory.com/2018/11/06/vue-note4/</id>
    <published>2018-11-05T16:00:00.000Z</published>
    <updated>2018-11-06T00:01:15.492Z</updated>
    
    <content type="html"><![CDATA[<p>进行项目实战环节</p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><ol><li><p>安装node webpack github等环境</p></li><li><p>全局安装脚手架vue-cli</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure></li><li><p>使用vue-cli构建项目</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack travel</span><br></pre></td></tr></table></figure></li></ol><p>之后会出现一系列的问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Project name y</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author zlstory &lt;13968106594@163.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? No</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (recommended) npm</span><br></pre></td></tr></table></figure></p><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><ol><li><p>路由<br>路由就是根据网址不同，返回不同的内容给用户</p></li><li><p>@符号表示src目录下</p></li><li><p>路由的配置文件放在router文件夹下的index.js中</p></li><li><p>多页应用：页面之间的跳转，返回的是html，优点是首屏时间快，seo效果好。缺点是：页面之间切换慢。</p><p>单页应用：页面跳转并不是跳转到另一个html，而是通过js删除本页面的dom，加载新的dom。优点是页面切换快，缺点是首屏时间稍慢，seo差。</p></li></ol><h1 id="禁用eslint"><a href="#禁用eslint" class="headerlink" title="禁用eslint"></a>禁用eslint</h1><p>在webpack.base.conf.js注释代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createLintingRule = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">  loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">  enforce: <span class="string">'pre'</span>,</span><br><span class="line">  include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)],</span><br><span class="line">  options: &#123;</span><br><span class="line">    formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>),</span><br><span class="line">    emitWarning: !config.dev.showEslintErrorsInOverlay</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>或者在index.js中：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEslint: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure></p><h1 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h1><ol><li><p>改变meta标签，使其适配于移动端</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用reset.css清除浏览器默认样式。在assets文件夹中放入静态资源。在main.js中import进去。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import './assets/styles/reset.css'</span><br></pre></td></tr></table></figure></li><li><p>为了解决1像素问题，引入文件：border.css</p></li><li><p>解决移动端点击延迟问题：引入fastclick.js<br>使用<code>npm install fastclick --save</code><br>在mian.js中引入并使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line">fastClick.attach(<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure></li><li><p>在index.js中配置页面路由</p><p>src目录下新建pages文件夹，在index.js中按需引入</p></li><li><p>在项目中使用stylus：<code>npm install stylus --save</code>、<code>npm install stylus-loader --save</code>。<br> 然后在style中定义<code>lang=stylus</code>即可</p></li></ol><ol start="7"><li><p>在pages/home的文件夹中新建components文件夹，放入Header.vue。是home顶部的组件，然后在Home.vue中使用Header.vue:先引入再注册后使用(注意大小写问题)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;home-header&gt;<span class="xml"><span class="tag">&lt;/<span class="name">home-header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> HomeHeader <span class="keyword">from</span> <span class="string">'./components/Header'</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      components:&#123;</span><br><span class="line">          HomeHeader</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>开发HomeHeader组件。<br> 使用rem布局：在reset.css中定义html为50px，所以header本来为43px的高度，则为0.86rem</p></li><li><p>使用iconfont，在main.js中import入iconfont.css(因为多个页面都需要引入iconfont)</p></li><li><p>为主题颜色写一个公用的css：varibles.styl 为css主题色定义变量，在所需页面中引入即可，方便以后改变主题颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在varibles.styl */</span></span><br><span class="line">$bgColor = #00bcd4</span><br><span class="line">$darkTextColor = #333</span><br><span class="line">$headerHeight = .86rem</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在所需页面中先引入再使用 */</span></span><br><span class="line">&lt;style lang="stylus" scoped&gt;</span><br><span class="line">    @<span class="keyword">import</span> <span class="string">'../../../assets/styles/varibles'</span></span><br><span class="line">    .header</span><br><span class="line">        display flex</span><br><span class="line">        height <span class="number">0.86rem</span></span><br><span class="line">        line-height <span class="number">0.86rem</span></span><br><span class="line">        color #fff</span><br><span class="line">        background $bgColor</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><p>由于上面的路径太长了，所以我们可以使用@符号(代表src目录)，需要注意的是在css中引入其他的css，想用@符号时，需在@符号或者别名前面加一个~<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'~@/assets/styles/varibles'</span></span><br></pre></td></tr></table></figure></p><p>也可以自定义一个别名来代表assets的styles目录,在webpack.base.conf.js中进行配置<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">   alias: &#123;</span><br><span class="line">     <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">     <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">     <span class="string">'styles'</span>: resolve(<span class="string">'src/assets/styles'</span>),</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ol start="11"><li>使用插件进行首页轮播图的开发：github上搜索：vue-awesome-swiper<br>先安装再看文档后使用(全局使用)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-awesome-swiper@2.6.7 --save</span><br></pre></td></tr></table></figure></li></ol><p>遇见的坑：在import中引入时出现找不到该模块的声明文件。</p><ol start="12"><li><p>新建swiper.vue进行开发</p><p>优化：当网速较慢，图片未加载完成的时候，页面会有抖动。解决办法：swiper外层加一个div.wrapper。再使用css：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrapper</span><br><span class="line">    overflow hidden</span><br><span class="line">    width 100%</span><br><span class="line">    height 0</span><br><span class="line">    padding-bottom 26.67%</span><br><span class="line">or</span><br><span class="line"> .wrapper</span><br><span class="line">    overflow hidden</span><br><span class="line">    height 26.67vw</span><br></pre></td></tr></table></figure><p>数值是轮播图片的高除以宽得到的</p></li><li><p>改变swiper的pagination默认样式：&gt;&gt;&gt; 样式穿透  为了不受scoped的限制</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &gt;&gt;&gt; <span class="selector-class">.swiper-pagination-bullet-active</span>&#123;</span><br><span class="line">    background #ffffff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为了使icons能够左右滑动，需要借用computed来计算icon是否需要第二页显示。直接在computed中计算就好。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    pages() &#123;</span><br><span class="line">        <span class="keyword">const</span> pages = []</span><br><span class="line">        <span class="keyword">this</span>.iconList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> page = <span class="built_in">Math</span>.floor(index / <span class="number">8</span>) <span class="comment">//看数据到底展示在哪一页,从0开始</span></span><br><span class="line">            <span class="keyword">if</span> (!pages[page]) &#123; <span class="comment">//如果不存在(一开始的情况)</span></span><br><span class="line">                pages[page] = []</span><br><span class="line">            &#125;</span><br><span class="line">            pages[page].push(item)<span class="comment">//将item放入pages中</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> pages</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这段代码是为了将data中的iconlists拆分成两个数组。使用vue.js devTools插件可以看得更加清楚<br>然后在template中循环pages相关内容就完成了。</p><ol start="15"><li>使用minxin封装一个 内容太多显示…的css<br>在mixins.styl中<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ellipsis</span>()</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span></span><br><span class="line">  <span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span></span><br><span class="line">  <span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span></span><br></pre></td></tr></table></figure></li></ol><p>使用：先引入该文件 再在所需的样式表中<code>ellipsis()</code>即可</p><ol start="16"><li><p>在stylus中，通过@import引入的必须是.styl文件，.css文件在index.html中引入，否则报错</p></li><li><p>开发recommend模板以及weekend模板</p></li><li><p>由于很多子组件中都需要数据，需要发送ajax请求，而子组件都是显示在home.vue中，所以可以直接在home.vue中发送ajax请求。</p></li></ol><p>将json文件放在static文件夹中，因为在vue-cli生成的所有文件夹中只有static可以被外部(浏览器中输入路径)访问到。</p><ol start="19"><li>本地将所有模拟数据都是放在mock文件夹中的，所以axios的请求路径是’/static/mock/index.json’,但是线上版本应该是’/api/index.json’,当我们在本地模拟的时候与上线路径不一致，而在上线前改变代码也是一件非常危险的事情，所以我们需要使用vue代理将请求路径保持一致。</li></ol><p>打开config文件夹中的index.js(此功能由webpack-dev-server提供)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:8080'</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/api'</span>: <span class="string">'/static/mock'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更改配置文件之后，需要重新启动服务器。</p><ol start="20"><li><p>在home.vue中通过axios得到所有数据，现在需要通过父子组件传值来将数据传到各个子组件中</p></li><li><p>进行城市选择开发页面，需要配置index.js中的路由信息.</p><p>当我们在头部(home/header.vue)中点击城市选择的时候，会调到city组件，所以在header.vue的header-right部分使用router-link</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-right"</span>&gt;</span>&#123;&#123;this.city&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont arrow-icon"</span>&gt;</span>&amp;#xe64a;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="22"><li><p>开发city组件时，新建<code>page/city/city.vue</code>，然后开发<code>page/city/components/CityHeader.vue</code>。(较为简单无技巧)</p></li><li><p>开发city中的搜索框界面:当给input给左右内边距时，需要设置</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.search-input</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>控制页面上的1像素边框问题</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-topbottom</span></span><br><span class="line">   &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">       <span class="selector-tag">border-color</span> <span class="selector-id">#ccc</span></span><br><span class="line">   &amp;<span class="selector-pseudo">:after</span></span><br><span class="line">       <span class="selector-tag">border-color</span> <span class="selector-id">#ccc</span></span><br></pre></td></tr></table></figure></li><li><p>开始列表布局(复杂项)，新建list.vue<br>(1) 新建三个area，分别是当前城市，热门城市，以A开头的城市，完善布局之后，使用better-scroll</p></li></ol><p>(2) 安装better-scroll</p><pre><code>使用的时候首先要符合bs规定的dom结构(不一定是ul标签)</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- you can put some other DOMs here, it won't affect the scrolling --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>然后引入Bscroll,在页面挂载成功之后使用(wrapper是最外层dom的ref)</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的滚动完成</p><ol start="26"><li><p>开发左边字母表组件(alphabet.vue)</p></li><li><p>动态渲染city组件啦！<br>在city.vue组件中，使用axios.get获取城市列表，然后父子组件传值到city-list组件中。</p></li></ol><p>循环中再循环了解一下:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area"</span> <span class="attr">v-for</span>=<span class="string">"(item,key) of cities"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title border-topbottom"</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item border-bottom"</span> <span class="attr">v-for</span>=<span class="string">"innerItem of item"</span> <span class="attr">:key</span>=<span class="string">"innerItem.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;innerItem.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="28"><li><p>兄弟组件联动：点击右边字母表，左边滑动到对应的位置</p><p>思路：将alphabet.vue中的字母通过点击事件拿到对应的innerText，将其传值给兄弟组件list.vue(先将alphabet.vue中的值传递给父组件city.vue,再将数据从city.vue中传递给list.vue)</p><p>alphabet.vue:在字母表的item中绑定一个点击事件,向外触发事件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> handleLetterClick(e)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'change'</span>,e.target.innerText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>city.vue：监听子组件传递过来的change事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">city-alphabet</span> <span class="attr">:cities</span>=<span class="string">"cities"</span> @<span class="attr">change</span>=<span class="string">"handleLetterChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">city-alphabet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在methods中定义<code>handleLetterChange</code>事件,然后将letter传值给list.vue</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleLetterChange(letter) &#123;</span><br><span class="line">       <span class="comment">//拿到alphabet.vue中的字母值。</span></span><br><span class="line">       <span class="built_in">console</span>.log(letter)</span><br><span class="line">       <span class="keyword">this</span>.letter = letter</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当list.vue拿到点击的letter值时，思路：当letter改变时，我们需要找到对应字母的列表。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    letter: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line">watch: &#123;</span><br><span class="line">    letter() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.letter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过调用better-scroll提供的<code>scrollToElement()</code>方法控制左边列表滚动到对应的列表上面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"area"</span> <span class="attr">v-for</span>=<span class="string">"(item,key) of cities"</span> <span class="attr">:key</span>=<span class="string">"key"</span> <span class="attr">:ref</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title border-topbottom"</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item border-bottom"</span> <span class="attr">v-for</span>=<span class="string">"innerItem of item"</span> <span class="attr">:key</span>=<span class="string">"innerItem.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;innerItem.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    letter() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.letter) &#123;</span><br><span class="line">            <span class="keyword">const</span> element = <span class="keyword">this</span>.$refs[<span class="keyword">this</span>.letter][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">this</span>.scroll.scrollToElement(element,<span class="number">400</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>右侧字母表监听滚动事件<br>思路:获得字母A到顶部的距离，当滑动的时候获取手指距离顶部的高度，得到差值之后除以字母之间的高度。这样就知道当前是第几个字母了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touchStatus) &#123;</span><br><span class="line">        <span class="keyword">const</span> startY = <span class="keyword">this</span>.$refs[<span class="string">'A'</span>][<span class="number">0</span>].offsetTop</span><br><span class="line">        <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY - <span class="number">79</span></span><br><span class="line">        <span class="keyword">const</span> index = Math.floor((touchY - startY) / <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.letters.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.letters[index])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述写法是比较耗性能的，因为offsetTop一直在改变。所以使用updated钩子函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">       <span class="keyword">this</span>.startY = <span class="keyword">this</span>.$refs[<span class="string">'A'</span>][<span class="number">0</span>].offsetTop</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>再进行函数节流：延迟16毫秒去执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleTouchMove(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touchStatus) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.timer) &#123;</span><br><span class="line">            clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> touchY = e.touches[<span class="number">0</span>].clientY - <span class="number">79</span></span><br><span class="line">            <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor((touchY - <span class="keyword">this</span>.startY) / <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.letters.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.letters[index])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">16</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在城市选择的时候，点击搜索框，根据用户输入信息实时显示所匹配的信息。</p><p>首先通过父子组件之间传值获取到所有cities的数据，然后通过v-model的双向数据绑定去获取到用户的值，再与cities中的数据进行匹配</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>.cities) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cities[i].forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.spell.indexOf(<span class="keyword">this</span>.keyword) &gt; <span class="number">-1</span> || value.name.indexOf(<span class="keyword">this</span>.keyword) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            result.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.list = result</span><br></pre></td></tr></table></figure><ol start="31"><li><p>熟悉vuex</p><p>因为city.vue与home.vue之间是没有共同父组件的，如果要进行两个组件之间的通信的话，可以使用vue官方推荐的vuex(数据框架)</p><p>为什么需要vuex(设计理念)：</p><p>当我们的项目中有多个页面或者是多个组件之间进行复杂的数据传值很困难的时候，可以将公用的数据放在公共的存储空间去存储，当我们在某一个组件中改变数据的时候，其他组件就可以感知到数据的变化。</p><p>图解：<br>vuex由哪几部分组成：</p><p>state：存储公用数据，需要公用数据的时候，直接调用state就好了</p><pre><code>当我们需要改变数据的时候,我们不能用组件(Vue components)直接改变数据，需要走一个流程：    (1)如果有异步操作、复杂的同步操作、批量的同步操作，我们将异步操作放在actions中，    Vue components -&gt; Actions -&gt; Mutations -&gt; Satate    或者 Vue components -&gt; Mutations -&gt; Satate</code></pre></li><li><p>在项目中使用vuex<br>本应该在main.js中引入vuex的，但是为了更方便管理，我们将其放在新的位置<br>在src目录下新建store文件夹，在该文件夹下新建index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'北京'</span>  <span class="comment">//在city组件和home组件中关联起来的一个值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>然后在main.js中<code>import store from &#39;./store&#39;</code><br>并在根组件中注册store</p><ol start="33"><li>注册store之后，现在开始使用store中的数据</li></ol><p>home.vue中以前home-header组件中的city值是由外部传入进去的，现在我们并不需要后端传值给我们了，而是由前端存储的，所以删掉<code>:city = &quot;city&quot;</code>以及data中的city默认值</p><p>header.vue中之前关于接收city的props也可以删掉了，而使用<code></code>拿到我们刚刚在store中存储的值</p><ol start="34"><li><p>改变state：在城市选择的列表里，点击哪个城市，state值就为哪个城市。</p><p>在list.vue中给热门城市的item绑定一个handleCityClick事件，使用dispatch方法改变actions</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> methods: &#123;</span><br><span class="line">    handleCityClick(city) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p>又因为改变的actions，所以我们需要在刚刚的store/index中添加一个actions，并接收两个参数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeCity(ctx, city)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>actions又通过commit方法来调用mutations去改变公共数据，所以又需要新建一个mutations<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeCity(ctx, city)&#123;</span><br><span class="line">        ctx.commit(<span class="string">'changeCity'</span>,city)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">        state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>正常流程是以上步骤，但是由于本项目开发是没有异步数据也没有批量处理同步数据，所以我们可以不走actions这一步，那么做出的改变就是<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list.vue</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    handleCityClick(city) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    changeCity(state,city)&#123;</span><br><span class="line">        state.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在所需点击地方加入对应的方法即可。</p><ol start="35"><li><p>在点击对应的城市完毕时，返回首页内容(vue-router)，使用router.push</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> handleCityClick(city) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'changeCity'</span>, city)</span><br><span class="line">    <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vuex的高级使用以及localstorage</p></li></ol><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p><p>当我们选择城市时，在进行一次刷新操作，页面又变成了默认的城市，所以我们需要用localstorage去存储数据，这样子我们下一次进入该网站时也是上一次选择的城市。</p><p>需要改变index.js中的内容(比较简单),直接使用localstorage就可以了<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: localStorage.city || <span class="string">'杭州'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      localStorage.city = city</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当某一些用户使用隐身模式或者禁用了本地存储功能，为了使代码正常运行，我们需要在所有localstorage外层包裹一层try catch<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">'上海'</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.city) &#123;</span><br><span class="line">    defaultCity = localStorage.city</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeCity(state, city) &#123;</span><br><span class="line">      state.city = city</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        localStorage.city = city</span><br><span class="line">      &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在实际项目中，为了使代码更加规范易懂以及更方便维护，所以我们会再建立state.js与mutations.js,然后将index.js代码拆分出来<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//state.js</span></span><br><span class="line"><span class="keyword">let</span> defaultCity = <span class="string">'上海'</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (localStorage.city) &#123;</span><br><span class="line">    defaultCity = localStorage.city</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    city: defaultCity</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mutations.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  changeCity(state, city) &#123;</span><br><span class="line">    state.city = city</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      localStorage.city = city</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol start="37"><li>mapState<br>由于页面中的<code>this.$store.state.city</code>太长了，所以我们可以使用vuex提供的api<code>mapState</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'HomeHeader'</span>,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState([<span class="string">'city'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样在页面中使用<code></code>即可</p><p>同理{mapMutations}也是先引入再使用，使代码看起来更加简洁。</p><ol start="38"><li>使用keep-alive优化性能<br>由于切换路由的时候，组件都会被重新渲染，导致mouted()钩子会重新执行，所以每一次都会发送请求。</li></ol><p>但是项目中的json数据并无改变，所以我们可以在app.vue中使用keep-alive</p><p>使用keep-alive之后，monted()不会执行，但是actived()会执行，所以需要处理什么，可以放在actived钩子函数之中</p><p>actived():当页面重新被显示的时候执行</p><ol start="39"><li>开发详情页</li></ol><p>在recommend.vue中使用router-link标签来进行页面跳转并进行参数的传递<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/detail' + item.id"</span> <span class="attr">tag</span>=<span class="string">'li'</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol start="40"><li><p>在src目录下新建common文件夹，放入的是公用的组件,并在webpack.base.config.js中为此目录创建一个别名</p></li><li><p>在vue开发时，需要注意的是解绑全局事件。如果是对某个标签的事件进行绑定，那么将不会造成影响。但是如果事件是window事件的话将会对其他页面造成一定的影响，所以我们需要进行全局事件的解绑<br>当在组件中使用keep-alive时，此组件会多出一个actived()钩子函数，在每次页面展示的时候会执行。与之对应的会有另一个生命钩子函数叫做deactivated(),在页面即将被隐藏的时候执行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> activated() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</span><br><span class="line">&#125;,</span><br><span class="line">deactivated() &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用递归组件：在组件自身调用组件自身<br>数据格式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list: [&#123;</span><br><span class="line">        title: <span class="string">"成人票"</span>,</span><br><span class="line">        children:[&#123;</span><br><span class="line">            title:<span class="string">"成人三馆联票"</span>,</span><br><span class="line">            children:[&#123;</span><br><span class="line">                title:<span class="string">"成人三馆联票-某连锁销售"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            title:<span class="string">"成人五馆联票"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"学生票"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"特惠票"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        title: <span class="string">"儿童票"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) of list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-title border-bottom"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-title-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;&#123;item.title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"item.children"</span> <span class="attr">class</span>=<span class="string">"item-children"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">detail-list</span> <span class="attr">:list</span>=<span class="string">"item.children"</span>&gt;</span><span class="tag">&lt;/<span class="name">detail-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="43"><li>通过不同id值传参给后端</li></ol><p>在index.js中设置动态路由的时候，会将动态的id以参数的形式设置好<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/city'</span>,</span><br><span class="line">      name: <span class="string">'City'</span>,</span><br><span class="line">      component: City</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/detail/:id'</span>,</span><br><span class="line">      name: <span class="string">'Detail'</span>,</span><br><span class="line">      component: Detail</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在发送请求的时候</p><p>传统方式是通过字符串拼接：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  getDetailInfo()&#123;</span><br><span class="line">    axios.get(<span class="string">'/api/detail.json?id='</span>+<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更为直观的传参方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getDetailInfo() &#123;</span><br><span class="line">   axios.get(<span class="string">'/api/detail.json'</span>, &#123;</span><br><span class="line">           params: &#123;</span><br><span class="line">               id: <span class="keyword">this</span>.$route.params.id</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进行项目实战环节&lt;/p&gt;
&lt;h1 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装node webpack github等环境&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE去哪儿网学习笔记2</title>
    <link href="http://zlstory.com/2018/10/18/vue-note3/"/>
    <id>http://zlstory.com/2018/10/18/vue-note3/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2018-11-06T00:01:33.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue组件中的细节"><a href="#vue组件中的细节" class="headerlink" title="vue组件中的细节"></a>vue组件中的细节</h3><p>在table中使用tr作为全局组件注入到table时，会发生问题：tr并没有按照预期所想放在tbody中，而是与table同级。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;row&gt;<span class="xml"><span class="tag">&lt;/<span class="name">row</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    Vue.component("</span>row<span class="string">",&#123;</span></span><br><span class="line"><span class="string">        template:"</span>&lt;tr&gt;<span class="keyword">this</span> is tr&lt;<span class="regexp">/tr&gt;"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el:"#root"</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;div id="root"&gt;</span></span><br><span class="line"><span class="comment">//     &lt;tr&gt;this is tr&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//     &lt;table&gt;</span></span><br><span class="line"><span class="comment">//         &lt;tbody&gt;&lt;/tbody&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/table&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，可以使用在tr标签中使用vue中的is，这样写既能保证组件的数据时正确的，又能保证符合h5的规范。同ul li</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr is=<span class="string">"row"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子组件的data问题"><a href="#子组件的data问题" class="headerlink" title="子组件的data问题"></a>子组件的data问题</h4><p>在子组件中定义data时必须是一个函数形式 使用return返回数据，而不能是一个对象，因为根组件只会被调用一次，而子组件可能会被不同得地方中调用多次，避免各个地方得同一个子组件中得数据混淆(避免公用数据)，使用函数的return一个对象可以保证子组件拥有独立的数据存储。</p><h4 id="在vue中获取dom"><a href="#在vue中获取dom" class="headerlink" title="在vue中获取dom"></a>在vue中获取dom</h4><p>虽然vue不建议在dom上面操作事件，但是当你需要操作dom的时候，可以使用ref来获取。</p><h4 id="父子组件之间传值问题"><a href="#父子组件之间传值问题" class="headerlink" title="父子组件之间传值问题"></a>父子组件之间传值问题</h4><p>父组件向子组件传递数据是通过属性的方式</p><p>父组件可以向子组件传递参数，但是子组件不能修改父组件中的变量</p><h4 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h4><p>一般父组件向子组件之间进行传值是通过prop的形式，但是当我们需要向子组件传递html文本的时候，发现prop并不好用，如:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;child content=<span class="string">"&lt;p&gt;通过prop向子组件中传值：&lt;/p&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  var child = &#123;</span></span><br><span class="line"><span class="regexp">    template:`</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div v-html = "this.content"&gt;&lt;/</span>div&gt;</span><br><span class="line">            <span class="keyword">this</span> is child</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    `,</span></span><br><span class="line"><span class="regexp">    props:['content']</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el:"#root",</span></span><br><span class="line"><span class="regexp">    components:&#123;</span></span><br><span class="line"><span class="regexp">        child:child</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>此时我们浏览器解析出来的dom结构为：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span>通过prop向子组件中传值：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        this is child</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以发现p标签是被一个div包裹着的，这并不是我们所需要的，而且当我们需要向子组件传递大量html的时候，content中需要写入大量的代码，所以slot(插槽)的作用就可以体现出来了。</p><p>slot：父组件向子组件中优雅的传递dom</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue组件中的细节&quot;&gt;&lt;a href=&quot;#vue组件中的细节&quot; class=&quot;headerlink&quot; title=&quot;vue组件中的细节&quot;&gt;&lt;/a&gt;vue组件中的细节&lt;/h3&gt;&lt;p&gt;在table中使用tr作为全局组件注入到table时，会发生问题：tr并没有按照预期
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE去哪儿网学习笔记1</title>
    <link href="http://zlstory.com/2018/09/27/vue-note2/"/>
    <id>http://zlstory.com/2018/09/27/vue-note2/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2018-11-06T00:01:42.497Z</updated>
    
    <content type="html"><![CDATA[<p>知识点：</p><pre><code>1. 使用axios进行ajax数据的获取2. 使用vue-router来进行多页面之间的路由跳转3. 使用vuex各个组件之间的数据共享4. 使用异步组件来优化性能5. 使用stylus编写样式6. 使用递归组件来实现组件调用自身组件7. 各种插件的调用：如swiper8. 自己对公用组件的拆分</code></pre><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="查看vue-js的官方文档"><a href="#查看vue-js的官方文档" class="headerlink" title="查看vue.js的官方文档"></a>查看vue.js的官方文档</h2><ol><li><p>使用vue.js实现todoList的功能，体现了vue的编程思想是MVVM：不改变DOM，而是只操作数据，最后dom随着数据的改变而改变</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"text"</span> v-model = <span class="string">"inputValue"</span>&gt;</span><br><span class="line">       &lt;button @click = <span class="string">"handleBtnClick"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">       &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">           &lt;li v-for="item in list"&gt;</span></span><br><span class="line"><span class="regexp">               &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>li&gt;</span><br><span class="line">       &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           el:<span class="string">"#app"</span>,</span><br><span class="line">           data:&#123;</span><br><span class="line">               list:[],</span><br><span class="line">               inputValue:<span class="string">''</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line">               handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 <span class="comment">//  console.log(this.inputValue)</span></span><br><span class="line">                 <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</span><br><span class="line">                 <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   </span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用JavaScript实现todolist的功能，体现的是MVP的编程思想：M是模型层（此段代码并没有体现），dom是V层，P(核心层)是js部分，指的是控制器，当点击按钮的时候，控制器里面的代码会执行，负责了所有的逻辑部分，控制器可以调用模型层来发起ajax请求，也可以操作dom改变视图。   Presenter层是View层以及Model层的中转站</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"input"</span>&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul id="list"&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/code.jquery.com/</span>jquery<span class="number">-1.11</span><span class="number">.3</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    function Page() &#123;  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    $.extend(Page.prototype,&#123;</span></span><br><span class="line"><span class="string">        init:function()&#123;</span></span><br><span class="line"><span class="string">            this.bindEvents()</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        bindEvents:function()&#123;</span></span><br><span class="line">            var btn = $("#btn");</span><br><span class="line">            btn.on(<span class="string">"click"</span>,$.proxy(<span class="keyword">this</span>.handleBtnClick,<span class="keyword">this</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        handleBtnClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> inputValue = $(<span class="string">"#input"</span>).val();</span><br><span class="line">            <span class="keyword">var</span> ulElem = $(<span class="string">"#list"</span>)</span><br><span class="line">            ulElem.append(<span class="string">"&lt;li&gt;"</span>+inputValue+<span class="string">"&lt;/li&gt;"</span>);</span><br><span class="line">            $(<span class="string">"#input"</span>).val(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line">    page.init()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MVP与MVVM设计模式<br>MVVM:  View - ViewModel - Model</p></li></ol><p>Model:负责存储数据<br>View:视图层，负责显示数据<br>ViewModel:vue自带的一层(内置))，不需要我们去关心怎么实现的。<br>当我们使用MVVM设计模式的时候，我们只需要关心view和model。</p><p>在mvp设计模式开发的时候是面向DOM，mvvm设计模式面向数据进行编程，大大的简化了DOM的操作，可以节约代码量</p><ol start="4"><li>前端组件化</li></ol><p>使用Vue.component创建全局组件<br>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"TodoItem"</span>,&#123;</span><br><span class="line">    props:[<span class="string">"content"</span>],</span><br><span class="line">    template:<span class="string">"&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注册局部组件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> TodoItem = &#123;</span><br><span class="line">    props:[<span class="string">"content"</span>],</span><br><span class="line">    template:<span class="string">"&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在根部注册</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#root"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        TodoItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>子组件向父组件传值<br>在子组件的模板中定义事件<code>deleteSelf</code>，并在methods中使用$emit()向外触发事件，并且可以传值;<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在子组件中的methods中</span></span><br><span class="line"> <span class="keyword">var</span> TodoItem = &#123;</span><br><span class="line">    props:[<span class="string">"content"</span>,<span class="string">'index'</span>],</span><br><span class="line">    template:<span class="string">"&lt;li @click='deleteSelf'&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;"</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        deleteSelf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'delete'</span>,<span class="keyword">this</span>.index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在局部组件中，动态的监听刚刚在子组件中定义的事件<code>delete</code>，并将其动态的绑定到父组件的事件中 <code>deleteSon</code>,此时需要父组件改变数据，则DOM树会相应改变。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;todo-item v-<span class="keyword">for</span>=<span class="string">"(item,index) in list "</span> </span><br><span class="line">          v-bind:index=<span class="string">"index"</span>  </span><br><span class="line">          v-bind:content=<span class="string">"item"</span>   </span><br><span class="line">          v-on:<span class="keyword">delete</span> = <span class="string">"deleteSon"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/todo-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   var app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el:"#root",</span></span><br><span class="line"><span class="regexp">      components:&#123;</span></span><br><span class="line"><span class="regexp">          TodoItem</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      data:&#123;</span></span><br><span class="line"><span class="regexp">          todoValue:"",</span></span><br><span class="line"><span class="regexp">          list:[]</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods:&#123;</span></span><br><span class="line"><span class="regexp">          deleteSon:function(index)&#123;</span></span><br><span class="line"><span class="regexp">              this.list.splice(index,1)</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br></pre></td></tr></table></figure></p><ol start="6"><li>生命周期函数</li></ol><p>生命周期函数就是vue实例在某一个时间点会自动执行的函数,可以直接在vue实例中执行，不需要在methods中定义。</p><p>常用的八种生命周期函数</p><p>(1) beforeCreate:创建vue实例并且实例进行了基础的初始化之后就会执行。<br>(2) created：接着vue会继续处理一些外部的注入以及双向绑定的相关内容，完成之后触发created函数。<br>(3) beforeMount：vue实例中有了数据并定义了template之后，在页面渲染之前会触发beforeMount函数<br>(4) mounted: vue中的dom挂载在页面之后，执行mounted函数<br>(5) beforeDestroy：当destory()方法调用时，当组件即将被销毁时触发该函数。<br>(6) destroyed:当组件完全被销毁时，会触发destroyed<br>(7) beforeUpdate:当数据发生改变的时候，触发beforeUpdate函数。<br>(8) updated:虚拟dom重新渲染之后，执行updated函数</p><ol start="7"><li>computed、watch与methods</li></ol><p>computed与watch具有缓存机制，如果涉及的变量不改变，则不会执行。</p><p>methods是任何变量改变都会触发methods函数。</p><ol start="8"><li>样式绑定</li></ol><p>(1) class的对象绑定<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleColor"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active : isActive&#125;"</span>&gt;样式改变&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            isActive: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2) class的数组绑定</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleColor"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive]"</span>&gt;样式改变&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#root"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isActive: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isActive = <span class="keyword">this</span>.isActive == <span class="string">"active"</span> ? <span class="string">""</span> : <span class="string">"active"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>(3) style的内联样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div :style=<span class="string">"styleObj"</span> @click=<span class="string">"handleColor"</span>&gt;</span><br><span class="line">        hello world</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleObj:&#123;</span><br><span class="line">                color : <span class="string">"black"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.styleObj.color = <span class="keyword">this</span>.styleObj.color == <span class="string">'black'</span> ? <span class="string">"red"</span> : <span class="string">"black"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>(4) style的数组样式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div :style=<span class="string">"[styleArr,&#123;fontSize:'20px'&#125;]"</span> @click=<span class="string">"handleColor"</span>&gt;</span><br><span class="line">        hello world</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            styleArr:&#123;</span><br><span class="line">                color : <span class="string">"black"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.styleArr.color = <span class="keyword">this</span>.styleArr.color == <span class="string">'black'</span> ? <span class="string">"red"</span> : <span class="string">"black"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>v-if 与 v-show<br>v-if 与 v-show 都能控制模板标签是否在页面中显示，但是条件是false时，v-if对应的标签不存在于dom中，而v-show是在标签内加入display：none隐藏dom；所以v-show的性能更高一点，因为他不会频繁的去操作dom。</p></li><li><p>key值：Vue提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key 属性即可。<br>在v-for循环时可以使用key值来提高性能，需注意key尽量唯一且不要用index来标识key。</p></li><li><p>当我们要改变数据操作数组时，必须要用vue已经定义的七种方法来操作数组数据，不能够直接通过数组下标来操作(数据改变但是页面并不会改变)。</p></li></ol><p>数组的变异方法：</p><p>pop push shift unshift splice sort reverse</p><ol start="12"><li>set方法</li></ol><p>因为 Vue 无法探测普通的新增属性，所以直接向vue中数组以及对象中直接添加数据虽然改变了数据但是并不会改变页面中的视图。</p><p>set方法用于向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">for</span> = <span class="string">"(item,key,index) of userInfo"</span>&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            userInfo:&#123;</span><br><span class="line">                name:<span class="string">"张三"</span>,</span><br><span class="line">                age:<span class="string">"23"</span>,</span><br><span class="line">                gender:<span class="string">"male"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.set(vm.userInfo,<span class="string">"address"</span>,<span class="string">"hangzhou"</span>);</span><br><span class="line">    <span class="comment">// vm.set(vm.userInfo,"address","hangzhou");</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>总结：改变数组并实时触发视图更新有三种方法<br>(1) 使用vue提供的数组变异方法</p><p>(2) 直接改变应用数据</p><p>(3) 使用Vue.set()方法或者实例</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知识点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 使用axios进行ajax数据的获取
2. 使用vue-router来进行多页面之间的路由跳转
3. 使用vuex各个组件之间的数据共享
4. 使用异步组件来优化性能
5. 使用stylus编写样式
6. 使用递归组件来实现组件
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>常用css汇总</title>
    <link href="http://zlstory.com/2018/09/11/css/"/>
    <id>http://zlstory.com/2018/09/11/css/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-09-11T01:26:52.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="改变placeholder颜色"><a href="#改变placeholder颜色" class="headerlink" title="改变placeholder颜色"></a>改变placeholder颜色</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Internet Explorer 10-11 */</span></span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换背景图改变checkbox样式"><a href="#替换背景图改变checkbox样式" class="headerlink" title="替换背景图改变checkbox样式"></a>替换背景图改变checkbox样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"spot"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>我已阅读并接受《芒果用户服务协议》</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">label</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:left;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">label</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"><span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.spot</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-block;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"../images/uncheck.png"</span>) no-repeat;  <span class="comment">/*未选中的样式图片*/</span></span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">24px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">12px</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>:<span class="number">5</span>;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.spot</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"../images/checked.png"</span>) no-repeat;  <span class="comment">/*选中后的样式图片*/</span></span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;改变placeholder颜色&quot;&gt;&lt;a href=&quot;#改变placeholder颜色&quot; class=&quot;headerlink&quot; title=&quot;改变placeholder颜色&quot;&gt;&lt;/a&gt;改变placeholder颜色&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>随机生成图片验证码</title>
    <link href="http://zlstory.com/2018/09/11/identifyImg/"/>
    <id>http://zlstory.com/2018/09/11/identifyImg/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2019-10-23T14:12:40.915Z</updated>
    
    <content type="html"><![CDATA[<p>在vue-cli项目中，点击图片随机产生四位数验证码</p><ol><li><p>封装的identityImg.vue组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s-canvas"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"s-canvas"</span> <span class="attr">:width</span>=<span class="string">"contentWidth"</span> <span class="attr">:height</span>=<span class="string">"contentHeight"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"SIdentify"</span>,</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    identifyCode: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//默认注册码</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">"1234"</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    fontSizeMin: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 字体最小值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">25</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    fontSizeMax: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 字体最大值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">35</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    backgroundColorMin: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 验证码图片背景色最小值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">200</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    backgroundColorMax: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 验证码图片背景色最大值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">220</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    dotColorMin: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 背景干扰点最小值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">60</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    dotColorMax: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 背景干扰点最大值</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">120</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    contentWidth: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//容器宽度</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">100</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    contentHeight: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//容器高度</span></span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">30</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 生成一个随机数</span></span></span><br><span class="line"><span class="undefined">    randomNum(min, max) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 生成一个随机的颜色</span></span></span><br><span class="line"><span class="undefined">    randomColor(min, max) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> r = <span class="keyword">this</span>.randomNum(min, max);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> g = <span class="keyword">this</span>.randomNum(min, max);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> b = <span class="keyword">this</span>.randomNum(min, max);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">"rgb("</span> + r + <span class="string">","</span> + g + <span class="string">","</span> + b + <span class="string">")"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawPic() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"s-canvas"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">      ctx.textBaseline = <span class="string">"bottom"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制背景</span></span></span><br><span class="line"><span class="javascript">      ctx.fillStyle = <span class="keyword">this</span>.randomColor(</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.backgroundColorMin,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.backgroundColorMax</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="javascript">      ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.contentWidth, <span class="keyword">this</span>.contentHeight);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制文字</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.identifyCode.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.drawText(ctx, <span class="keyword">this</span>.identifyCode[i], i);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.drawLine(ctx);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.drawDot(ctx);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawText(ctx, txt, i) &#123;</span></span><br><span class="line"><span class="javascript">      ctx.fillStyle = <span class="keyword">this</span>.randomColor(<span class="number">50</span>, <span class="number">160</span>); <span class="comment">//随机生成字体颜色</span></span></span><br><span class="line"><span class="undefined">      ctx.font =</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.randomNum(<span class="keyword">this</span>.fontSizeMin, <span class="keyword">this</span>.fontSizeMax) + <span class="string">"px SimHei"</span>; <span class="comment">//随机生成字体大小</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> x = (i + <span class="number">1</span>) * (<span class="keyword">this</span>.contentWidth / (<span class="keyword">this</span>.identifyCode.length + <span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> y = <span class="keyword">this</span>.randomNum(<span class="keyword">this</span>.fontSizeMax, <span class="keyword">this</span>.contentHeight - <span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> deg = <span class="keyword">this</span>.randomNum(<span class="number">-30</span>, <span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 修改坐标原点和旋转角度</span></span></span><br><span class="line"><span class="undefined">      ctx.translate(x, y);</span></span><br><span class="line"><span class="javascript">      ctx.rotate((deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">      ctx.fillText(txt, 0, 0);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 恢复坐标原点和旋转角度</span></span></span><br><span class="line"><span class="javascript">      ctx.rotate((-deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span>);</span></span><br><span class="line"><span class="undefined">      ctx.translate(-x, -y);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawLine(ctx) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制干扰线</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        ctx.strokeStyle = <span class="keyword">this</span>.randomColor(<span class="number">100</span>, <span class="number">200</span>);</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.moveTo(</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth),</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight)</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">        ctx.lineTo(</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth),</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight)</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">        ctx.stroke();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    drawDot(ctx) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制干扰点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        ctx.fillStyle = <span class="keyword">this</span>.randomColor(<span class="number">0</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="undefined">        ctx.beginPath();</span></span><br><span class="line"><span class="undefined">        ctx.arc(</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentWidth),</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.contentHeight),</span></span><br><span class="line"><span class="undefined">          1,</span></span><br><span class="line"><span class="undefined">          0,</span></span><br><span class="line"><span class="javascript">          <span class="number">2</span> * <span class="built_in">Math</span>.PI</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">        ctx.fill();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="undefined">    identifyCode() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.drawPic();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.drawPic();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在所需页面中使用方式</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">van-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">slot</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"verify-box"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"refreshCode"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"padding:0;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">identify-img</span> <span class="attr">:identifyCode</span>=<span class="string">"identifyCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">identify-img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> identifyImg <span class="keyword">from</span> <span class="string">"@/components/identifyImg/identifyImg"</span>;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      identifyCode: <span class="string">"2343"</span>, <span class="comment">//默认值</span></span><br><span class="line">      identifyCodes: <span class="string">"1234567890"</span>, <span class="comment">//不可变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    identifyImg</span><br><span class="line">  &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">    randomNum(min, max) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span><br><span class="line">    &#125;,</span><br><span class="line">    refreshCode() &#123;</span><br><span class="line">      <span class="keyword">this</span>.identifyCode = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">this</span>.makeCode(<span class="keyword">this</span>.identifyCodes, <span class="number">4</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    makeCode(o, l) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.identifyCode += <span class="keyword">this</span>.identifyCodes[</span><br><span class="line">          <span class="keyword">this</span>.randomNum(<span class="number">0</span>, <span class="keyword">this</span>.identifyCodes.length)</span><br><span class="line">        ];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在vue-cli项目中，点击图片随机产生四位数验证码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;封装的identityImg.vue组件&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://zlstory.com/tags/canvas/"/>
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>axios传参报错400问题总结</title>
    <link href="http://zlstory.com/2018/08/09/qs/"/>
    <id>http://zlstory.com/2018/08/09/qs/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2019-11-21T03:50:05.889Z</updated>
    
    <content type="html"><![CDATA[<p>在使用axios传参的时候，发现只用post方法的时候，默认请求方式为payload，</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180810163720.png" alt=" "></p><p>百度了各种操作之后，试过以下几种方法：</p><ol><li>改变headers</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">headers: &#123;  <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808101637202.png" alt=" "><br>这种操作虽然将payload改为了formData形式，但是依旧报400错</p><ol start="2"><li>Json.stringify()</li></ol><p>请求头问题排除之后，开始研究参数自身问题，使用<code>json.stringify()</code>格式化参数之后，依旧不见效。</p><ol start="3"><li>qs.stringify()</li></ol><p>之前没有接触过qs.stringify，发现他与json.stringify转换成最后的格式并不相同，所以对参数进行qs.stringify(data)之后，即使不设置headers也没有出现问题。成功。</p><p><img src="http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808101637201.png" alt=" "></p><ol start="4"><li>两者区别</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'hehe'</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a) <span class="comment">// "&#123;"a":"hehe","age":10&#125;"</span></span><br><span class="line"></span><br><span class="line">qs.stringify(a) <span class="comment">// name=hehe&amp;age=10</span></span><br></pre></td></tr></table></figure><p>总结：(1)axios在使用post方法出现400问题时，不能直接传递一个js对象，而需要通过qs.stringify()将参数格式转换一下，注意：不能使用json.stringify（）。</p><p>(2)axios请求头是随你的请求方式改变而改变的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用axios传参的时候，发现只用post方法的时候，默认请求方式为payload，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p09xm7bj0.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201808
      
    
    </summary>
    
    
      <category term="vue" scheme="http://zlstory.com/tags/vue/"/>
    
  </entry>
  
</feed>
